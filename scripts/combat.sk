#Begin main script

#Grab entity stats and return the value
#If something breaks, return -1
function getEntityStat(ENT: entity, STAT: text) :: number:
	#Find citizen id of entity for compare checks
	set {_CID} to citizen id of {_ENT}
	#Is Monster
	if {t_%{_STAT}%.%{_ENT}%} is set:
		clear {_CID}
		return {t_%{_STAT}%.%{_ENT}%}
	#Is Player
	else if {_CID} is not set:
		clear {_CID}
		return {%{_STAT}%.%{_ENT}%}
	#Is NPC
	else if {_CID} is set:
		return {npc_%{_STAT}%.%{_CID}%}
		clear {_CID}
	else:
		clear {_CID}
		return -1
	
#Returns the combined stat total specified
function getEntityStatTotal(ENT: entity, STAT: text) :: number:
	#Find citizen id of entity for compare checks
	set {_CID} to citizen id of {_ENT}
	#broadcast "%{_CID}%"
	#Is Monster
	if {t_%{_STAT}%.%{_ENT}%} is set:
		clear {_CID}
		return ({t_%{_STAT}%.%{_ENT}%} + {t_%{_STAT}%buff.%{_ENT}%})
	#Is Player
	else if {_CID} is not set:
		clear {_CID}
		return ({%{_STAT}%.%{_ENT}%} + {%{_STAT}%buff.%{_ENT}%})
	#Is NPC
	else if {_CID} is set:
		return ({npc_%{_STAT}%.%{_CID}%} + {npc_%{_STAT}%buff.%{_CID}%})
		clear {_CID}
	else:
		clear {_CID}
		return -1
	
#Returns the specified buffs for a given entity	
function getEntityStatBuff(ENT: entity, STAT: text) :: number:
	#Find citizen id of entity for compare checks
	set {_CID} to citizen id of {_ENT}
	#Is Monster
	if {t_%{_STAT}%.%{_ENT}%} is set:
		clear {_CID}
		return {t_%{_STAT}%buff.%{_ENT}%}
	#Is Player
	else if {_CID} is not set:
		clear {_CID}
		return {%{_STAT}%buff.%{_ENT}%}
	#Is NPC
	else if {_CID} is set:
		return {npc_%{_STAT}%buff.%{_CID}%}
		clear {_CID}
	else:
		clear {_CID}
		return -1
		
#Adds the specified value to a given entity's given stat
#Return 0 if change succeeded, -1 if failed
#The TEMPORARY flag tells the game to add the buff to tempActiveBuffs so that it can be cleared after combat resolves
function changeEntityStatBuff(ENT: entity, STAT: text, CHANGE: number,SKILL: text,TEMPORARY: number) :: number:
	#Find citizen id of entity for compare checks
	set {_CID} to citizen id of {_ENT}
	#Is Monster
	if {t_%{_STAT}%.%{_ENT}%} is set:
		clear {_CID}
		add {_CHANGE} to {t_%{_STAT}%buff.%{_ENT}%}
		if {_TEMPORARY} is 1:
			set {t_tempActiveBuffs.%{_STAT}%.%{_ENT}%::%{_SKILL}%} to {_CHANGE}
		else:
			set {t_activeBuffs.%{_STAT}%.%{_ENT}%::%{_SKILL}%} to {_CHANGE}
		#Updates entity Max HP if needed
		if {_STAT} is "HP":
			set {_ENT}'s maximum health to (getEntityStatTotal({_ENT},"HP") / 2)
		return 0
	#Is Player
	else if {_CID} is not set:
		clear {_CID}
		add {_CHANGE} to {%{_STAT}%buff.%{_ENT}%}
		if {_TEMPORARY} is 1:
			set {tempActiveBuffs.%{_STAT}%.%{_ENT}%::%{_SKILL}%} to {_CHANGE} + {tempActiveBuffs.%{_STAT}%.%{_ENT}%::%{_SKILL}%}
		else:
			add {_CHANGE} to {activeBuffs.%{_STAT}%.%{_ENT}%::%{_SKILL}%}
			if {activeBuffs.%{_STAT}%.%{_ENT}%::%{_SKILL}%} is 0:
				clear {activeBuffs.%{_STAT}%.%{_ENT}%::%{_SKILL}%}
		#Updates entity Max HP if needed
		if {_STAT} is "HP":
			set {_ENT}'s maximum health to (getEntityStatTotal({_ENT},"HP") / 2)
		if {verboseCombatLogging.%{_ENT}%} is true:
			send formatted "[%{_SKILL}%]: <gold>%{_STAT}% +%{_CHANGE}%" to {_ENT}
		return 0
	#Is NPC
	else if {_CID} is set:
		add {_CHANGE} to {npc_%{_STAT}%buff.%{_CID}%}
		if {_TEMPORARY} is 1:
			set {npc_tempActiveBuffs.%{_STAT}%.%{_CID}%::%{_SKILL}%} to {_CHANGE}
		else:
			set {npc_activeBuffs.%{_STAT}%.%{_CID}%::%{_SKILL}%} to {_CHANGE}
		#Updates entity Max HP if needed
		if {_STAT} is "HP":
			set {_ENT}'s maximum health to (getEntityStatTotal({_ENT},"HP") / 2)
		clear {_CID}
		return 0
	else:
		clear {_CID}
		return -1
		
#Increase/decrease the specified variable by a particular amount
function changeEntityVariableByName(ENT: entity, VAR: text, VAL: number) :: number:
	#Find citizen id of entity for compare checks
	set {_CID} to citizen id of {_ENT}
	#Is Monster
	if {_ENT} is monster:
		clear {_CID}
		add {_VAL} to {t_%{_VAR}%.%{_ENT}%}
		return 0
	#Is Player
	else if {_CID} is not set:
		clear {_CID}
		add {_VAL} to {%{_VAR}%.%{_ENT}%}
		return 0
	#Is NPC
	else if {_CID} is set:
		add {_VAL} to {npc_%{_VAR}%.%{_CID}%}
		clear {_CID}
		return 0
	else:
		clear {_CID}
		return -1

#More powerful variable set tool, be careful with this one
function setEntityVariableByName(ENT: entity, VAR: text, VAL: number) :: number:
	#Find citizen id of entity for compare checks
	set {_CID} to citizen id of {_ENT}
	#Is Monster
	if {_ENT} is monster:
		clear {_CID}
		set {t_%{_VAR}%.%{_ENT}%} to {_VAL}
		return 0
	#Is Player
	else if {_CID} is not set:
		clear {_CID}
		set {%{_VAR}%.%{_ENT}%} to {_VAL}
		return 0
	#Is NPC
	else if {_CID} is set:
		set {npc_%{_VAR}%.%{_CID}%} to {_VAL}
		clear {_CID}
		return 0
	else:
		clear {_CID}
		return -1
		
#Allows you to set a specified variable to text
function setEntityVariableAsTextByName(ENT: entity, VAR: text, TXT: text) :: number:
	#Find citizen id of entity for compare checks
	set {_CID} to citizen id of {_ENT}
	#Is Monster
	if {_ENT} is monster:
		clear {_CID}
		set {t_%{_VAR}%.%{_ENT}%} to {_TXT}
		return 0
	#Is Player
	else if {_CID} is not set:
		clear {_CID}
		set {%{_VAR}%.%{_ENT}%} to {_TXT}
		return 0
	#Is NPC
	else if {_CID} is set:
		set {npc_%{_VAR}%.%{_CID}%} to {_TXT}
		clear {_CID}
		return 0
	else:
		clear {_CID}
		return -1
		
#Allows you to set a specified index of an array variable to text
function setEntityArrayIndexAsTextByName(ENT: entity, ARR: text, IND: text, TXT: text) :: number:
	#Find citizen id of entity for compare checks
	set {_CID} to citizen id of {_ENT}
	#Is Monster
	if {_ENT} is monster:
		clear {_CID}
		set {t_%{_ARR}%.%{_ENT}%::%{_IND}%} to {_TXT}
		return 0
	#Is Player
	else if {_CID} is not set:
		clear {_CID}
		set {%{_ARR}%.%{_ENT}%::%{_IND}%} to {_TXT}
		return 0
	#Is NPC
	else if {_CID} is set:
		set {npc_%{_ARR}%.%{_CID}%::%{_IND}%} to {_TXT}
		clear {_CID}
		return 0
	else:
		clear {_CID}
		return -1
		
#Allows you to add/subtract a particular value from a specified index in an array.
function changeEntityArrayIndexByName(ENT: entity, ARR: text, IND: text, VAL: number) :: number:
	#Find citizen id of entity for compare checks
	set {_CID} to citizen id of {_ENT}
	#Is Monster
	if {_ENT} is monster:
		clear {_CID}
		add {_VAL} to {t_%{_ARR}%.%{_ENT}%::%{_IND}%}
		return 0
	#Is Player
	else if {_CID} is not set:
		clear {_CID}
		add {_VAL} to {%{_ARR}%.%{_ENT}%::%{_IND}%}
		return 0
	#Is NPC
	else if {_CID} is set:
		add {_VAL} to {npc_%{_ARR}%.%{_CID}%::%{_IND}%}
		clear {_CID}
		return 0
	else:
		clear {_CID}
		return -1
	
#Clear the specified variable
#Returns 0 if successful, otherwise returns -1
function clearEntityVariableByName(ENT: entity,VAR: text) :: number:
	#Find citizen id of entity for compare checks
	set {_CID} to citizen id of {_ENT}
	#Is Monster
	if {_ENT} is monster:
		clear {_CID}
		clear {t_%{_VAR}%.%{_ENT}%}
		return 0
	#Is Player
	else if {_CID} is not set:
		clear {_CID}
		clear {%{_VAR}%.%{_ENT}%}
		return 0
	#Is NPC
	else if {_CID} is set:
		clear {npc_%{_VAR}%.%{_CID}%}
		clear {_CID}
		return 0
	else:
		clear {_CID}
		return -1	
	
#Grab entity variable and return the value
#If something breaks, return -1
#If variable is not set, return -2
function getEntityVarByName(ENT: entity, STAT: text) :: text:
	#Find citizen id of entity for compare checks
	set {_CID} to citizen id of {_ENT}
	#Is Monster
	if {t_str.%{_ENT}%} is set:
		clear {_CID}
		if {t_%{_STAT}%.%{_ENT}%} is set:
			return "%{t_%{_STAT}%.%{_ENT}%}%"
		else:
			return "-2"
	#Is Player
	else if {_CID} is not set:
		clear {_CID}
		if {%{_STAT}%.%{_ENT}%} is set:
			return "%{%{_STAT}%.%{_ENT}%}%"
		else:
			return "-2"
	#Is NPC
	else if {_CID} is set:
		if {npc_%{_STAT}%.%{_CID}%} is set:
			return "%{npc_%{_STAT}%.%{_CID}%}%"
			clear {_CID}
		else:
			clear {_CID}
			return "-2"
	else:
		clear {_CID}
		return "-1"
		
#Grab a particular index value from an entity's data (arrays)
#If something breaks, return -1
function getEntityArrayValueByName(ENT: entity, ARR: text,IND: text) :: text:
	#Find citizen id of entity for compare checks
	set {_CID} to citizen id of {_ENT}
	#Is Monster
	if {t_%{_ARR}%.%{_ENT}%::%{_IND}%} is set:
		clear {_CID}
		return "%{t_%{_ARR}%.%{_ENT}%::%{_IND}%}%"
	#Is Player
	else if {_CID} is not set:
		clear {_CID}
		return "%{%{_ARR}%.%{_ENT}%::%{_IND}%}%"
	#Is NPC
	else if {_CID} is set:
		return "%{npc_%{_STAT}%.%{_CID}%::%{_IND}%}%"
		clear {_CID}
	else:
		clear {_CID}
		return "-1"
		
#Determines if the player's held item(s) has a particular skill equipped.
#0 = Current Weapon
#1 = Current Offhand Weapon
#2 = Both Weapons
#Returns 1 if skill was found, returns 2 if skill was found on both items, otherwise returns 0
function getEntitySkillsInHand(ENT: entity, SKL: text, EQUIP: number,LINE: number) :: number:
	if {_EQUIP} is 0:
		if line {_LINE} of the lore of {_ENT}'s tool contains {_SKL}:
			return 1
		else:
			return 0
	else if {_EQUIP} is 1:
		if line {_LINE} of the lore of {_ENT}'s offhand tool contains {_SKL}:
			return 1
		else:
			return 0
	else if {_EQUIP} is 2:
		if line {_LINE} of the lore of {_ENT}'s tool contains {_SKL}:
			if line {_LINE} of the lore of {_ENT}'s offhand tool contains {_SKL}:
				return 2
			else:
				return 1
		else if line {_LINE} of the lore of {_ENT}'s offhand tool contains {_SKL}:
			return 1
		else:
			return 0
	else:
		return 0
		
#Determines what range an entity can attack based on equipped weapon & skills
#1 = Melee
#2 = Ranged
#3 = Melee W/ All-Range Counters (Distant Counter or similar effects)
#4 = Ranged W/ All-Range Counters (Close Counter or similar effects)
function getEntityRange(ENT: entity) :: number:
	#To make things easier, we set a temp value to 0 and add to it to calculate the proper return value.
	set {_range} to 0
	if getEntitySkillsInHand({_ENT},"Counter",4,0) is more than 0:
		add 2 to {_range}
	else if getEntitySkillsInHand({_ENT},"Counter",4,0) is more than 0:
		add 2 to {_range}
	if {_ENT}'s tool is any sword:
		add 1 to {_range}
	else if {_ENT}'s tool is any axe:
		add 1 to {_range}
	else if nbt of {_ENT}'s tool contains "LanceType":
		add 1 to {_range}
	else if nbt of {_ENT}'s tool contains "GauntletType":
		add 1 to {_range}
	else if nbt of {_ENT}'s tool contains "DaggerType":
		add 1 to {_range}
	else if {_ENT}'s tool is prismarine shard:
		add 1 to {_range}
	else if {_ENT}'s tool is a bow:
		add 2 to {_range}
	else if {_ENT}'s tool is any horse armor:
		add 2 to {_range}
	else if {_ENT}'s tool is a blaze rod:
		add 2 to {_range}
	else if {_ENT}'s tool is a book:
		add 2 to {_range}
	else if {_ENT}'s tool is any hoe:
		add 2 to {_range}
	else if {_ENT}'s tool is blaze powder:
		add 2 to {_range}
	else if {_ENT}'s tool is air:
		add 1 to {_range}
		
#Applies an effect to a given entity that activates every second for a specified duration
function applyOOCStatusEffect(ENT: entity,STATUS: text,DURATION: number) :: number:
	if {_ENT} is alive:
		#Find citizen id of entity for compare checks
		set {_CID} to citizen id of {_ENT}
		#add {_ENT} to {statusEffectsToTick::*}
		#Is Monster
		if {t_str.%{_ENT}%} is set:
			set {t_statusEffects.%{_ENT}%::%{_STATUS}%} to {_DURATION}
			add {_ENT} to {t_statusEffectEntities::*}
			return 1
		#Is Player
		else if {_CID} is not set:
			set {statusEffects.%{_ENT}%::%{_STATUS}%} to {_DURATION}
			#set {originalStatusEffectTime.%{_ENT}%::%{_STATUS}%} to {_DURATION}
			add {_ENT} to {t_statusEffectEntities::*}
			return 1
		#Is NPC
		else if {_CID} is set:
			if {npc_%{_STAT}%.%{_CID}%} is set:
				set {npc_statusEffects.%{_CID}%::%{_STATUS}%} to {_DURATION}
				add {_ENT} to {t_statusEffectEntities::*}
				clear {_CID}
				return 1
			else:
				clear {_CID}
				return -2
		else:
			clear {_CID}
			return -1
		
#Adjusts the time remaining on an OOC Status Effect
#Any positive number to subtract, -1 to clear
#Returns the updated time on the debuff, so you can use 0 as the time change to return the remaining duration of the status effect
#Returns -1 if status effect is not active
function changeOOCStatusTime(ENT: entity,STATUS: text,CHANGE: number) :: number:
	#Might fix Dazing stopping enemies from dying?
	if {_ENT} is not alive:
		kill {_ENT}
	else:
		#Find citizen id of entity for compare checks
		set {_CID} to citizen id of {_ENT}
		#add {_ENT} to {statusEffectsToTick::*}
		#Is Monster
		if {t_str.%{_ENT}%} is set:
			if {_CHANGE} is -1:
				clear {t_statusEffects.%{_ENT}%::%{_STATUS}%}
				#clear {t_statusEffectEntities::%{_ENT}%}
			else if {_CHANGE} is not 0:
				subtract {_CHANGE} from {t_statusEffects.%{_ENT}%::%{_STATUS}%}
			if {t_statusEffects.%{_ENT}%::%{_STATUS}%} is not set:
				return -1
			return {t_statusEffects.%{_ENT}%::%{_STATUS}%}
		#Is Player
		else if {_CID} is not set:
			if {_CHANGE} is -1:
				clear {statusEffects.%{_ENT}%::%{_STATUS}%}
				#clear {t_statusEffectEntities::%{_ENT}%}
			else if {_CHANGE} is not 0:
				subtract {_CHANGE} from {statusEffects.%{_ENT}%::%{_STATUS}%}
			if {statusEffects.%{_ENT}%::%{_STATUS}%} is not set:
				return -1
			return {statusEffects.%{_ENT}%::%{_STATUS}%}
		#Is NPC
		else if {_CID} is set:
			if {npc_%{_STAT}%.%{_CID}%} is set:
				if {_CHANGE} is -1:
					clear {npc_statusEffects.%{_CID}%::%{_STATUS}%}
					#clear {t_statusEffectEntities::%{_ENT}%}
				else if {_CHANGE} is not 0:
					subtract {_CHANGE} from {npc_statusEffects.%{_CID}%::%{_STATUS}%}
				if {npc_statusEffects.%{_CID}%::%{_STATUS}%} is not set:
					return -1
				return {npc_statusEffects.%{_CID}%::%{_STATUS}%}
			else:
				clear {_CID}
				return -1
		else:
			clear {_CID}
			return -1
		
#Returns total leadership value applied to the specified entity
function getAllyLeadership(TGT: entity) :: number:
	if {_TGT} is a player:
		loop all players in radius 30 of {_TGT}:
			if {party.%loop-player%} is {party.%{_TGT}%}:
				if loop-player is {_TGT}:
					add floor(((getEntityStatTotal(loop-player,"CHR")) / 4) * ((checkSlots({_TGT},"Under This Banner")) + 1)) to {_leadership}
				else:
					add floor(((getEntityStatTotal(loop-player,"CHR")) / 2) * ((checkSlots({_TGT},"Under This Banner")) + 1)) to {_leadership}
	else if {_TGT} is a monster:
		loop all monsters in radius 15 of {_TGT}:
			if loop-monster is {_TGT}:
				add floor(((getEntityStatTotal(loop-monster,"CHR")) / 4) * ((checkSlots({_TGT},"Under This Banner")) + 1)) to {_leadership}
			else:
				add floor(((getEntityStatTotal(loop-monster,"CHR")) / 2) * ((checkSlots({_TGT},"Under This Banner")) + 1)) to {_leadership}
	#50+ leadership gives diminishing returns
	if {_leadership} is more than 50:
		set {_leadership} to ({_leadership} ^ 0.75)
		if {_leadership} is less than 50:
			set {_leadership} to 50
	return {_leadership}
		
#Calculate if a special skill should activate given a set of parameters
#Returns 1 if the special activates, otherwise returns 0
function specialCheck(ENT: entity, SKL: number, PCT: number, CAP: number) :: number:
	set {_odds} to floor(({_SKL} * {_PCT}))
	if {_odds} is more than {_CAP}:
		set {_odds} to {_CAP}
	if getEntityVarByName({_ENT},"hasAdrenalineBuff") is "true":
		add 10 to {_odds}
	if getEntityVarByName({_ENT},"hasSpecialPulseBuff") is "1":
		add 10 to {_odds}
	if getEntityVarByName({_ENT},"forceSpecialProc") is "true":
		set {_debug} to clearEntityVariableByName({_ENT},"forceSpecialProc")
		return 1
	#Special case for players using a Special Blade item
	else if {forceSpecialProc.%{_ENT}%} is more than 0:
		subtract 1 from {forceSpecialProc.%{_ENT}%}
		if {forceSpecialProc.%{_ENT}%} is less than or equal to 0:
			clear {forceSpecialProc.%{_ENT}%}
		return 1
	if the 6th line of the lore of {_ENT}'s tool contains "Slaying":
		add 10 to {_odds}
	if the 2nd line of the lore of {_ENT}'s tool contains "Wrath":
		if {_ENT}'s health is less than or equal to ({ENT}'s maximum health * 0.75):
			add 10 to {_odds}
	#Rex Hasta Unique Refine Wrath Effect
	if nbt of {_ENT}'s tool contains "sacredTreasureID:18":
		if the 6th line of the lore of {_ENT}'s tool contains "Unique":
			if {_ENT}'s health is less than or equal to ({ENT}'s maximum health * 0.75):
				add 10 to {_odds}
	if {dSoulActive.%{_ENT}%} is set:
		set {_DraconicAura} to checkSlots({_ENT},"Draconic Aura")
		if {_DraconicAura} is 1:
			add 10 to {_odds}
	add getEntityStatBuff({_ENT},"SpecialAcceleration") to {_odds}
	add getAllyLeadership({_ENT}) to {_odds}
	if {verboseCombatLogging.%{_ENT}%} is true:
		send formatted "Base Chance [%{_ENT}%]: <gold>%floor(({_SKL} * {_PCT}))%" to {_ENT}
		send formatted "Special Acceleration [%{_ENT}%]: <gold>%getEntityStatBuff({_ENT},"SpecialAcceleration")%" to {_ENT}
		send formatted "Leadership Bonus [%{_ENT}%]: <gold>%getAllyLeadership({_ENT})%" to {_ENT}
		send formatted "Final Special Chance [%{_ENT}%]: <gold>%{_odds}%" to {_ENT}
	chance of {_odds}%:
		set {_debug} to changeEntityStatBuff({_ENT},"SpecialAcceleration",((getEntityArrayValueByName({_ENT},"activeBuffs.specialacceleration","Crushing (Refine)")) parsed as number) * -1,"Crushing (Refine)",0)
		return 1
	else if {_odds} is more than 100:
		send "<gold>Special overcharged! Activation guaranteed!" to {_ENT}
		set {_debug} to changeEntityStatBuff({_ENT},"SpecialAcceleration",((getEntityArrayValueByName({_ENT},"activeBuffs.specialacceleration","Crushing (Refine)")) parsed as number) * -1,"Crushing (Refine)",0)
		return 1
	else:
		return 0
		
#Calculate if a defensive special skill should activate given a set of parameters
#Returns 1 if the special activates, otherwise returns 0
function defensiveSpecialCheck(ENT: entity, SKL: number, PCT: number, CAP: number) :: number:
	set {_odds} to floor(({_SKL} * {_PCT}))
	if {_odds} is more than {_CAP}:
		set {_odds} to {_CAP}
	if getEntityVarByName({_ENT},"hasAdrenalineBuff") is "true":
		add 10 to {_odds}
	if getEntityVarByName({_ENT},"hasSpecialPulseBuff") is "1":
		add 10 to {_odds}
	if getEntityVarByName({_ENT},"forceSpecialProc") is "true":
		set {_debug} to clearEntityVariableByName({_ENT},"forceSpecialProc")
		return 1
	#Special case for players using a Special Blade item
	else if {forceSpecialProc.%{_ENT}%} is more than 0:
		subtract 1 from {forceSpecialProc.%{_ENT}%}
		if {forceSpecialProc.%{_ENT}%} is less than or equal to 0:
			clear {forceSpecialProc.%{_ENT}%}
		return 1
	if the 6th line of the lore of {_ENT}'s tool contains "Slaying":
		add 10 to {_odds}
	if the 2nd line of the lore of {_ENT}'s tool contains "Shield Pulse":
		add 20 to {_odds}
	if checkSlots({_ENT},"Shield Pulse") is 1:
		add 20 to {_odds}
	if {dSoulActive.%{_ENT}%} is set:
		set {_DraconicAura} to checkSlots({_ENT},"Draconic Aura")
		if {_DraconicAura} is 1:
			add 10 to {_odds}
	add getEntityStatBuff({_ENT},"SpecialAcceleration") to {_odds}
	if {verboseCombatLogging.%{_ENT}%} is true:
		send formatted "Base Chance [%{_ENT}%]: <gold>%floor(({_SKL} * {_PCT}))%" to {_ENT}
		send formatted "Special Acceleration [%{_ENT}%]: <gold>%getEntityStatBuff({_ENT},"SpecialAcceleration")%" to {_ENT}
		send formatted "Leadership Bonus [%{_ENT}%]: <gold>%getAllyLeadership({_ENT})%" to {_ENT}
		send formatted "Final Special Chance [%{_ENT}%]: <gold>%{_odds}%" to {_ENT}
	chance of {_odds}%:
		set {_debug} to changeEntityStatBuff({_ENT},"SpecialAcceleration",((getEntityArrayValueByName({_ENT},"activeBuffs.specialacceleration","Crushing (Refine)")) parsed as number) * -1,"Crushing (Refine)",0)
		return 1
	else if {_odds} is more than 100:
		set {_debug} to changeEntityStatBuff({_ENT},"SpecialAcceleration",((getEntityArrayValueByName({_ENT},"activeBuffs.specialacceleration","Crushing (Refine)")) parsed as number) * -1,"Crushing (Refine)",0)
		return 1
	else:
		return 0
		
#Returns an entity's held weapon type, useful for things like Ability checks
#0 = Traditional
#1 = Magical
#2 = Guns
#-1 = Error
function getEntityWeaponType(ENT: entity) :: number:
	if {_ENT}'s tool is any sword:
		return 0
	else if {_ENT}'s tool is any axe:
		return 0
	else if nbt of {_ENT}'s tool contains "GauntletType:":
		return 0
	else if {_ENT}'s tool is any hoe:
		return 1
	else if {_ENT}'s tool is blaze rod:
		return 1
	else if {_ENT}'s tool is a bow:
		return 0
	else if {_ENT}'s tool is book:
		if the nbt of {_ENT}'s tool contains "TomeType:":
			return 1
	else if nbt of {_ENT}'s tool contains "LanceType:":
		return 0
	else if nbt of {_ENT}'s tool contains "DaggerType:":
		return 0
	else if nbt of {_ENT}'s tool contains "FirearmType:":
		return 2
	else if nbt of {_ENT}'s tool contains "GrenadeType:":
		return 2
		
#Helper function for getEntityWeaponRank
#0 = sword, 1 = axe, 2 = lance, 3 = gauntlet, 4 = dagger, 5 = bow
#6 = wand, 7 = tome, 8 = staff
#9 = pistol, 10 = rifle, 11 = shotgun
function getEntityWeaponClass(WPN: item) :: text:
	if {_WPN} is any sword:
		return "Swords"
	else if {_WPN} is any axe:
		return "Axes"
	else if nbt of {_WPN} contains "GauntletType:":
		return "Gauntlets"
	else if {_WPN} is any hoe:
		return "Staves"
	else if {_WPN} is blaze rod:
		return "Wands"
	else if {_WPN} is a bow:
		return "Bows"
	else if {_WPN} is book:
		if the nbt of {_WPN} contains "TomeType:":
			return "Tomes"
		else:
			return "None"
	else if nbt of {_WPN} contains "LanceType:":
		return "Lances"
	else if nbt of {_WPN} contains "DaggerType:":
		return "Daggers"
	else if nbt of {_WPN} contains "FirearmType:":
		#Pistols
		if nbt of {_WPN} contains "FirearmType:0":
			return "Pistols"
		else if nbt of {_WPN} contains "FirearmType:2":
			return "Pistols"
		else if nbt of {_WPN} contains "FirearmType:4":
			return "Pistols"
		else if nbt of {_WPN} contains "FirearmType:15":
			return "Pistols"
		else if nbt of {_WPN} contains "FirearmType:16":
			return "Pistols"
		#Rifles
		else if nbt of {_WPN} contains "FirearmType:1":
			return "Rifles"
		else if nbt of {_WPN} contains "FirearmType:3":
			return "Rifles"
		else if nbt of {_WPN} contains "FirearmType:7":
			return "Rifles"
		else if nbt of {_WPN} contains "FirearmType:8":
			return "Rifles"
		else if nbt of {_WPN} contains "FirearmType:9":
			return "Rifles"
		else if nbt of {_WPN} contains "FirearmType:10":
			return "Rifles"
		else if nbt of {_WPN} contains "FirearmType:12":
			return "Rifles"
		else if nbt of {_WPN} contains "FirearmType:13":
			return "Rifles"
		else if nbt of {_WPN} contains "FirearmType:14":
			return "Rifles"
		#Shotguns are everything else
		else:
			return "Shotguns"
	else:
		return "None"
		
#Returns an entity's weapon rank for their held item
function getEntityWeaponRank(ENT: entity) :: text:
	set {_weaponType} to getEntityWeaponClass({_ENT}'s tool)
	set {_CID} to citizen id of {_ENT}
	if {t_str.%{_ENT}%} is set:
		set {_entityType} to "t_"
	#Is Player
	else if {_CID} is not set:
		set {_entityType} to ""
	#Is NPC
	else if {_CID} is set:
		set {_entityType} to "NPC_"
	return {%{_entityType}%weaponranks.%{_ENT}%::%{_weaponType}%}
	
#Returns a numerical value for an entity's weapon rank
function getEntityNumericalWeaponRank(ENT: entity) :: number:
	set {_WR} to getEntityWeaponRank({_ENT})
	if {_WR} is "E":
		return 0
	else if {_WR} is "D":
		return 1
	else if {_WR} is "C":
		return 2
	else if {_WR} is "B":
		return 3
	else if {_WR} is "A":
		return 4
	else if {_WR} is "S":
		return 5
	else if {_WR} is "<gold>SS":
		return 6
		
#Override for weapon rank helper function to take an item as an argument
#(overloaded functions when)
function getEntityWRFromItem(ENT: entity,WPN: item) :: number:
	set {_WR} to getEntityWeaponClass({_WPN})
	set {_WR} to {weaponranks.%{_ENT}%::%{_WR}%}
	if {_WR} is "E":
		return 0
	else if {_WR} is "D":
		return 1
	else if {_WR} is "C":
		return 2
	else if {_WR} is "B":
		return 3
	else if {_WR} is "A":
		return 4
	else if {_WR} is "S":
		return 5
	else if {_WR} is "<gold>SS":
		return 6
		
#Updates the entity's weapon ranks
function changeEntityWeaponRank(ENT: entity,CHNG: number):
	set {_weaponType} to getEntityWeaponClass({_ENT}'s tool)
	set {_CID} to citizen id of {_ENT}
	if {t_str.%{_ENT}%} is set:
		set {_entityType} to "t_"
	#Is Player
	else if {_CID} is not set:
		set {_entityType} to ""
	#Is NPC
	else if {_CID} is set:
		set {_entityType} to "NPC_"
	add {_CHNG} to {%{_entityType}%weapondamagetotals.%{_ENT}%::%{_weaponType}%}
	set {_weaponRank} to getEntityNumericalWeaponRank({_ENT})
	if {_weaponRank} is less than 6:
		if {%{_entityType}%weapondamagetotals.%{_ENT}%::%{_weaponType}%} is more than (floor((({_weaponRank} + 1) * 4) ^ 2)):
			if {_entityType} is "":
				if {_weaponRank} is 0:
					set {weaponranks.%{_ENT}%::%{_weaponType}%} to "D"
				else if {_weaponRank} is 1:
					set {weaponranks.%{_ENT}%::%{_weaponType}%} to "C"
				else if {_weaponRank} is 2:
					set {weaponranks.%{_ENT}%::%{_weaponType}%} to "B"
				else if {_weaponRank} is 3:
					set {weaponranks.%{_ENT}%::%{_weaponType}%} to "A"
				else if {_weaponRank} is 4:
					set {weaponranks.%{_ENT}%::%{_weaponType}%} to "S"
				else:
					set {weaponranks.%{_ENT}%::%{_weaponType}%} to "<gold>SS"
				play sound "entity.player.levelup" with volume 0.5 and pitch 0.5 at {_ENT} for {_ENT}
				play 20 (smoke with speed 0) at {_ENT}
				send title "<gold><bold>---===Weapon Rank Up!===---" with subtitle "<bold>%{_weaponType}% increased to %{weaponranks.%{_ENT}%::%{_weaponType}%}% rank." to {_ENT} for 2 seconds with fade in 0.25 seconds and fade out 0.25 seconds

#Calculates the Ability requirement to wield a specific weapon
#Returns the value as a number
function getEntityWeaponAbilityRequirement(WPN: item, ENT: entity) :: number:
	#Retrives all weapon skills from the entity's held item and adds them to the Ability requirement total
	set {_linecount} to 0
	loop 6 times:
		add 1 to {_linecount}
		set {_wpnskill::*} to line {_linecount} of the lore of {_WPN} split at " - "
		set {_wpnskill::2} to decolorize({_wpnskill::2})
		add {wpndata_abilityrequirements::%{_wpnskill::2}%} to {_weaponAbilityTotal}
		clear {_wpnskill::*}
	if nbt of {_WPN} contains "sacredTreasureID:":
		set {_treasureID} to "%tag "sacredTreasureID" of {_WPN}'s nbt%" parsed as integer
		add {wpndata_abilityrequirements::hw_%{_treasureID}%} to {_weaponAbilityTotal}
	#Reduce weapon ability based on the entity's weapon rank
	set {_WR} to getEntityWRFromItem({_ENT},{_WPN})
	subtract ({_WR} * 3) from {_weaponAbilityTotal}
	if {_weaponAbilityTotal} is less than 0:
		set {_weaponAbilityTotal} to 0
	return {_weaponAbilityTotal}
	
#Calculates the damage reduction an entity's armor is providing.
#Returns the value as a float (reported as damage reduction / 100, so full leather would return 0.24)
function getEntityArmorDamageReduction(ENT: entity) :: number:
	set {_damageReduction} to getHelmetDamageResistance({_ENT})
	add (getChestplateDamageResistance({_ENT})) to {_damageReduction}
	add (getLeggingsDamageResistance({_ENT})) to {_damageReduction}
	add (getBootsDamageResistance({_ENT})) to {_damageReduction}
	return (({_damageReduction} / 100))
	
#Small override for "empty hand" checks
function isEntityToolAir(ENT: entity) :: boolean:
	if {_ENT}'s tool is air:
		return true
	else if the 4th line of the lore of {_ENT}'s tool contains "Fist Override":
		return true
	else if checkSlots({_ENT},"Extra Attachments") is 1:
		if getEntityFirearmClass({_ENT}) is 1:
			return true
	else:
		return false
		
#Returns type of firearm the entity is using
#0 = pistol
#1 = rifle
#2 = shotgun
#3 = sniper
#4 = other
function getEntityFirearmClass(ENT: entity) :: number:
	if the name of {_ENT}'s tool contains "Pistol":
		return 0
	else if the name of {_ENT}'s tool contains "Musket":
		return 1
	else if the name of {_ENT}'s tool contains "Redstone Repeater":
		return 1
	else if the name of {_ENT}'s tool contains "Redgrave E-45":
		return 0
	else if the name of {_ENT}'s tool contains "Redgrave Ifrit":
		return 0
	else if the name of {_ENT}'s tool contains "Big Iron":
		return 0
	else if the name of {_ENT}'s tool contains "Redgrave Coyote":
		return 2
	else if the name of {_ENT}'s tool contains "Redgrave Kalina":
		return 3
	else if the name of {_ENT}'s tool contains "Vettik S-25":
		return 2
	else if the name of {_ENT}'s tool contains "Vettik A-10":
		return 3
	else if the name of {_ENT}'s tool contains "Vettik B-30AS":
		return 1
	else if the name of {_ENT}'s tool contains "Teufort Two-Timer":
		return 2
	else if the name of {_ENT}'s tool contains "Home-Made Heater":
		return 3
	else if the name of {_ENT}'s tool contains "Hell's Spiral":
		return 3
	else if the name of {_ENT}'s tool contains "Minigun":
		return 1
	else if the name of {_ENT}'s tool contains "Launcher":
		return 4
		
#Returns true if target entity has a visible buff that is not provided by a trait or other character data
function entityHasVisibleBuff(ENT: entity) :: boolean:
	#Find citizen id of entity for compare checks
	set {_CID} to citizen id of {_ENT}
	#Is Monster
	if {_ENT} is monster:
		clear {_CID}
		loop {t_activeBuffs.str.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {t_activeBuffs.spd.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {t_activeBuffs.lck.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {t_activeBuffs.mag.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {t_activeBuffs.chr.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {t_activeBuffs.def.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {t_activeBuffs.res.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {t_tempactiveBuffs.str.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {t_tempactiveBuffs.spd.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {t_atempctiveBuffs.lck.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {t_tempactiveBuffs.mag.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {t_tempactiveBuffs.chr.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {t_tempactiveBuffs.def.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {t_tempactiveBuffs.res.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
	#Is Player
	else if {_CID} is not set:
		clear {_CID}
		loop {activeBuffs.str.%{_ENT}%::*}:
			#send "%loop-index%" to {_ENT}
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {activeBuffs.spd.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {activeBuffs.lck.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {activeBuffs.mag.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {activeBuffs.chr.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {activeBuffs.def.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {activeBuffs.res.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {tempactiveBuffs.str.%{_ENT}%::*}:
			#send "%loop-index%" to {_ENT}
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {tempactiveBuffs.spd.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {tempactiveBuffs.lck.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {tempactiveBuffs.mag.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {tempactiveBuffs.chr.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {tempactiveBuffs.def.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {tempactiveBuffs.res.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
	#Is NPC
	else if {_CID} is set:
		loop {npc_activeBuffs.str.%{_CID}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {npc_activeBuffs.spd.%{_CID}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {npc_activeBuffs.lck.%{_CID}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {npc_activeBuffs.mag.%{_CID}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {npc_activeBuffs.chr.%{_CID}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {npc_activeBuffs.def.%{_CID}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {npc_activeBuffs.res.%{_CID}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {npc_tempactiveBuffs.str.%{_CID}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {npc_tempactiveBuffs.spd.%{_CID}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {npc_tempactiveBuffs.lck.%{_CID}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {npc_tempactiveBuffs.mag.%{_CID}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {npc_tempactiveBuffs.chr.%{_CID}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {npc_tempactiveBuffs.def.%{_CID}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		loop {npc_tempactiveBuffs.res.%{_CID}%::*}:
			if loop-index does not contain "Trait":
				if loop-index does not contain "Perk":
					if loop-value is more than 0:
						return true
		clear {_CID}
	else:
		clear {_CID}
		return false
	
#Returns the total of non-trait and, optionally, non-perk visible buffs active on the character
#set TYPE to 1 to ignore Perk bonuses as well.
function getEntityOOCStatBuff(ENT: entity,STAT: text,TYPE: number) :: number:
	#Find citizen id of entity for compare checks
	set {_CID} to citizen id of {_ENT}
	#Is Monster
	if {_ENT} is monster:
		clear {_CID}
		loop {t_activeBuffs.str.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if {_TYPE} is 1:
					if loop-index does not contain "Perk":
						if loop-value is more than 0:
							add loop-value to {_statTotal}
				else if loop-value is more than 0:
					add loop-value to {_statTotal}
		return {_statTotal}
	#Is Player
	else if {_CID} is not set:
		clear {_CID}
		loop {activeBuffs.%{_STAT}%.%{_ENT}%::*}:
			if loop-index does not contain "Trait":
				if {_TYPE} is 1:
					if loop-index does not contain "Perk":
						if loop-value is more than 0:
							add loop-value to {_statTotal}
				else if loop-value is more than 0:
					add loop-value to {_statTotal}
		return {_statTotal}
	#Is NPC
	else if {_CID} is set:
		loop {npc_activeBuffs.%{_STAT}%.%{_CID}%::*}:
			if loop-index does not contain "Trait":
				if {_TYPE} is 1:
					if loop-index does not contain "Perk":
						if loop-value is more than 0:
							add loop-value to {_statTotal}
				else if loop-value is more than 0:
					add loop-value to {_statTotal}
		clear {_CID}
		return {_statTotal}
	else:
		clear {_CID}
		return -1	
	
#Override for recoil damage, using this BYPASSES ANY AND ALL DAMAGE REDUCTION, HANDLE WITH CARE.
#Note: 0.5 hearts is subtracted from the actual recoil to give the player the proper damage effects (sound effect, aimpunch, etc)
function applyRecoilDamage(ENT: entity,DMG: number):
	set {_ENT}'s health to ({_ENT}'s health - ({_DMG} - 0.5))
	damage {_ENT} by 0.5 with fake cause void
	
#Backs up the player's current hotbar to the specified variable
#Set 3rd argument to 1 to clear the player's hotbar after saving
function savePlayerHotbar(PLR: player,VAR: text,CLR: number):
	set {_hotbarSlot} to 0
	loop 8 times:
		set {%{_VAR}%.%{_PLR}%::%{_hotbarSlot}%} to slot {_hotbarSlot} of {_PLR}
		send "%{_VAR}%.%{_PLR}%::%{_hotbarSlot}%" to {_PLR}
		if {_CLR} is 1:
			set slot {_hotbarSlot} of {_PLR} to air
		add 1 to {_hotbarSlot}
		
#Restores a saved hotbar from the specified variable
function loadPlayerHotbar(PLR: player,VAR: text):
	set {_hotbarSlot} to 0
	loop 8 times:
		set slot {_hotbarSlot} of {_PLR} to {%{_VAR}%.%{_PLR}%::%{_hotbarSlot}%}
		add 1 to {_hotbarSlot}	

#Gets the ID of the sacred treasure the entity is wielding (if any)
function getEntitySacredTreasure(ENT: entity) :: number:
	set {_STID} to tag "sacredTreasureID" of {_ENT}'s tool's nbt
	#send "%{_STID}%" to {_ENT}
	return {_STID}

#Define new crafting recipes:
on load:
	#Netherite weaps
	register new shaped recipe for netherite sword using air, netherite ingot, air, air, netherite ingot, air, air, stick, air with id "netherite_sword" in group "swords"
	register new shaped recipe for netherite axe using netherite ingot, netherite ingot, air, netherite ingot, stick, air, air, stick, air with id "netherite_axe" in group "axes"
	register new shaped recipe for netherite axe using air, netherite ingot, netherite ingot, air, stick, netherite ingot, air, stick, air with id "netherite_axe_mirror" in group "axes"
	#Lances
	register new shaped recipe for wood shovel named "<bold>Wooden Lance" with nbt "{LanceType:0}" with lore "<italics>Throw with right-click." using air, any planks, air, any planks, stick, any planks, air, stick, air with id "wooden_lance" in group "lances"
	register new shaped recipe for stone shovel named "<bold>Stone Lance" with nbt "{LanceType:1}" with lore "<italics>Throw with right-click." using air, cobblestone, air, cobblestone, stick, cobblestone, air, stick, air with id "stone_lance" in group "lances"
	register new shaped recipe for iron shovel named "<bold>Iron Lance" with nbt "{LanceType:2}" with lore "<italics>Throw with right-click." using air, iron ingot, air, iron ingot, stick, iron ingot, air, stick, air with id "iron_lance" in group "lances"
	register new shaped recipe for gold shovel named "<bold>Golden Lance" with nbt "{LanceType:3}" with lore "<italics>Throw with right-click." using air, gold ingot, air, gold ingot, stick, gold ingot, air, stick, air with id "golden_lance" in group "lances"
	register new shaped recipe for diamond shovel named "<bold>Diamond Lance" with nbt "{LanceType:4}" with lore "<italics>Throw with right-click." using air, diamond, air, diamond, stick, diamond, air, stick, air with id "diamond_lance" in group "lances"
	register new shaped recipe for netherite shovel named "<bold>Netherite Lance" with nbt "{LanceType:5}" with lore "<italics>Throw with right-click." using air, netherite ingot, air, netherite ingot, stick, netherite ingot, air, stick, air with id "netherite_lance" in group "lances"
	#Gauntlets
	register new shaped recipe for wood hoe named "<bold>Wooden Gauntlets" with nbt "{GauntletType:0}" with lore "<italics>Low might, but attacks twice." using air, air, air, air, any planks, air, any planks, stick, any planks with id "wooden_gauntlets" in group "gauntlets"
	register new shaped recipe for stone hoe named "<bold>Stone Gauntlets" with nbt "{GauntletType:1}" with lore "<italics>Low might, but attacks twice." using air, air, air, air, cobblestone, air, cobblestone, stick, cobblestone with id "stone_gauntlets" in group "gauntlets"
	register new shaped recipe for iron hoe named "<bold>Iron Gauntlets" with nbt "{GauntletType:2}" with lore "<italics>Low might, but attacks twice." using air, air, air, air, iron ingot, air, iron ingot, stick, iron ingot with id "iron_gauntlets" in group "gauntlets"
	register new shaped recipe for golden hoe named "<bold>Golden Gauntlets" with nbt "{GauntletType:3}" with lore "<italics>Low might, but attacks twice." using air, air, air, air, gold ingot, air, gold ingot, stick, gold ingot with id "golden_gauntlets" in group "gauntlets"
	register new shaped recipe for diamond hoe named "<bold>Diamond Gauntlets" with nbt "{GauntletType:4}" with lore "<italics>Low might, but attacks twice." using air, air, air, air, diamond, air, diamond, stick, diamond with id "diamond_gauntlets" in group "gauntlets"
	register new shaped recipe for netherite hoe named "<bold>Netherite Gauntlets" with nbt "{GauntletType:5}" with lore "<italics>Low might, but attacks twice." using air, air, air, air, netherite ingot, air, netherite ingot, stick, netherite ingot with id "netherite_gauntlets" in group "gauntlets"
	#Daggers
	register new shaped recipe for 32 arrow named "<bold>Wooden Dagger" with nbt "{DaggerType:0}" with lore "<italics>A stack of daggers. Throw with right-click." using air, air, air, air, any planks, air, air, stick, air with id "wooden_daggers" in group "daggers"
	register new shaped recipe for 32 arrow named "<bold>Stone Dagger" with nbt "{DaggerType:1}" with lore "<italics>A stack of daggers. Throw with right-click." using air, air, air, air, cobblestone, air, air, stick, air with id "stone_daggers" in group "daggers"
	register new shaped recipe for 32 arrow named "<bold>Iron Dagger" with nbt "{DaggerType:2}" with lore "<italics>A stack of daggers. Throw with right-click." using air, air, air, air, iron ingot, air, air, stick, air with id "iron_daggers" in group "daggers"
	register new shaped recipe for 32 arrow named "<bold>Golden Dagger" with nbt "{DaggerType:3}" with lore "<italics>A stack of daggers. Throw with right-click." using air, air, air, air, gold ingot, air, air, stick, air with id "golden_daggers" in group "daggers"
	register new shaped recipe for 32 arrow named "<bold>Diamond Dagger" with nbt "{DaggerType:4}" with lore "<italics>A stack of daggers. Throw with right-click." using air, air, air, air, diamond, air, air, stick, air with id "diamond_daggers" in group "daggers"
	register new shaped recipe for 32 arrow named "<bold>Netherite Dagger" with nbt "{DaggerType:5}" with lore "<italics>A stack of daggers. Throw with right-click." using air, air, air, air, netherite ingot, air, air, stick, air with id "netherite_daggers" in group "daggers"
	#Firearms
	register new shaped recipe for iron horse armor named "<light gray>Flintlock Pistol" with nbt "{FirearmType:0}" with lore "<white>Slot A - Empty", "<white>Slot B - Empty", "<white>Slot C - Empty", "<white>Assist - Empty", "<white>Special - Empty", "<white>Refine - N/A", "<white><bold>Clip (MAX: 1):", "1", "<white><italics>Slow, but works in a pinch." using air, air, cobblestone, cobblestone, cobblestone, stick, air, stick, stick with id "flintlock_pistol" in group "pistols"
	register new shaped recipe for iron horse armor named "<light gray>Iron Musket" with nbt "{FirearmType:1}" with lore "<white>Slot A - Empty", "<white>Slot B - Empty", "<white>Slot C - Empty", "<white>Assist - Empty", "<white>Special - Empty", "<white>Refine - N/A", "<white><bold>Clip (MAX: 1):", "1", "<white><italics>Primitive, but effective... if it hits." using air, air, cobblestone, iron ingot, iron ingot, stick, air, stick, stick with id "iron_musket" in group "rifles"
	register new shaped recipe for iron horse armor named "<light gray>Iron Pistol" with nbt "{FirearmType:2}" with lore "<white>Slot A - Empty", "<white>Slot B - Empty", "<white>Slot C - Empty", "<white>Assist - Empty", "<white>Special - Empty", "<white>Refine - N/A", "<white><bold>Clip (MAX: 8):", "8", "<white><italics>The perfect sidearm to turn the tides." using air, air, iron ingot, iron ingot, iron ingot, stick, air, stick, stick with id "iron_pistol" in group "pistols"
	register new shaped recipe for iron horse armor named "<light gray>Redstone Repeater" with nbt "{FirearmType:3}" with lore "<white>Slot A - Empty", "<white>Slot B - Empty", "<white>Slot C - Empty", "<white>Assist - Empty", "<white>Special - Empty", "<white>Refine - N/A", "<white><bold>Clip (MAX: 30):", "30", "<white><italics>A middlingly accurate fully-automatic." using air, air, iron ingot, iron ingot, iron ingot, redstone block, air, stick, redstone block with id "redstone_repeater" in group "rifles"
	register new shaped recipe for iron horse armor named "<light gray>Redgrave E-45 Express" with nbt "{FirearmType:4}" with lore "<white>Slot A - Empty", "<white>Slot B - Empty", "<white>Slot C - Empty", "<white>Assist - Empty", "<white>Special - Empty", "<white>Refine - N/A", "<white><bold>Clip (MAX: 18):", "18", "<white><italics>Rapid-fire handgun with a large clip." using air, air, quartz block, quartz block, quartz block, leather, air, stick, leather with id "redgrave_e45s" in group "pistols"
	register new shaped recipe for golden horse armor named "<light gray>Redgrave Coyote-Alpha" with nbt "{FirearmType:5}" with lore "<white>Slot A - Empty", "<white>Slot B - Empty", "<white>Slot C - Empty", "<white>Assist - Empty", "<white>Special - Empty", "<white>Refine - N/A", "<white><bold>Clip (MAX: 5):", "5", "<white><italics>High-damage pump-action, but with large spread." using air, air, quartz block, gold ingot, gold ingot, iron ingot, air, stick, iron ingot with id "redgrave_coyote" in group "shotguns"
	register new shaped recipe for golden horse armor named "<light gray>Teufort Two-Timer" with nbt "{FirearmType:6}" with lore "<white>Slot A - Empty", "<white>Slot B - Empty", "<white>Slot C - Empty", "<white>Assist - Empty", "<white>Special - Empty", "<white>Refine - N/A", "<white><bold>Clip (MAX: 2):", "2", "<white><italics>Fires with enough force to push things around." using air, air, iron ingot, cobblestone, cobblestone, iron ingot, air, stick, iron ingot with id "teufort_twotimer" in group "shotguns"
	register new shaped recipe for diamond horse armor named "<light gray>Rocket Launcher" with nbt "{FirearmType:7}" with lore "<white>Slot A - Empty", "<white>Slot B - Empty", "<white>Slot C - Empty", "<white>Assist - Empty", "<white>Special - Empty", "<white>Refine - N/A", "<white><bold>Clip (MAX: 4):", "4", "<white><italics>Fires explosive rounds that launch foes." using iron ingot, air, obsidian, obsidian, obsidian, obsidian, stick, stick, obsidian with id "rocket_launcher" in group "special_guns"
	register new shaped recipe for golden horse armor named "<light gray>Home-Made Heater" with nbt "{FirearmType:8}" with lore "<white>Slot A - Empty", "<white>Slot B - Empty", "<white>Slot C - Empty", "<white>Assist - Empty", "<white>Special - Empty", "<white>Refine - N/A", "<white><bold>Clip (MAX: 5):", "5", "<white><italics>Fires high-accuracy armour piercing shots." using air, air, iron ingot, gold ingot, gold ingot, gold ingot, air, air, stick with id "home_heater" in group "rifles"
	register new shaped recipe for golden horse armor named "<light gray>Minigun" with nbt "{FirearmType:9}" with lore "<white>Slot A - Empty", "<white>Slot B - Empty", "<white>Slot C - Empty", "<white>Assist - N/A", "<white>Special - Empty", "<white>Refine - Empty", "<white><bold>Clip (MAX: 200):", "200", "<white><italics>For when you need a little more gun.", "<white><italics>Fires very quickly, but drains ammo just as fast." using air, air, obsidian, obsidian, obsidian, iron block, air, iron block, iron block with id "heavytf2_minigun" in group "special_guns"
	register new shaped recipe for diamond horse armor named "<light gray>Grenade Launcher" with nbt "{FirearmType:10}" with lore "<white>Slot A - Empty", "<white>Slot B - Empty", "<white>Slot C - Empty", "<white>Assist - Empty", "<white>Special - Empty", "<white>Refine - N/A", "<white><bold>Clip (MAX: 4):", "4", "<white><italics>Launches arcing explosives for massive direct damage." using iron ingot, obsidian, obsidian, obsidian, obsidian, cobblestone, air, stick, cobblestone with id "grenade_launcher" in group "special_guns"
	register new shaped recipe for golden horse armor named "<light gray>Vettik S-25" with nbt "{FirearmType:11}" with lore "<white>Slot A - Empty", "<white>Slot B - Empty", "<white>Slot C - Empty", "<white>Assist - Empty", "<white>Special - Empty", "<white>Refine - N/A", "<white><bold>Clip (MAX: 25):", "25", "<white><italics>Load for a month, and fire for three." using air, air, iron ingot, iron block, iron block, gold block, stick, quartz block, stick with id "vettik_s25" in group "shotguns"
	register new shaped recipe for golden horse armor named "<light gray>Vettik B-30AS" with nbt "{FirearmType:12}" with lore "<white>Slot A - Empty", "<white>Slot B - Empty", "<white>Slot C - Empty", "<white>Assist - Empty", "<white>Special - Empty", "<white>Refine - N/A", "<white><bold>Clip (MAX: 30):", "30", "<white><italics>Feather the trigger to burst fire." using iron ingot, air, iron ingot, obsidian, obsidian, redstone block, air, stick, iron block with id "vettik_b30as" in group "rifles"
	register new shaped recipe for golden horse armor named "<light gray>Vettik A-10 Enforcer" with nbt "{FirearmType:13}" with lore "<white>Slot A - Empty", "<white>Slot B - Empty", "<white>Slot C - Empty", "<white>Assist - Empty", "<white>Special - Empty", "<white>Refine - N/A", "<white><bold>Clip (MAX: 10):", "10", "<white><italics>Long-range accuracy bundled with full-auto fire." using gold ingot, air, air, obsidian, obsidian, obsidian, iron block, air, iron ingot with id "vettik_a10" in group "rifles"
	register new shaped recipe for golden horse armor named "<light gray>Redgrave Kalina" with nbt "{FirearmType:14}" with lore "<white>Slot A - Empty", "<white>Slot B - Empty", "<white>Slot C - Empty", "<white>Assist - Empty", "<white>Special - Empty", "<white>Refine - N/A", "<white><bold>Clip (MAX: 10):", "10", "<white><italics>Paint the town red in one shot." using quartz block, air, air, obsidian, obsidian, lapis block, air, stick, iron block with id "redgrave_kalina" in group "shotguns"
	register new shaped recipe for diamond horse armor named "<light gray>Redgrave Ifrit" with nbt "{FirearmType:15}" with lore "<white>Slot A - Empty", "<white>Slot B - Empty", "<white>Slot C - Empty", "<white>Assist - Empty", "<white>Special - Empty", "<white>Refine - N/A", "<white><bold>Clip (MAX: 7):", "7", "<white><italics>For when things get personal." using air, air, air, obsidian, gold block, gold block, air, stick, leather with id "redgrave_ifrit" in group "pistols"
	register new shaped recipe for iron horse armor named "<light gray>Big Iron" with nbt "{FirearmType:16}" with lore "<white>Slot A - Empty", "<white>Slot B - Empty", "<white>Slot C - Empty", "<white>Assist - Empty", "<white>Special - Empty", "<white>Refine - N/A", "<white><bold>Clip (MAX: 6):", "6", "<white><italics>Nobody'll dare to make a slip." using stick, air, air, iron ingot, iron ingot, iron block, air, stick, leather with id "truthis_gamewasrigged" in group "pistols"
	#Grenades
	register new shaped recipe for splash potion of harming named "<light gray>Fragmentation Grenade" with nbt "{GrenadeType:0}" with lore "<italics>Standard explosive ordinance.", "<italics>Right-click to throw. Detonates on impact with any surface." using redstone dust, stone pressure plate, redstone dust, iron ingot, gunpowder, iron ingot, air, iron ingot, air with id "grenade_frag" in group "grenades"
	register new shaped recipe for splash potion of harming named "<light gray>Concussion Grenade" with nbt "{GrenadeType:1}" with lore "<italics>Special grenade that stuns foes.", "<italics>Right-click to throw. Detonates on impact with any surface." using redstone dust, stone pressure plate, redstone dust, gold ingot, glowstone dust, gold ingot, air, gold ingot, air with id "grenade_stun" in group "grenades"
	register new shaped recipe for splash potion of harming named "<light gray>Smoke Grenade" with nbt "{GrenadeType:2}" with lore "<italics>Creates a lasting cloud of smoke, disorienting foes.", "<italics>Right-click to throw. Detonates on impact with any surface." using redstone dust, stone pressure plate, redstone dust, iron ingot, flint, iron ingot, air, iron ingot, air with id "grenade_smoke" in group "grenades"
	#Tomes
	#Beginner
	register new shapeless recipe for book named "<light yellow>Ember" with nbt "{TomeType:1}" with lore "<white>A beginner's tome containing the Ember spell.", "", "", "", "", "", "", "", "", "Uses Left:", "150" using air, air, air, air, air, air, air, book, stick with id "tome_ember" in group "magic"
	register new shapeless recipe for book named "<light yellow>Sparks" with nbt "{TomeType:2}" with lore "<white>A beginner's tome containing the Spark spell.", "", "", "", "", "", "", "", "", "Uses Left:", "150" using air, air, air, air, air, air, air, book, sugar with id "tome_sparks" in group "magic"
	register new shapeless recipe for book named "<light yellow>Frost" with nbt "{TomeType:3}" with lore "<white>A beginner's tome containing the Frost spell.", "", "", "", "", "", "", "", "", "Uses Left:", "150" using air, air, air, air, air, air, air, book, snowball with id "tome_frost" in group "magic"
	register new shapeless recipe for book named "<light yellow>Gust" with nbt "{TomeType:4}" with lore "<white>A beginner's tome containing the Gust spell.", "", "", "", "", "", "", "", "", "Uses Left:", "150" using air, air, air, air, air, air, air, book, feather with id "tome_gust" in group "magic"
	#Intermediate
	register new shapeless recipe for book named "<light yellow>Fire" with nbt "{TomeType:5}" with lore "<white>An intermediate's tome containing the Fire spell.", "", "", "", "", "", "", "", "", "Uses Left:", "130" using air, air, air, air, air, air, redstone dust, book, stick with id "tome_fire" in group "magic"
	register new shapeless recipe for book named "<light yellow>Thunder" with nbt "{TomeType:6}" with lore "<white>An intermediate's tome containing the Thunder spell.", "", "", "", "", "", "", "Uses Left:", "130" using air, air, air, air, air, air, redstone dust, book, sugar with id "tome_thunder" in group "magic"
	register new shapeless recipe for book named "<light yellow>Hail" with nbt "{TomeType:7}" with lore "<white>An intermediate's tome containing the Hail spell.", "", "", "", "", "", "", "", "", "Uses Left:", "130" using air, air, air, air, air, air, redstone dust, book, snowball with id "tome_hail" in group "magic"
	register new shapeless recipe for book named "<light yellow>Wind" with nbt "{TomeType:8}" with lore "<white>An intermediate's tome containing the Wind spell.", "", "", "", "", "", "", "", "", "Uses Left:", "130" using air, air, air, air, air, air, redstone dust, book, feather with id "tome_wind" in group "magic"
	#Advanced
	register new shapeless recipe for book named "<light yellow>Elfire" with nbt "{TomeType:9}" with lore "<white>An advanced tome containing the Elfire spell.", "", "", "", "", "", "", "", "", "Uses Left:", "100" using air, air, air, air, air, lapis block, redstone dust, book, stick with id "tome_elfire" in group "magic"
	register new shapeless recipe for book named "<light yellow>Thoron" with nbt "{TomeType:10}" with lore "<white>An advanced tome containing the Thoron spell.", "", "", "", "", "", "", "", "", "Uses Left:", "100" using air, air, air, air, air, lapis block, redstone dust, book, sugar with id "tome_thoron" in group "magic"
	register new shapeless recipe for book named "<light yellow>Blizzard" with nbt "{TomeType:11}" with lore "<white>An advanced tome containing the Blizzard spell.", "", "", "", "", "", "", "", "", "Uses Left:", "100" using air, air, air, air, air, lapis block, redstone dust, book, snowball with id "tome_blizzard" in group "magic"
	register new shapeless recipe for book named "<light yellow>Tornado" with nbt "{TomeType:12}" with lore "<white>An advanced tome containing the Tornado spell.", "", "", "", "", "", "", "", "", "Uses Left:", "100" using air, air, air, air, air, lapis block, redstone dust, book, feather with id "tome_tornado" in group "magic"
	#Master
	register new shapeless recipe for book named "<light yellow>Bolganone" with nbt "{TomeType:13}" with lore "<white>A master's tome containing the Bolganone spell.", "", "", "", "", "", "", "", "", "Uses Left:", "60" using air, air, air, air, diamond, lapis block, redstone dust, book, stick with id "tome_bolganone" in group "magic"
	register new shapeless recipe for book named "<light yellow>Aurora" with nbt "{TomeType:14}" with lore "<white>A master's tome containing the Aurora spell.", "", "", "", "", "", "", "", "", "Uses Left:", "60" using air, air, air, air, diamond, lapis block, redstone dust, book, sugar with id "tome_aurora" in group "magic"
	register new shapeless recipe for book named "<light yellow>Nosferatu" with nbt "{TomeType:15}" with lore "<white>A master's tome containing the Nosferatu spell.", "", "", "", "", "", "", "", "", "Uses Left:", "60" using air, air, air, air, diamond, lapis block, redstone dust, book, snowball with id "tome_nosferatu" in group "magic"
	register new shapeless recipe for book named "<light yellow>Light" with nbt "{TomeType:16}" with lore "<white>An intermediate's tome containing the Light spell.", "", "", "", "", "", "", "", "", "Uses Left:", "130" using air, air, air, air, air, air, redstone dust, book, feather with id "tome_light" in group "magic"
	#Misc
	register new shapeless recipe for book named "<light yellow>Rescue" with nbt "{TomeType:22}" with lore "<white>A specialty tome containing the Rescue spell.", "", "", "", "", "", "", "", "", "Uses Left:", "12" using air, air, air, air, air, lapis block, redstone dust, book, fishing rod with id "tome_rescue" in group "magic"
	register new shapeless recipe for book named "<light yellow>Slipgate" with nbt "{TomeType:23}" with lore "<white>A specialty tome containing the Slipgate spell.", "", "", "", "", "", "", "", "", "Uses Left:", "12" using air, air, air, air, air, lapis block, redstone dust, book, rabbit hide with id "tome_slipgate" in group "magic"
	register new shapeless recipe for book named "<light yellow>Silence" with nbt "{TomeType:24}" with lore "<white>A specialty tome containing the Silence spell.", "", "", "", "", "", "", "", "", "Uses Left:", "6" using air, air, air, air, diamond, lapis block, redstone dust, book, cobblestone with id "tome_silence" in group "magic"
	register new shapeless recipe for book named "<light yellow>Thief" with nbt "{TomeType:25}" with lore "<white>A specialty tome containing the Thief spell.", "", "", "", "", "", "", "", "", "Uses Left:", "3" using air, air, air, air, diamond, lapis block, redstone dust, book, tripwire hook with id "tome_thief" in group "magic"

#Dodge Roll Toggle Command
command /dr [<number=2>]:
	description: Toggles your Dodge Roll on and off.
	usage: /dr
	executable by: players
	trigger:
		if arg 1 is 1:
			set {drenable.%player%} to true
			send formatted "<green><bold>Dodge Roll enabled! Double tap Sneak to roll backwards."
		else if arg 1 is 0:
			clear {drenable.%player%}
			send formatted "<green><bold>Dodge Roll disabled!"
		else:
			if {drenable.%player%} is true:
				clear {drenable.%player%}
				send formatted "<green><bold>Dodge Roll disabled!"
			else:
				set {drenable.%player%} to true
				send formatted "<green><bold>Dodge Roll enabled! Double tap Sneak to roll backwards."
		
#Air Hang ground refresh
every 0.1 seconds:
	loop all players:
		if loop-value is on ground:
			set {attackHangtimeCount.%loop-value%} to 4
			clear {inHangtime.%loop-value%}
			clear {t_airComboBonus.%loop-value%}
		if the name of loop-player's tool is "<gold><bold>Blessed Sword":
			if the 6th line of the lore of loop-player's tool contains "Unique":
				apply regeneration 2 to loop-player for 1 second
				remove weakness from loop-player
				remove slowness from loop-player
				remove poison from loop-player
				remove wither from loop-player
		else if the name of the loop-player's tool is "<yellow><bold>Climbing Hook":
			apply swiftness 2 to loop-player for 1 second
			apply jump boost 2 to loop-player for 1 second
			apply mining fatigue 5 to loop-player for 1 second
	
#Players can transfer more momentum into the air.
on jump:
	if player is sprinting:
		if {jumpInertiaToggle.%player%} is true:
			set {_magnitude} to sqrt(((x of player's velocity ^ 2) + (y of player's velocity ^ 2) + (z of player's velocity ^ 2))) * 3.5
			#Cap maximum speed if it exceeds a specific amount, and take absolute value.
			if {_magnitude} is less than 0:
				set {_magnitude} to {_magnitude} * -1
			else if {_magnitude} is more than 0.1:
				set {_magnitude} to 0.1
			#Ground --> Air inertia transfer
			push the player in horizontal direction of the player at speed ({_magnitude} / 1.55)
			wait 1 tick
			set {_decay} to ({_magnitude} / 2)
			#Air velocity
			while player is not on ground:
				if player is not flying:
					if gliding of player is off:
						add 0.35 to {_decay}
						set {_prevMagnitude} to {_magnitude}
						set {_magnitude} to sqrt((x of player's velocity ^ 2) + (y of player's velocity ^ 2) + (z of player's velocity ^ 2))
						set {_magnitude} to (({_magnitude} * 0.35) + ({_prevMagnitude} * 1.15)) / (1 + {_decay})
						push the player in horizontal direction of the player at speed ({_magnitude} / 2.25)
						#send formatted "prevMagnitude: %{_prevMagnitude}%"
						#send formatted "Magnitude: %{_magnitude}%"
						#Players now gain velocity while falling instead of losing it
						#set {_magnitude} to {_magnitude} / (1 + {_decay})
						if player is on ground:
							push the player in horizontal direction of the player at speed {_magnitude}
							exit 1 loop
						if player is not sprinting:
							push the player in horizontal direction of the player at speed {_magnitude}
							exit 1 loop							
						wait 2 tick
					else:
						exit 1 loop
				else:
					exit 1 loop
			#Air --> Ground inertia conservation
			if player is on ground:
				set {_decay} to 0
				while {_magnitude} is more than 0.05:
					add 0.35 to {_decay}
					push the player in horizontal direction of the player at speed ({_magnitude} / 1)
					set {_magnitude} to {_magnitude} / (1 + {_decay})
					#send formatted "Ground Magnitude: %{_magnitude}%"
					wait 2 tick

#Debug command to manually set player's Dodge Roll state
command /setDRState <number>:
	trigger:
		if arg 1 is less than 1:
			clear {dodgerollstate.%player%}
		else:
			set {dodgerollstate.%player%} to arg 1

#DR = 0 - Prepped
#DR = 1 - Activates on next sneak tap
#DR = 2 - Recharging
#DRInvincible - Player is rolling with invincibility
#Dodge Roll
on sneak toggle:
	if {drEnable.%player%} is true:
		if {t_drAttempt.%player%} is not set:
			if {dodgerollstate.%player%} is not set:
				#drAttempt tells the game to ignore the second sneak event when the player stops sneaking
				set {t_drAttempt.%player%} to true
				wait 1 tick
				set {_drTimeout} to 0
				if {drDoubleTapWindow.%player%} is not set:
					set {drDoubleTapWindow.%player%} to 8
					send "<light purple><italics>Adjust dodge roll timing with /setDRWindow [number]. Default value is 8 ticks." to the player
				#Track how long the player is sneaking so that we can adjust the double-tap window
				while player is sneaking:
					wait 1 tick
					add 1 to {_drTimeout}
					#send "%{_drTimeout}%" to the player
				if {_drTimeout} is less than {drDoubleTapWindow.%player%}:
					set {dodgerollstate.%player%} to 1
					#send "dr state: 1" to the player
					#Timeout window for not inputting sneak fast enough
					set {_drTimeout} to 0
					while player is not sneaking:
						wait 1 tick
						add 1 to {_drTimeout}
						#send "%{_drTimeout}%" to the player
						if {_drTimeout} is more than ({drDoubleTapWindow.%player%} - 1):
							#send "dr cancelled" to the player
							clear {dodgerollstate.%player%}
							exit 1 loop
				else:
					clear {dodgerollstate.%player%}
					#send "dr cancelled" to the player
			else if {dodgerollstate.%player%} is 1:
				set {t_drAttempt.%player%} to true
				wait 1 tick
				set {_drTimeout} to 0
				while player is sneaking:
					wait 1 tick
					add 1 to {_drTimeout}
				if {_drTimeout} is less than 6:
					if player's food bar is more than 3:
						clear {dodgerollstate.%player%}
						play sound "entity.egg.throw" with volume 1 and pitch 0.4 at the player
						add 1 to {timesDodgeRolled.%player%}
						if {timesDodgeRolled.%player%} is more than 14:
							if {perks.%player%::Light Feet} is not 1:
								make player execute command "/grantskill 0 Light Feet"
						#Roll behavior
						#Roll Overrides
						set {_flight} to checkSlots(player,"Flight")
						if the 1st line of the lore of the player's boots contains "Lunge":
							push the player in horizontal direction of the player at speed 1.35
							push the player up at speed 0.3
						else if the 1st line of the lore of the player's boots contains "Guard Fly":
							push the player backwards at speed 1.35
							push the player up at speed 0.15
						else if the 1st line of the lore of the player's boots contains "Boost Jump":
							push the player up at speed 1.5
						else if {_flight} is 1:
							if {flying.%player%} is not set:
								set {flying.%player%} to 1
								set {_armour} to the player's chestplate
								wait 1 tick
								set the player's chestplate to 1 elytra
								push the player upwards at speed 5
								play sound "entity.blaze.shoot" with volume 0.5 and pitch 1.5 at player
								send formatted "<light blue>You take to the skies!"
								wait 1 second
								while player's hunger is more than 3:
									set {_drCost} to 1
									if {race.%player%} is "Dragonborn":
										subtract 0.5 from {_drCost}
									if player is on ground:
										exit 1 loop
									else if player is sneaking:
										exit 1 loop
									play 20 (smoke with speed 0) at player
									play 20 (snowball break with speed 0) at player
									play sound "entity.enderdragon.flap" with volume 1 and pitch 1 at player
									push the player forwards at speed 0.5
									chance of floor({abilities.%player%::Survival} / 2)%:
										subtract 0.5 from {_drCost}
										send "<light yellow>Your Survival ability reduced the dodge roll cost."
									subtract {_drCost} from the player's food level
									wait 1 second
								clear {flying.%player%}
								set the player's chestplate to {_armour}
								send formatted "<light red>Your wings grow tired..."
								play sound "entity.enderdragon.flap" with volume 1 and pitch 1 at player
						else:
							push the player in horizontal direction of the player at speed -1.35
							push the player up at speed 0.3
						set {tangibilityState.%player%} to "DRInvulnerable"
						#Set DR cost to a variable so that it can be manipulated by skills/perks/abilities
						set {_drCost} to 1
						#A high Survival ability gives a random chance to reduce dodge roll cost
						chance of floor({abilities.%player%::Survival} / 2)%:
							subtract 0.5 from {_drCost}
							send "<light yellow>Your Survival ability reduced the dodge roll cost."
						if checkSlots(player,"Light Feet") is 1:
							subtract 0.5 from {_drCost}
						subtract {_drCost} from the player's food level
						loop 9 times:
							play 5 (smoke with speed 0) at the player
							play 5 (cloud with speed 0) at the player
							wait 1 tick
						play sound "block.gravel.break" with volume 0.7 and pitch 0.5 at the player
						play sound "block.fire.extinguish" with volume 0.4 and pitch 0.7 at the player
						wait 4 ticks
						clear {tangibilityState.%player%}
					else:
						send "<light red>Not enough hunger to dodge roll!" to the player
				clear {dodgerollstate.%player%}
		else:
			clear {t_drAttempt.%player%}

#Timed equipment effects
on tool change:
	#Monado Arts - only show gauge if Monado equipped
	if nbt of player's tool does not contain "SacredTreasureID:40":
		destroy bossbar "monadogauge.%player's uuid%"
	else:
		if {monadoArtsGauge.%player%} is not set:
			set {monadoArtsGauge.%player%} to 0
		create bossbar titled "<light blue>Monado Arts" and id "monadogauge.%player's uuid%" for player with progress {monadoArtsGauge.%player%} with colors blue
	#Setting the countdown timer to -1 effectively "resets" the timer and prevents the skill's effect from activating early.
	loop {t_toolSkillCountdownTimer.%player%::*}:
		set {t_toolSkillCountdownTimer.%player%::%loop-index%} to -1
	if getEntitySkillsInHand(player,"Renewal",2,2) is more than 0:
		set {t_toolSkillCountdownTimer.%player%::Renewal} to 2
		while {t_toolSkillCountdownTimer.%player%::Renewal} is more than 0:
			wait 1 second
			subtract 1 from {t_toolSkillCountdownTimer.%player%::Renewal}
			if {t_toolSkillCountdownTimer.%player%::Renewal} is 0:
				heal the player by 1 heart
				add 0.5 to the player's food bar
				set {t_toolSkillCountdownTimer.%player%::Renewal} to 2
	if {t_MoreThanMagicWeaponSwitchWindow.%player%} is more than 0:
		clear {t_MoreThanMagicWeaponSwitchWindow.%player%}
		set {t_MoreThanMagicBonusActive.%player%} to 3
	if {traits.%player%::Always Prepared} is set:
		remove strength from the player
		apply strength 2 to the player for 2 seconds
	if {traits.%player%::Way of the Warrior} is set:
		if getEntityWeaponClass(player's tool) is not "Swords":
			if getEntityWeaponClass(player's tool) is not "None":
				cancel event
				send "<light red>This isn't a sword! You can't wield it!" to the player

#Passive effects
every 2 ticks:
	loop all players:
		#Fury
		if getEntitySkillsInHand(loop-player,"Fury",2,1) is more than 0:
			if {activeBuffs.str.%loop-player%::Fury Passive} is not set:
				set {_debug} to changeEntityStatBuff(loop-player,"STR",4,"Fury Passive",0)
				set {_debug} to changeEntityStatBuff(loop-player,"SPD",4,"Fury Passive",0)
				set {_debug} to changeEntityStatBuff(loop-player,"LCK",4,"Fury Passive",0)
				set {_debug} to changeEntityStatBuff(loop-player,"DEF",4,"Fury Passive",0)
				set {_debug} to changeEntityStatBuff(loop-player,"RES",4,"Fury Passive",0)
				set {_debug} to changeEntityStatBuff(loop-player,"MAG",4,"Fury Passive",0)
		#Fury (Buff Removal)
		else if {activeBuffs.str.%loop-player%::Fury Passive} is set:
			set {_debug} to changeEntityStatBuff(loop-player,"STR",-4,"Fury Passive",0)
			set {_debug} to changeEntityStatBuff(loop-player,"SPD",-4,"Fury Passive",0)
			set {_debug} to changeEntityStatBuff(loop-player,"LCK",-4,"Fury Passive",0)
			set {_debug} to changeEntityStatBuff(loop-player,"DEF",-4,"Fury Passive",0)
			set {_debug} to changeEntityStatBuff(loop-player,"RES",-4,"Fury Passive",0)
			set {_debug} to changeEntityStatBuff(loop-player,"MAG",-4,"Fury Passive",0)
		#Fortress DEF/RES
		if getEntitySkillsInHand(loop-player,"Fortress DEF/RES",2,1) is more than 0:
			if {activeBuffs.def.%loop-player%::Fortress DEF/RES} is not set:
				set {_debug} to changeEntityStatBuff(loop-player,"DEF",7,"Fortress DEF/RES",0)
				set {_debug} to changeEntityStatBuff(loop-player,"RES",7,"Fortress DEF/RES",0)
				set {_debug} to changeEntityStatBuff(loop-player,"STR",-2,"Fortress DEF/RES",0)
				set {_debug} to changeEntityStatBuff(loop-player,"MAG",-2,"Fortress DEF/RES",0)
		else if {activeBuffs.def.%loop-player%::Fortress DEF/RES} is set:
			set {_debug} to changeEntityStatBuff(loop-player,"DEF",-7,"Fortress DEF/RES",0)
			set {_debug} to changeEntityStatBuff(loop-player,"RES",-7,"Fortress DEF/RES",0)
			set {_debug} to changeEntityStatBuff(loop-player,"STR",2,"Fortress DEF/RES",0)
			set {_debug} to changeEntityStatBuff(loop-player,"MAG",2,"Fortress DEF/RES",0)
		#Sacred Treasures produce particle effects
		if nbt of loop-player's tool contains "sacredTreasureID:":
			play 4 (firework spark with speed 0) at loop-player
			play 4 (critical hit with speed 0) at loop-player
			play 4 (snow shovel with speed 0) at loop-player
			#Dracoclaws passives
			if nbt of loop-player's tool contains "sacredTreasureID:31":
				if {race.%loop-player%} is not "Dragonborn":
					if {activeBuffs.mag.%loop-player%::Dracoclaws} is not set:
						changeEntityStatBuff(loop-player,"MAG",5,"Dracoclaws",1)
						changeEntityStatBuff(loop-player,"RES",3,"Dracoclaws",1)
						changeEntityStatBuff(loop-player,"DEF",2,"Dracoclaws",1)
						changeEntityStatBuff(loop-player,"LCK",2,"Dracoclaws",1)
						changeEntityStatBuff(loop-player,"CHA",-4,"Dracoclaws",1)
				else:
					add 1 to the loop-player's food bar
			else if {activeBuffs.mag.%loop-player%::Dracoclaws} is set:
				changeEntityStatBuff(loop-player,"MAG",-5,"Dracoclaws",1)
				changeEntityStatBuff(loop-player,"RES",-3,"Dracoclaws",1)
				changeEntityStatBuff(loop-player,"DEF",-2,"Dracoclaws",1)
				changeEntityStatBuff(loop-player,"LCK",-2,"Dracoclaws",1)
				changeEntityStatBuff(loop-player,"CHA",4,"Dracoclaws",1)			
		#STR +3 (Weapon Skill)
		if getEntitySkillsInHand(loop-player,"STR +3",2,1) is more than 0:
			if {activeBuffs.str.%loop-player%::STR +3 (weapon)} is not set:
				set {_debug} to changeEntityStatBuff(loop-player,"STR",3,"STR +3 (weapon)",0)
		#STR +3 (Weapon Skill) (Buff Removal)
		else if {activebuffs.str.%loop-player%::STR +3 (weapon)} is set:
			set {_debug} to changeEntityStatBuff(loop-player,"STR",-3,"STR +3 (weapon)",0)
		#MAG +3 (Weapon Skill)
		if getEntitySkillsInHand(loop-player,"MAG +3",2,1) is more than 0:
			if {activeBuffs.mag.%loop-player%::MAG +3 (weapon)} is not set:
				set {_debug} to changeEntityStatBuff(loop-player,"MAG",3,"MAG +3 (weapon)",0)
		#MAG +3 (Weapon Skill) (Buff Removal)
		else if {activebuffs.mag.%loop-player%::MAG +3 (weapon)} is set:
			set {_debug} to changeEntityStatBuff(loop-player,"MAG",-3,"MAG +3 (weapon)",0)
		#SPD +3 (Weapon Skill)
		if getEntitySkillsInHand(loop-player,"SPD +3",2,1) is more than 0:
			if {activeBuffs.spd.%loop-player%::SPD +3 (weapon)} is not set:
				set {_debug} to changeEntityStatBuff(loop-player,"SPD",3,"SPD +3 (weapon)",0)
		#SPD +3 (Weapon Skill) (Buff Removal)
		else if {activebuffs.spd.%loop-player%::SPD +3 (weapon)} is set:
			set {_debug} to changeEntityStatBuff(loop-player,"SPD",-3,"SPD +3 (weapon)",0)
		#DEF +3 (Weapon Skill)
		if getEntitySkillsInHand(loop-player,"DEF +3",2,1) is more than 0:
			if {activeBuffs.def.%loop-player%::DEF +3 (weapon)} is not set:
				set {_debug} to changeEntityStatBuff(loop-player,"DEF",3,"DEF +3 (weapon)",0)
		#DEF +3 (Weapon Skill) (Buff Removal)
		else if {activebuffs.def.%loop-player%::DEF +3 (weapon)} is set:
			set {_debug} to changeEntityStatBuff(loop-player,"DEF",-3,"DEF +3 (weapon)",0)
		#RES +3 (Weapon Skill)
		if getEntitySkillsInHand(loop-player,"RES +3",2,1) is more than 0:
			if {activeBuffs.res.%loop-player%::RES +3 (weapon)} is not set:
				set {_debug} to changeEntityStatBuff(loop-player,"RES",3,"RES +3 (weapon)",0)
		#RES +3 (Weapon Skill) (Buff Removal)
		else if {activebuffs.res.%loop-player%::RES +3 (weapon)} is set:
			set {_debug} to changeEntityStatBuff(loop-player,"RES",-3,"RES +3 (weapon)",0)
		#Armor Skills
		#HP +10
		if the 1st line of the lore of loop-player's chestplate contains "HP +10":
			if {activeBuffs.hp.%loop-player%::HP +10 (Chestplate)} is not set:
				changeEntityStatBuff(loop-player,"HP",10,"HP +10 (Chestplate)",0)
		else if {activeBuffs.hp.%loop-player%::HP +10 (Chestplate)} is set:
			changeEntityStatBuff(loop-player,"HP",-10,"HP +10 (Chestplate)",0)
		#STR +5
		if the 1st line of the lore of loop-player's chestplate contains "STR +5":
			if {activeBuffs.hp.%loop-player%::STR +5 (Chestplate)} is not set:
				changeEntityStatBuff(loop-player,"STR",5,"STR +5 (Chestplate)",0)
		else if {activeBuffs.hp.%loop-player%::STR +5 (Chestplate)} is set:
			changeEntityStatBuff(loop-player,"STR",-5,"STR +5 (Chestplate)",0)
		#MAG +5
		if the 1st line of the lore of loop-player's chestplate contains "MAG +5":
			if {activeBuffs.hp.%loop-player%::MAG +5 (Chestplate)} is not set:
				changeEntityStatBuff(loop-player,"MAG",5,"MAG +5 (Chestplate)",0)
		else if {activeBuffs.hp.%loop-player%::MAG +5 (Chestplate)} is set:
			changeEntityStatBuff(loop-player,"MAG",-5,"MAG +5 (Chestplate)",0)
		#SPD +5
		if the 1st line of the lore of loop-player's chestplate contains "SPD +5":
			if {activeBuffs.hp.%loop-player%::SPD +5 (Chestplate)} is not set:
				changeEntityStatBuff(loop-player,"SPD",5,"SPD +5 (Chestplate)",0)
		else if {activeBuffs.hp.%loop-player%::SPD +5 (Chestplate)} is set:
			changeEntityStatBuff(loop-player,"SPD",-5,"SPD +5 (Chestplate)",0)
		#CHR +7
		if the 1st line of the lore of loop-player's chestplate contains "CHR +7":
			if {activeBuffs.hp.%loop-player%::CHR +7 (Chestplate)} is not set:
				changeEntityStatBuff(loop-player,"CHR",7,"CHR +7 (Chestplate)",0)
		else if {activeBuffs.hp.%loop-player%::CHR +7 (Chestplate)} is set:
			changeEntityStatBuff(loop-player,"CHR",-7,"CHR +7 (Chestplate)",0)
		#DEF +5
		if the 1st line of the lore of loop-player's chestplate contains "DEF +5":
			if {activeBuffs.hp.%loop-player%::DEF +5 (Chestplate)} is not set:
				changeEntityStatBuff(loop-player,"DEF",5,"DEF +5 (Chestplate)",0)
		else if {activeBuffs.hp.%loop-player%::DEF +5 (Chestplate)} is set:
			changeEntityStatBuff(loop-player,"DEF",-5,"DEF +5 (Chestplate)",0)
		#RES +5
		if the 1st line of the lore of loop-player's chestplate contains "RES +5":
			if {activeBuffs.hp.%loop-player%::RES +5 (Chestplate)} is not set:
				changeEntityStatBuff(loop-player,"RES",5,"RES +5 (Chestplate)",0)
		else if {activeBuffs.hp.%loop-player%::RES +5 (Chestplate)} is set:
			changeEntityStatBuff(loop-player,"RES",-5,"RES +5 (Chestplate)",0)
		#Brave Blade (SPD Penalty)
		if getEntitySkillsInHand(loop-player,"Brave Blade",0,2) is more than 0:
			if {activeBuffs.spd.%loop-player%::Brave Blade} is not set:
				set {_debug} to changeEntityStatBuff(loop-player,"SPD",-5,"Brave Blade",0)
		else if {activeBuffs.spd.%loop-player%::Brave Blade} is set:
			set {_debug} to changeEntityStatBuff(loop-player,"SPD",5,"Brave Blade",0)

#Damage Step Effects	
on damage:
	if damage cause is attack:
		set {_doDamageCheck} to true
	else if projectile exists:
		set {_doDamageCheck} to true
	if {_doDamageCheck} is true:
		#Check player tangibility state first to avoid doing unneeded calculations
		if getEntityVarByName(victim,"tangibilityState") is not "-2":
			#broadcast "invlun detected from %victim%"
			if getEntityVarByName(victim,"tangibilityState") is "DRInvulnerable":
				play sound "item.totem.use" with volume 1 and pitch 1 at attacker for victim
				send formatted "<light blue>Dodged %attacker%'s attack!" to the victim
				send formatted "<light red>%victim% dodged your attack!" to the attacker
				cancel event
			else if getEntityVarByName(victim,"tangibilityState") is "ResurrectionInvulnerable":
				cancel event
			else if getEntityVarByName(victim,"tangibilityState") is "GenericInvulnerable":
				cancel event
		#Seeker summons explode when hit and bypass normal combat checkSlots
		else if {npc_isSpecialSummon.%citizen id of victim%} is "Seeker":
			create safe explosion of force 5 at the victim
			play 40 (purple wool break with speed 1) at the victim
			play 40 (smoke with speed 1) at the victim
			send formatted "<light red>Seeker summon was slain!" to {npc_summonOwner.%citizen id of victim%}
			make console execute command "/npc sel %citizen id of victim%"
			make console execute command "/npc remove"
			clear {npc_str.%citizen id of victim%}
			clear {npc_spd.%citizen id of victim%}
			clear {npc_mag.%citizen id of victim%}
			clear {npc_def.%citizen id of victim%}
			clear {npc_res.%citizen id of victim%}
			clear {npc_lck.%citizen id of victim%}
			clear {npc_hp.%citizen id of victim%}
			clear {NPCsFor.%{npc_summonOwner.%citizen id of victim%}%::C_Seeker Summon}
			clear {npc_party.%citizen id of victim%}
			subtract 1 from {activeSummonCount.%{npc_summonOwner.%citizen id of victim%}%}
			clear {npc_summonOwner.%citizen id of victim%}
		else:
			#Shadow Walker undo - Victim
			if {ShadowWalkerArmourStorage.%victim%::Helmet} is set:
				remove invisibility from the victim
				set the victim's helmet to {ShadowWalkerArmourStorage.%victim%::Helmet}
				set the victim's chestplate to {ShadowWalkerArmourStorage.%victim%::Chestplate}
				set the victim's leggings to {ShadowWalkerArmourStorage.%victim%::Leggings}
				set the victim's boots to {ShadowWalkerArmourStorage.%victim%::Boots}
				send formatted "<purple><italics>Returning to the light..." to the victim
				clear {ShadowWalkerArmourStorage.%victim%::*}
			#Shadow Walker undo - Attacker
			if {ShadowWalkerArmourStorage.%attacker%::Helmet} is set:
				remove invisibility from the attacker
				set the attacker's helmet to {ShadowWalkerArmourStorage.%attacker%::Helmet}
				set the attacker's chestplate to {ShadowWalkerArmourStorage.%attacker%::Chestplate}
				set the attacker's leggings to {ShadowWalkerArmourStorage.%attacker%::Leggings}
				set the attacker's boots to {ShadowWalkerArmourStorage.%attacker%::Boots}
				send formatted "<purple><italics>Returning to the light..." to the attacker
				clear {ShadowWalkerArmourStorage.%attacker%::*}
			#Snatch hit behavior
			if metadata value "isSnatchProjectile" of the projectile is 1:
				cancel event
				damage the victim by 1
				push the victim up at speed 0.33
				push the victim (direction from victim to location of attacker) at speed (distance between attacker and victim) / 3
			#Vantage
			if getEntitySkillsInHand(victim,"Vantage",2,2) is more than 0:
				if victim's health is less than victim's maximum health * 0.75:
					if getEntityRange(attacker) is getEntityRange(victim):
						make victim damage the attacker by damage
						set damage to damage * 0.3
					else if getEntityRange(victim) is more than 2:
						make victim damage the attacker by damage
						set damage to damage * 0.3						
			else if checkSlots(victim,"Vantage") is 1:
				if victim's health is less than victim's maximum health * 0.75:
					if getEntityRange(attacker) is getEntityRange(victim):
						make victim damage the attacker by damage
						set damage to damage * 0.3
					else if getEntityRange(victim) is more than 2:
						make victim damage the attacker by damage
						set damage to damage * 0.3	
			if attacker is not alive:
				cancel event
			#Initialize doubling variable
			if {t_isCounterAttacking.%attacker%} is not true:
				set {t_cos_doubleattacks.%attacker%} to 1
			#
			#Weapon Might Adjustments
			#Lance damage correction
			#
			if projectile exists:
				set {_JAVTYPE} to metadata value "JavType" of projectile
				if {_JAVTYPE} is 1:
					set damage to 1.5
				else if {_JAVTYPE} is 2:
					set damage to 2.5
				else if {_JAVTYPE} is 3:
					set damage to 3.5
				else if {_JAVTYPE} is 4:
					set damage to 4.5
				else if {_JAVTYPE} is 5:
					set damage to 5
				else if {_JAVTYPE} is 6:
					set damage to 3.5
				#Dagger damage correction
				else:
					set {_DAGTYPE} to metadata value "DaggerType" of projectile
					if {_DAGTYPE} is 0:
						set damage to 2.5
					else if {_DAGTYPE} is 1:
						set damage to 3.5
					else if {_DAGTYPE} is 2:
						set damage to 4.5
					else if {_DAGTYPE} is 3:
						set damage to 2.5
					else if {_DAGTYPE} is 4:
						set damage to 5.5
					else if {_DAGTYPE} is 5:
						set damage to 5.5
					set {_attackerHasDagger} to true
			else if nbt of attacker's tool contains "LanceType:0":
				set damage to 3
			else if nbt of attacker's tool contains "LanceType:1":
				set damage to 4
			else if nbt of attacker's tool contains "LanceType:2":
				set damage to 5
			else if nbt of attacker's tool contains "LanceType:3":
				set damage to 3
			else if nbt of attacker's tool contains "LanceType:4":
				set damage to 6
			#Dagger damage
			else if nbt of attacker's tool contains "DaggerType:0":
				set damage to 2.5
				set {_attackerHasDagger} to true
			else if nbt of attacker's tool contains "DaggerType:1":
				set damage to 3.5
				set {_attackerHasDagger} to true
			else if nbt of attacker's tool contains "DaggerType:2":
				set damage to 4.5
				set {_attackerHasDagger} to true
			else if nbt of attacker's tool contains "DaggerType:3":
				set damage to 2.5
				set {_attackerHasDagger} to true
			else if nbt of attacker's tool contains "DaggerType:4":
				set damage to 5.5
				set {_attackerHasDagger} to true
			#Gauntlet damage + brave effect
			else if nbt of attacker's tool contains "GauntletType:0":
				set damage to 2
				add 1 to {t_cos_doubleattacks.%attacker%}
			else if nbt of attacker's tool contains "GauntletType:1":
				set damage to 2.5
				add 1 to {t_cos_doubleattacks.%attacker%}
			else if nbt of attacker's tool contains "GauntletType:2":
				set damage to 3
				add 1 to {t_cos_doubleattacks.%attacker%}
			else if nbt of attacker's tool contains "GauntletType:3":
				set damage to 2
				add 1 to {t_cos_doubleattacks.%attacker%}
			else if nbt of attacker's tool contains "GauntletType:4":
				set damage to 4.5
				add 1 to {t_cos_doubleattacks.%attacker%}
			#
			#Firearm Base Might Adjustment
			#
			if projectile exists:
				#Super Shotgun Damage Bonus
				set {_sstest} to metadata value "SUPERSHOTGUN" of projectile
				if {_sstest} is 1:
					set damage to damage + 15
					play 20 (critical hit with speed 0) at the victim
					play 20 (lava drip with speed 0) at the victim
				set {_type} to metadata value "gunType" of projectile
				#Flintlock Pistol
				if {_type} is "1":
					set damage to damage + 5
					set {_gunClass} to 0
				#Iron Musket
				else if {_type} is "2":
					set damage to damage + 7.5
					set {_gunClass} to 1
				#Iron Pistol
				else if {_type} is "3":
					set damage to damage + 4
					set {_gunClass} to 0
				#Redstone Rifle
				else if {_type} is "4":
					set damage to damage + 3.5
					set {_gunClass} to 2
				#Redgrave E-45 Express
				else if {_type} is "5":
					set damage to damage + 2.5
					set {_gunClass} to 0
				#Redgrave Coyote-Alpha
				else if {_type} is "6":
					add 6 to damage
					set {_gunClass} to 2
					if (10 - ((distance between the attacker and the victim * ((checkSlots(attacker,"Extra Attachments")) + 1)))) is more than 0:
						add (6 + (2.25 * (10 - (distance between the attacker and the victim)))) to damage
				#Teufort Two-Timer
				else if {_type} is "7":
					set {_gunClass} to 2
					if (7.5 - (distance between the attacker and the victim / ((checkSlots(attacker,"Extra Attachments")) + 1))) is more than 0:
						add (11 + (1.75 * (7.5 - (distance between the attacker and the victim)))) to damage
						set {_pushForce} to ((distance between the attacker and the victim) - 6)
						if {_pushForce} is less than 0:
							push the victim backwards at speed (-0.66 * {_pushForce})
							push the victim upwards at speed (-0.25 * {_pushForce})
				#Rocket Launcher
				else if {_type} is "8":
					set {_gunClass} to 4
					add (24 + (1 * (12 - (distance between the attacker and the victim)))) to damage
					set {_pushForce} to ((distance between attacker and the victim) - 8)
					if {_pushForce} is less than 0:
						push the victim backwards at speed (-0.33 * {_pushForce})
						push the victim upwards at speed (-0.1 * {_pushForce})
					create safe explosion of force 1.5 at the victim
				#Minigun
				else if {_type} is "9":
					add 1 to damage
					set {_gunClass} to 4
					if (6 - (distance between the attacker and the victim)) is more than 0:
						add (6 + ((7 - distance between the attacker and the victim) * 1.25)) to damage
					set {_pushForce} to ((distance between attacker and the victim) - 10)
					if {_pushforce} is less than 0:
						push the victim backwards at speed (-0.33 * {_pushforce})
				#Home-Made Heater
				else if {_type} is "10":
					set {_gunClass} to 3
					add (8 + (1.33 * (distance between the attacker and the victim - 9.5))) to damage
					play 10 (redstone block break with speed 1) at the victim
				#Grenade Launcher
				else if {_type} is "11":
					add 20 to damage
					set {_gunClass} to 4
					create safe explosion of force 1.3 at the victim
				#Hell's Spiral
				else if {_type} is "12":
					set {_gunClass} to 3
					add (24 + (1.5 * (distance between the attacker and the victim - 6))) to damage
					play 10 (redstone block break with speed 1) at the victim
					play 10 (gold block break with speed 1) at the victim
					create safe explosion of force 1 at the victim
				#Vettik S-25
				else if {_type} is "13":
					set {_gunClass} to 2
					add 7 to damage
					if (9 - (distance between the attacker and the victim / ((checkSlots(attacker,"Slug Rounds")) + 1))) is more than 0:
						add ((9 - (distance between the attacker and the victim / ((checkSlots(attacker,"Slug Rounds")) + 1)) * 1.15)) to damage
					else:
						subtract (((distance between the attacker and the victim - 9) * 1.15) / ((checkSlots(attacker,"Slug Rounds")) + 1)) from damage
				#Vettik B-30AS
				else if {_type} is "14":
					add 4.5 to damage
					set {_gunClass} to 1
					if (13 - (distance between the attacker and the victim / ((checkSlots(attacker,"Slug Rounds")) + 1))) is more than 0:
						add ((13 - (distance between the attacker and the victim / ((checkSlots(attacker,"Slug Rounds")) + 1)) * 1.15)) to damage
					else:
						subtract ((distance between the attacker and the victim - 13) * 1) from damage
				#Vettik A-10 Enforcer
				else if {_type} is "15":
					set {_gunClass} to 3
					add (7 + ((distance between the attacker and the victim - 4) * 1)) to damage
				#Redgrave Kalina
				else if {_type} is "16":
					set {_gunClass} to 3
					add (16 + (distance between the attacker and the victim * 1.66)) to damage
				#Redgrave Ifrit
				else if {_type} is "17":
					set {_gunClass} to 0
					add 11 to damage
					if (13 - (distance between the attacker and the victim / ((checkSlots(attacker,"Slug Rounds")) + 1))) is more than 0:
						add ((13 - (distance between the attacker and the victim / ((checkSlots(attacker,"Slug Rounds")) + 1)))) to damage
					else:
						subtract (((13 - (distance between the attacker and the victim / ((checkSlots(attacker,"Slug Rounds")) + 1)))) * 1.15) from damage
				#Big Iron
				else if {_type} is "18":
					set {_gunClass} to 0
					add 8 to damage
				if {_type} is set:
					if checkSlots(attacker,"Trained Professional") is 1:
						set damage to (damage * 1.33)
				if checkSlots(attacker,"Extra Attachments") is 1:
					if {_gunClass} is 0:
						set damage to damage + 6
						play 10 (yellow wool break with speed 1) at the victim
						push the victim upwards at speed 0.33
					else if {_gunClass} is 2:
						set damage to damage * getEntityArmorDamageReduction(victim)
			#Spell damage and recoil, imported from CoS Legacy
			set {_isSpell} to metadata value "SPELL" of projectile
			send "isSpell: %{_isSpell}%" to the attacker
			if {_isSpell} is 1:
				set {_magical} to 1
				set {_spelleffect1} to metadata value "SpellEffect1" of projectile
				set {_spelleffect2} to metadata value "SpellEffect2" of projectile
				set damage to 1
				set {_spellRecoil} to 0
				set {_forloop} to 1
				set {_loc} to location of the victim
				set {_overchargePrimarySpell} to 0
				if getEntitySkillsInHand(attacker,"Overcharge",2,1) is more than 0:
					set {_overchargePrimarySpell} to 1
				#Tome override to always give double Overcharge for the spell it casts
				else if {_spelleffect2} is 776:
					set {_overchargePrimarySpell} to 2
				else if getEntityWeaponClass(attacker's tool) is "Tomes":
					set {_overchargePrimarySpell} to 2
				set {_timesToCheckMagic} to (2 + {_overchargePrimarySpell})
				loop {_timesToCheckMagic} times:
					#Ember
					if {_spelleffect%{_forloop}%} is 1:
						ignite the victim
						play 5 (lava pop with speed 1) at the victim
						set damage to damage + 3
						add 0.5 to {_spellRecoil}
					#Spark
					if {_spelleffect%{_forloop}%} is 2:
						play 10 (critical hit with speed 1) at the victim
						show firework's spark on the victim
						set damage to damage + 6
						add 1 to {_spellRecoil}
					#Frost
					if {_spelleffect%{_forloop}%} is 3:
						play 5 (ice break with speed 1) at the victim
						apply slowness 1 to the victim for 5 seconds
						send formatted "<cyan><bold>%attacker% slowed you with a Frost spell!" to the victim
						set damage to damage + 2
						add 0.5 to {_spellRecoil}
					#Gust
					if {_spelleffect%{_forloop}%} is 4:
						play 5 (green wool break with speed 1) at the victim
						push the victim backwards at speed 1.5
						set damage to damage + 3
						add 0.5 to {_spellRecoil}
					#Fire
					if {_spelleffect%{_forloop}%} is 5:
						play 15 (lava pop with speed 1) at the victim
						ignite the victim
						set damage to damage + 5
						add 1 to {_spellRecoil}
						loop blocks in radius 1 of {_loc}:
							loop-block is air
							set loop-block to fire
					#Thunder
					if {_spelleffect%{_forloop}%} is 6:
						play 20 (critical hit with speed 1) at the victim
						show firework's spark on the victim
						set damage to damage + 8
						add 1.5 to {_spellRecoil}
					#Hail
					if {_spelleffect%{_forloop}%} is 7:
						play 15 (ice break with speed 1) at the victim
						apply slowness 2 to the victim for 5 seconds
						send formatted "<cyan><bold>%attacker% slowed you with a Hail spell!" to the victim
						set damage to damage + 3
						add 1 to {_spellRecoil}
					#Wind
					if {_spelleffect%{_forloop}%} is 8:
						play 15 (green wool break with speed 1) at the victim
						push the victim backwards at speed 2
						push the victim upwards at speed 0.5
						set damage to damage + 4.5
						add 1 to {_spellRecoil}
					#Elfire
					if {_spelleffect%{_forloop}%} is 9:
						ignite the victim
						play 5 (mob spawner flames with speed 1) at the victim
						set damage to damage + 9
						add 1.5 to {_spellRecoil}
						if getEntitySkillsInHand(attacker,"Chained Magic",0,4) is 0:
							loop blocks in radius 2 of {_loc}:
								loop-block is air
								set loop-block to fire
					#Thoron
					if {_spelleffect%{_forloop}%} is 10:
						set damage to damage + 12
						strike lightning effect at the victim
						add 2.5 to {_spellRecoil}
					#Blizzard
					if {_spelleffect%{_forloop}%} is 11:
						play 40 (ice break with speed 1) at the victim
						play 40 (snowball break with speed 1) at the victim
						apply slowness 3 to the victim for 5 seconds
						send formatted "<cyan><bold>%attacker% slowed you with a Blizzard spell!" to the victim
						set damage to damage + 4.5
						add 1.5 to {_spellRecoil}
					#Tornado
					if {_spelleffect%{_forloop}%} is 12:
						play 40 (critical hit with speed 1) at the victim
						play 40 (green wool break with speed 1) at the victim
						push the victim backwards at speed 3
						push the victim upwards at speed 1.5
						set damage to damage + 5.5
						add 1.5 to {_spellRecoil}
					#Bolganone
					if {_spelleffect%{_forloop}%} is 13:
						ignite the victim
						play 10 (mob spawner flames with speed 1) at the victim
						play 20 (lava pop with speed 1) at the victim
						set damage to damage + 13
						add 2.5 to {_spellRecoil}
						if getEntitySkillsInHand(attacker,"Chained Magic",0,4) is 0:
							loop blocks in radius 3 of {_loc}:
								loop-block is air
								set loop-block to fire
					#Aurora
					if {_spelleffect%{_forloop}%} is 14:
						show 80 (firework's spark with speed 1) at the victim
						set damage to damage + 14.5
						strike lightning effect at the victim
						strike lightning effect at the victim
						add 2.5 to {_spellRecoil}
					#Nosferatu
					if {_spelleffect%{_forloop}%} is 15:
						show 60 (purple wool break with speed 1) at the victim
						show 60 (black wool break with speed 1) at the victim
						set damage to damage + 3.5
						heal the attacker by damage
						add 1.5 to {_spellRecoil}
					#Spellblade
					if {_spelleffect%{_forloop}%} is 17:
						show 80 (light green wool break with speed 1) at the victim
						show 80 (critical hit with speed 1) at the victim
						set damage to damage + floor((({strbuff.%attacker%} / 2) + ({defbuff.%attacker%} / 2) + ({MAGBuff.%attacker%} / 2) + ({spdbuff.%attacker%} / 2) + ({sklbuff.%attacker%} / 2)) ^ 0.75)
						add damage / 2 to {_spellRecoil}
					#Forseti
					if {_spelleffect%{_forloop}%} is 18:
						show 80 (light green wool break with speed 1) at the victim
						show 80 (critical hit with speed 1) at the victim
						push the victim backwards at speed 2
						set damage to damage + 7.5
						add 3.5 to {_spellRecoil}
						if attacker's health is attacker's maximum health:
							set damage to damage * 2
							add 1.5 to {_spellRecoil}
					#Naga
					if {_spelleffect%{_forloop}%} is 19:
						show 80 (yellow wool break with speed 1) at the victim
						show 80 (critical hit with speed 1) at the victim
						show firework's spark on the victim
						set damage to damage + 10
						if victim is ender dragon:
							set damage to damage * 1.5
							send formatted "<yellow>Dealt effective damage!" to the attacker
						else if {class.%victim%} is "Dragonborn":
							set damage to damage * 1.5
							send formatted "<yellow>Dealt effective damage!" to the attacker
						else if {class.%victim%} is "Manakete":
							set damage to damage * 1.5
							send formatted "<yellow>Dealt effective damage!" to the attacker
						else if {class.%victim%} is "Divine Dragon":
							set damage to damage * 1.5
							send formatted "<yellow>Dealt effective damage!" to the attacker
						else if the lore of the victim's tool contains "Loptous":
							set damage to damage * 1.5
							send formatted "<yellow>Dealt effective damage! (Loptous)" to the attacker
						add 6.5 to {_spellRecoil}
					#Loptous
					if {_spelleffect%{_forloop}%} is 20:
						show 60 (obsidian break with speed 1) at the victim
						show 40 (smoke with speed 0) at the victim
						add 6.5 to {_spellRecoil}
						set damage to damage + 10
					#Stone
					if {_spelleffect%{_forloop}%} is 21:
						show 80 (stone break with speed 1) at the victim
						apply weakness 10 to the victim for 2 seconds
						apply slowness 10 to the victim for 2 seconds
						set damage to damage + 1.5
						add 5 to {_spellRecoil}
					#Rescue:
					#if {_spelleffect%{_forloop}%} is 22:
					#	show 80 (blue wool break with speed 1) at the victim
					#	set damage to 0
					#	teleport the victim to the attacker
					#	add 5 to {_spellRecoil}
					#Slipgate
					#if {_spelleffect%{_forloop}%} is 23:
					#	show 80 (blue wool break with speed 1) at the attacker
					#	set damage to 0
					#	teleport the attacker to the victim
					#	add 5 to {_spellRecoil}
					#Silence
					if {_spelleffect%{_forloop}%} is 24:
						show 60 (chest break with speed 1) at the victim
						set damage to damage + 1.5
						apply weakness 4 to the victim for 6 seconds
						set {_disableAutoCounters} to true
						add 1.5 to {_spellRecoil}
					#Thief
					if {_spelleffect%{_forloop}%} is 25:
						show 60 (cobweb break with speed 1) at the victim
						set damage to damage + 1.5
						if {_spelleffect2} is 776:
							drop the victim's tool at the victim
							damage the victim's tool by 9999
						else:
							chance of 35%:
								drop the victim's tool at the victim
								damage the victim's tool by 9999
					#Light
					if {_spelleffect%{_forloop}%} is 16:
						set damage to damage + 4.5
						if victim is monster:
							set damage to damage * 1.5
							play 80 (glowstone break with speed 0) at the victim
							add 3.5 to {_spellRecoil}
						else:
							play 40 (glowstone break with speed 0) at the projectile
							add 2 to {_spellRecoil}
					if {_forloop} is 1:
						if {_overchargePrimarySpell} is more than 0:
							subtract 1 from {_forloop}
							subtract 1 from {_overchargePrimarySpell}
					add 1 to {_forloop}
			#
			#Adaptive Damage Checks & Magical Denotation
			#
			if the 7th line of the lore of the attacker's tool contains "Spell 1":
				set {_magical} to 1
			else if the 8th line of the lore of the attacker's tool contains "Spell 2":
				set {_magical} to 1
			else if checkSlots(attacker,"Hexblade") is 1:
				set {_magical} to 1
			if metadata value "isSummonedSword" of the projectile is 1:
				set {_magical} to 1
				set {t_embeddedSwordTarget.%attacker%} to the victim
				set {t_embeddedSwordTimer.%attacker%} to 10
			if metadata value "isMirageBolt" of the projectile is 1:
				set {_magical} to 1
				play 5 (white wool break with speed 1) at the victim
				play 5 (firework spark with speed 0) at the victim
				play 10 (purple wool break with speed 1) at the victim
				heal the attacker by (attacker's maximum health * 0.1)
				subtract 0.5 from {t_royalForkCD.%attacker%}
			if getEntitySkillsInHand(attacker,"Sorcery Aura",2,1) is more than 0:
				if getEntityWeaponType(attacker) is not 1:
					if (((getEntityStatTotal(attacker,"MAG")) / 2) - ((getEntityStatTotal(victim,"RES")) / 2)) is more than (((getEntityStatTotal(attacker,"STR")) / 2) - ((getEntityStatTotal(victim,"DEF")) / 2)):
						set {_magical} to 1
						if {verboseCombatLogging.%attacker%} is true:
							send formatted "<gold>[Sorcery Aura] <white>Calculating damage using MAG/RES." to the attacker
				else:
					if (((getEntityStatTotal(attacker,"MAG")) / 2) - ((getEntityStatTotal(victim,"RES")) / 2)) is less than (((getEntityStatTotal(attacker,"STR")) / 2) - ((getEntityStatTotal(victim,"DEF")) / 2)):
						clear {_magical}
						if {verboseCombatLogging.%attacker%} is true:
							send formatted "<gold>[Sorcery Aura] <white>Calculating damage using STR/DEF." to the attacker
			if checkSlots(attacker,"Sorcery Aura") is 1:
				if getEntityWeaponType(attacker) is not 1:
					if (((getEntityStatTotal(attacker,"MAG")) / 2) - ((getEntityStatTotal(victim,"RES")) / 2)) is more than (((getEntityStatTotal(attacker,"STR")) / 2) - ((getEntityStatTotal(victim,"DEF")) / 2)):
						set {_magical} to 1
						if {verboseCombatLogging.%attacker%} is true:
							send formatted "<gold>[Sorcery Aura] <white>Calculating damage using MAG/RES." to the attacker
				else:
					if (((getEntityStatTotal(attacker,"MAG")) / 2) - ((getEntityStatTotal(victim,"RES")) / 2)) is less than (((getEntityStatTotal(attacker,"STR")) / 2) - ((getEntityStatTotal(victim,"DEF")) / 2)):
						clear {_magical}
						if {verboseCombatLogging.%attacker%} is true:
							send formatted "<gold>[Sorcery Aura] <white>Calculating damage using STR/DEF." to the attacker
			#
			#Blaze/Ghast/Enderman/Ender Dragon/Creeper/Husk/Stray deal magical damage
			#
			if damage cause is entity explosion:
				set {_magical} to 1
			else if attacker is blaze:
				set {_magical} to 1
			else if attacker is ghast:
				set {_magical} to 1
			else if attacker is enderman:
				set {_magical} to 1
			else if attacker is ender dragon:
				set {_magical} to 1
			else if "%attacker's entity type%" contains "husk":
				set {_magical} to 1
			else if "%attacker's entity type%" contains "stray":
				set {_magical} to 1
			else if "%attacker's entity type%" contains "evoker":
				set {_magical} to 1
			else if "%attacker's entity type%" contains "illusioner":
				set {_magical} to 1
			else if "%attacker's entity type%" contains "drowned":
				set {_magical} to 1
			else if "%attacker's entity type%" contains "wither skeleton":
				set {_magical} to 1
			else if "%attacker's entity type%" contains "guardian":
				set {_magical} to 1
			#
			#Helm Splitter
			#
			if attacker is player:
				if attacker is not on ground:
					if attacker is sneaking:
						if {enableHelmSplitter.%attacker%} is true:
							add 3 to damage
							add getHelmetDamageResistance(victim) to damage
							push the attacker downwards at speed 2
							push the victim downwards at speed 2
							play sound "entity.generic.explode" with volume 1 and pitch 1.5 at the attacker for the attacker
							set {inHangtime.%attacker%} to true
			#
			#In-Combat skills start here
			#
			#Honest Heart [Trait, damage bonus]
			if {traits.%attacker%::Honest Heart} is true:
				add 5 to damage
			#Lulls - Attacker
			if getEntitySkillsInHand(attacker,"Lull STR/DEF",0,2) is more than 0:
				if getEntityStatBuff(victim,"STR") is more than 0:
					set {_debug} to changeEntityStatBuff(victim,"STR",(getEntityOOCStatBuff(victim,"STR",0)) * -1,"Lull STR/DEF Bonus Null",1)
				if getEntityStatBuff(victim,"DEF") is more than 0:
					set {_debug} to changeEntityStatBuff(victim,"DEF",(getEntityOOCStatBuff(victim,"DEF",0)) * -1,"Lull STR/DEF Bonus Null",1)
				changeEntityStatBuff(victim,"STR",-5,"Lull STR/DEF",1)
				changeEntityStatBuff(victim,"DEF",-5,"Lull STR/DEF",1)
			else if getEntitySkillsInHand(attacker,"Lull MAG/RES",0,2) is more than 0:
				if getEntityStatBuff(victim,"MAG") is more than 0:
					set {_debug} to changeEntityStatBuff(victim,"MAG",(getEntityOOCStatBuff(victim,"MAG",0)) * -1,"Lull MAG/RES Bonus Null",1)
				if getEntityStatBuff(victim,"RES") is more than 0:
					set {_debug} to changeEntityStatBuff(victim,"RES",(getEntityOOCStatBuff(victim,"RES",0)) * -1,"Lull MAG/RES Bonus Null",1)
				changeEntityStatBuff(victim,"MAG",-5,"Lull MAG/RES",1)
				changeEntityStatBuff(victim,"RES",-5,"Lull MAG/RES",1)
			if getEntitySkillsInHand(attacker,"Lull SPD/DEF",0,2) is more than 0:
				if getEntityStatBuff(victim,"SPD") is more than 0:
					set {_debug} to changeEntityStatBuff(victim,"SPD",(getEntityOOCStatBuff(victim,"SPD",0)) * -1,"Lull SPD/DEF Bonus Null",1)
				if getEntityStatBuff(victim,"DEF") is more than 0:
					set {_debug} to changeEntityStatBuff(victim,"DEF",(getEntityOOCStatBuff(victim,"DEF",0)) * -1,"Lull SPD/DEF Bonus Null",1)
				changeEntityStatBuff(victim,"SPD",-5,"Lull SPD/DEF",1)
				changeEntityStatBuff(victim,"DEF",-5,"Lull SPD/DEF",1)
			if getEntitySkillsInHand(attacker,"Lull SPD/RES",0,2) is more than 0:
				if getEntityStatBuff(victim,"SPD") is more than 0:
					set {_debug} to changeEntityStatBuff(victim,"SPD",(getEntityOOCStatBuff(victim,"SPD",0)) * -1,"Lull SPD/RES Bonus Null",1)
				if getEntityStatBuff(victim,"RES") is more than 0:
					set {_debug} to changeEntityStatBuff(victim,"RES",(getEntityOOCStatBuff(victim,"RES",0)) * -1,"Lull SPD/RES Bonus Null",1)
				changeEntityStatBuff(victim,"SPD",-5,"Lull SPD/RES",1)
				changeEntityStatBuff(victim,"RES",-5,"Lull SPD/RES",1)
			if getEntitySkillsInHand(attacker,"Lull ATK/SPD",0,2) is more than 0:
				if getEntityStatBuff(victim,"STR") is more than 0:
					set {_debug} to changeEntityStatBuff(victim,"STR",(getEntityOOCStatBuff(victim,"STR",0)) * -1,"Lull ATK/SPD Bonus Null",1)
				if getEntityStatBuff(victim,"MAG") is more than 0:
					set {_debug} to changeEntityStatBuff(victim,"MAG",(getEntityOOCStatBuff(victim,"MAG",0)) * -1,"Lull ATK/SPD Bonus Null",1)
				if getEntityStatBuff(victim,"SPD") is more than 0:
					set {_debug} to changeEntityStatBuff(victim,"SPD",(getEntityOOCStatBuff(victim,"SPD",0)) * -1,"Lull ATK/SPD Bonus Null",1)
				changeEntityStatBuff(victim,"STR",-5,"Lull ATK/SPD",1)
				changeEntityStatBuff(victim,"MAG",-5,"Lull ATK/SPD",1)
				changeEntityStatBuff(victim,"SPD",-5,"Lull ATK/SPD",1)
			#Lulls - Victim
			if getEntitySkillsInHand(victim,"Lull STR/DEF",0,2) is more than 0:
				if getEntityStatBuff(attacker,"STR") is more than 0:
					set {_debug} to changeEntityStatBuff(attacker,"STR",(getEntityOOCStatBuff(attacker,"STR",0)) * -1,"Lull STR/DEF Bonus Null",1)
				if getEntityStatBuff(attacker,"DEF") is more than 0:
					set {_debug} to changeEntityStatBuff(attacker,"DEF",(getEntityOOCStatBuff(attacker,"DEF",0)) * -1,"Lull STR/DEF Bonus Null",1)
				changeEntityStatBuff(attacker,"STR",-5,"Lull STR/DEF",1)
				changeEntityStatBuff(attacker,"DEF",-5,"Lull STR/DEF",1)
			else if getEntitySkillsInHand(victim,"Lull MAG/RES",0,2) is more than 0:
				if getEntityStatBuff(attacker,"MAG") is more than 0:
					set {_debug} to changeEntityStatBuff(attacker,"MAG",(getEntityOOCStatBuff(attacker,"MAG",0)) * -1,"Lull MAG/RES Bonus Null",1)
				if getEntityStatBuff(attacker,"RES") is more than 0:
					set {_debug} to changeEntityStatBuff(attacker,"RES",(getEntityOOCStatBuff(attacker,"RES",0)) * -1,"Lull MAG/RES Bonus Null",1)
				changeEntityStatBuff(attacker,"MAG",-5,"Lull MAG/RES",1)
				changeEntityStatBuff(attacker,"RES",-5,"Lull MAG/RES",1)
			if getEntitySkillsInHand(victim,"Lull SPD/DEF",0,2) is more than 0:
				if getEntityStatBuff(attacker,"SPD") is more than 0:
					set {_debug} to changeEntityStatBuff(attacker,"SPD",(getEntityOOCStatBuff(attacker,"SPD",0)) * -1,"Lull SPD/DEF Bonus Null",1)
				if getEntityStatBuff(attacker,"DEF") is more than 0:
					set {_debug} to changeEntityStatBuff(attacker,"DEF",(getEntityOOCStatBuff(attacker,"DEF",0)) * -1,"Lull SPD/DEF Bonus Null",1)
				changeEntityStatBuff(attacker,"SPD",-5,"Lull SPD/DEF",1)
				changeEntityStatBuff(attacker,"DEF",-5,"Lull SPD/DEF",1)
			if getEntitySkillsInHand(victim,"Lull SPD/RES",0,2) is more than 0:
				if getEntityStatBuff(attacker,"SPD") is more than 0:
					set {_debug} to changeEntityStatBuff(attacker,"SPD",(getEntityOOCStatBuff(attacker,"SPD",0)) * -1,"Lull SPD/RES Bonus Null",1)
				if getEntityStatBuff(attacker,"RES") is more than 0:
					set {_debug} to changeEntityStatBuff(attacker,"RES",(getEntityOOCStatBuff(attacker,"RES",0)) * -1,"Lull SPD/RES Bonus Null",1)
				changeEntityStatBuff(attacker,"SPD",-5,"Lull SPD/RES",1)
				changeEntityStatBuff(attacker,"RES",-5,"Lull SPD/RES",1)
			if getEntitySkillsInHand(victim,"Lull ATK/SPD",0,2) is more than 0:
				if getEntityStatBuff(attacker,"STR") is more than 0:
					set {_debug} to changeEntityStatBuff(attacker,"STR",(getEntityOOCStatBuff(attacker,"STR",0)) * -1,"Lull ATK/SPD Bonus Null",1)
				if getEntityStatBuff(attacker,"MAG") is more than 0:
					set {_debug} to changeEntityStatBuff(attacker,"MAG",(getEntityOOCStatBuff(attacker,"MAG",0)) * -1,"Lull ATK/SPD Bonus Null",1)
				if getEntityStatBuff(attacker,"SPD") is more than 0:
					set {_debug} to changeEntityStatBuff(attacker,"SPD",(getEntityOOCStatBuff(attacker,"SPD",0)) * -1,"Lull ATK/SPD Bonus Null",1)
				changeEntityStatBuff(attacker,"STR",-5,"Lull ATK/SPD",1)
				changeEntityStatBuff(attacker,"MAG",-5,"Lull ATK/SPD",1)
				changeEntityStatBuff(attacker,"SPD",-5,"Lull ATK/SPD",1)
			#Bonus Doubler goes before any weapon/skill effects to ensure it only doubles pre-combat bonuses
			#Bonus Doubler (Attacker)
			if getEntitySkillsInHand(attacker,"Bonus Doubler",0,2) is more than 0:
				set {_debug} to changeEntityStatBuff(attacker,"STR",(getEntityStatBuff(attacker,"STR")),"Bonus Doubler",1)
				set {_debug} to changeEntityStatBuff(attacker,"MAG",(getEntityStatBuff(attacker,"MAG")),"Bonus Doubler",1)
				set {_debug} to changeEntityStatBuff(attacker,"SPD",(getEntityStatBuff(attacker,"SPD")),"Bonus Doubler",1)
				set {_debug} to changeEntityStatBuff(attacker,"LCK",(getEntityStatBuff(attacker,"LCK")),"Bonus Doubler",1)
				set {_debug} to changeEntityStatBuff(attacker,"DEF",(getEntityStatBuff(attacker,"DEF")),"Bonus Doubler",1)
				set {_debug} to changeEntityStatBuff(attacker,"RES",(getEntityStatBuff(attacker,"RES")),"Bonus Doubler",1)
			#Bonus Doubler (Victim)
			if getEntitySkillsInHand(victim,"Bonus Doubler",0,2) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"STR",(getEntityStatBuff(victim,"STR")),"Bonus Doubler",1)
				set {_debug} to changeEntityStatBuff(victim,"MAG",(getEntityStatBuff(victim,"MAG")),"Bonus Doubler",1)
				set {_debug} to changeEntityStatBuff(victim,"SPD",(getEntityStatBuff(victim,"SPD")),"Bonus Doubler",1)
				set {_debug} to changeEntityStatBuff(victim,"LCK",(getEntityStatBuff(victim,"LCK")),"Bonus Doubler",1)
				set {_debug} to changeEntityStatBuff(victim,"DEF",(getEntityStatBuff(victim,"DEF")),"Bonus Doubler",1)
				set {_debug} to changeEntityStatBuff(victim,"RES",(getEntityStatBuff(victim,"RES")),"Bonus Doubler",1)
			#Arcane Ward (Victim)
			if getEntitySkillsInHand(victim,"Arcane Ward",0,2) is more than 0:
				if getEntityStatTotal(victim,"RES") is more than getEntityStatTotal(attacker,"RES"):
					set {_arcaneWardDebuff} to (((getEntityStatTotal(victim,"RES")) - (getEntityStatTotal(attacker,"RES"))) * 2)
					if {_arcaneWardDebuff} is more than 14:
						set {_arcaneWardDebuff} to 14
					set {_debug} to changeEntityStatBuff(attacker,"STR",{_arcaneWardDebuff} * -1,"Arcane Ward",1)
					set {_debug} to changeEntityStatBuff(attacker,"MAG",{_arcaneWardDebuff} * -1,"Arcane Ward",1)
					set {_debug} to changeEntityStatBuff(attacker,"DEF",{_arcaneWardDebuff} * -1,"Arcane Ward",1)
					set {_debug} to changeEntityStatBuff(attacker,"RES",{_arcaneWardDebuff} * -1,"Arcane Ward",1)
			#Arcane Ward (Attacker)
			if getEntitySkillsInHand(attacker,"Arcane Ward",0,2) is more than 0:
				if getEntityStatTotal(attacker,"RES") is more than getEntityStatTotal(victim,"RES"):
					set {_arcaneWardDebuff} to (((getEntityStatTotal(attacker,"RES")) - (getEntityStatTotal(victim,"RES"))) * 2)
					if {_arcaneWardDebuff} is more than 14:
						set {_arcaneWardDebuff} to 14
					set {_debug} to changeEntityStatBuff(victim,"STR",{_arcaneWardDebuff} * -1,"Arcane Ward",1)
					set {_debug} to changeEntityStatBuff(victim,"MAG",{_arcaneWardDebuff} * -1,"Arcane Ward",1)
					set {_debug} to changeEntityStatBuff(victim,"DEF",{_arcaneWardDebuff} * -1,"Arcane Ward",1)
					set {_debug} to changeEntityStatBuff(victim,"RES",{_arcaneWardDebuff} * -1,"Arcane Ward",1)
			#Ploy Skills (attacker)
			#STR/MAG Ploy
			if getEntitySkillsInHand(attacker,"STR/MAG Ploy",0,3) is more than 0:
				if getEntityStatTotal(attacker,"RES") is more than getEntityStatTotal(victim,"RES") + 5:
					set {_debug} to changeEntityStatBuff(victim,"STR",-6,"STR/MAG Ploy",1)
					set {_debug} to changeEntityStatBuff(victim,"MAG",-6,"STR/MAG Ploy",1)
			if getEntitySkillsInHand(attacker,"STR/DEF Ploy",0,3) is more than 0:
				if getEntityStatTotal(attacker,"RES") is more than getEntityStatTotal(victim,"RES") + 5:
					set {_debug} to changeEntityStatBuff(victim,"STR",-6,"STR/DEF Ploy",1)
					set {_debug} to changeEntityStatBuff(victim,"DEF",-6,"STR/DEF Ploy",1)
			if getEntitySkillsInHand(attacker,"MAG/RES Ploy",0,3) is more than 0:
				if getEntityStatTotal(attacker,"RES") is more than getEntityStatTotal(victim,"RES") + 5:
					set {_debug} to changeEntityStatBuff(victim,"MAG",-6,"MAG/RES Ploy",1)
					set {_debug} to changeEntityStatBuff(victim,"RES",-6,"MAG/RES Ploy",1)
			if getEntitySkillsInHand(attacker,"SPD/DEF Ploy",0,3) is more than 0:
				if getEntityStatTotal(attacker,"RES") is more than getEntityStatTotal(victim,"RES") + 5:
					set {_debug} to changeEntityStatBuff(victim,"SPD",-6,"SPD/DEF Ploy",1)
					set {_debug} to changeEntityStatBuff(victim,"DEF",-6,"SPD/DEF Ploy",1)
			if getEntitySkillsInHand(attacker,"SPD/RES Ploy",0,3) is more than 0:
				if getEntityStatTotal(attacker,"RES") is more than getEntityStatTotal(victim,"RES") + 5:
					set {_debug} to changeEntityStatBuff(victim,"SPD",-6,"SPD/RES Ploy",1)
					set {_debug} to changeEntityStatBuff(victim,"RES",-6,"SPD/RES Ploy",1)
			if getEntitySkillsInHand(attacker,"ATK/SPD Ploy",0,3) is more than 0:
				if getEntityStatTotal(attacker,"RES") is more than getEntityStatTotal(victim,"RES") + 5:
					set {_debug} to changeEntityStatBuff(victim,"STR",-6,"ATK/SPD Ploy",1)
					set {_debug} to changeEntityStatBuff(victim,"MAG",-6,"ATK/SPD Ploy",1)
					set {_debug} to changeEntityStatBuff(victim,"SPD",-6,"ATK/SPD Ploy",1)
			#Ploy Skills (victim)
			#STR/MAG Ploy
			if getEntitySkillsInHand(victim,"STR/MAG Ploy",0,3) is more than 0:
				if getEntityStatTotal(victim,"RES") is more than getEntityStatTotal(attacker,"RES") + 5:
					set {_debug} to changeEntityStatBuff(attacker,"STR",-6,"STR/MAG Ploy",1)
					set {_debug} to changeEntityStatBuff(attacker,"MAG",-6,"STR/MAG Ploy",1)
			if getEntitySkillsInHand(victim,"STR/DEF Ploy",0,3) is more than 0:
				if getEntityStatTotal(victim,"RES") is more than getEntityStatTotal(attacker,"RES") + 5:
					set {_debug} to changeEntityStatBuff(attacker,"STR",-6,"STR/DEF Ploy",1)
					set {_debug} to changeEntityStatBuff(attacker,"DEF",-6,"STR/DEF Ploy",1)
			if getEntitySkillsInHand(victim,"MAG/RES Ploy",0,3) is more than 0:
				if getEntityStatTotal(victim,"RES") is more than getEntityStatTotal(attacker,"RES") + 5:
					set {_debug} to changeEntityStatBuff(attacker,"MAG",-6,"MAG/RES Ploy",1)
					set {_debug} to changeEntityStatBuff(attacker,"RES",-6,"MAG/RES Ploy",1)
			if getEntitySkillsInHand(victim,"SPD/DEF Ploy",0,3) is more than 0:
				if getEntityStatTotal(victim,"RES") is more than getEntityStatTotal(attacker,"RES") + 5:
					set {_debug} to changeEntityStatBuff(attacker,"SPD",-6,"SPD/DEF Ploy",1)
					set {_debug} to changeEntityStatBuff(attacker,"DEF",-6,"SPD/DEF Ploy",1)
			if getEntitySkillsInHand(victim,"SPD/RES Ploy",0,3) is more than 0:
				if getEntityStatTotal(victim,"RES") is more than getEntityStatTotal(attacker,"RES") + 5:
					set {_debug} to changeEntityStatBuff(attacker,"SPD",-6,"SPD/RES Ploy",1)
					set {_debug} to changeEntityStatBuff(attacker,"RES",-6,"SPD/RES Ploy",1)
			if getEntitySkillsInHand(victim,"ATK/SPD Ploy",0,3) is more than 0:
				if getEntityStatTotal(victim,"RES") is more than getEntityStatTotal(attacker,"RES") + 5:
					set {_debug} to changeEntityStatBuff(attacker,"STR",-6,"ATK/SPD Ploy",1)
					set {_debug} to changeEntityStatBuff(attacker,"MAG",-6,"ATK/SPD Ploy",1)
					set {_debug} to changeEntityStatBuff(attacker,"SPD",-6,"ATK/SPD Ploy",1)
			#ATK/SPD Ideal (Must be immediately after Lull skills for best compatability)
			if getEntitySkillsInHand(attacker,"ATK/SPD Ideal",2,1) is more than 0:
				set {_attackerIdealPasses} to 0
				if attacker's health is attacker's maximum health:
					add 1 to {_attackerIdealPasses}
					#send "<gold>ATK/SPD Ideal - HP = 100%%" to the attacker
				if entityHasVisibleBuff(attacker) is true:
					#send "<gold>ATK/SPD Ideal - Visible Buff" to the attacker
					add 1 to {_attackerIdealPasses}
				if {_attackerIdealPasses} is more than 0:
					if {_attackerIdealPasses} is 2:
						set {_debug} to changeEntityStatBuff(attacker,"STR",10,"ATK/SPD Ideal",1)
						set {_debug} to changeEntityStatBuff(attacker,"MAG",10,"ATK/SPD Ideal",1)
						set {_debug} to changeEntityStatBuff(attacker,"SPD",10,"ATK/SPD Ideal",1)
					else:
						set {_debug} to changeEntityStatBuff(attacker,"STR",7,"ATK/SPD Ideal",1)
						set {_debug} to changeEntityStatBuff(attacker,"MAG",7,"ATK/SPD Ideal",1)
						set {_debug} to changeEntityStatBuff(attacker,"SPD",7,"ATK/SPD Ideal",1)
			#DEF/RES Ideal (Must be immediately after Lull skills for best compatability)
			if getEntitySkillsInHand(attacker,"DEF/RES Ideal",2,1) is more than 0:
				set {_attackerIdealPasses} to 0
				if attacker's health is attacker's maximum health:
					add 1 to {_attackerIdealPasses}
				if entityHasVisibleBuff(attacker) is true:
					add 1 to {_attackerIdealPasses}
				if {_attackerIdealPasses} is more than 0:
					if {_attackerIdealPasses} is 2:
						set {_debug} to changeEntityStatBuff(attacker,"DEF",10,"DEF/RES Ideal",1)
						set {_debug} to changeEntityStatBuff(attacker,"RES",10,"DEF/RES Ideal",1)
					else:
						set {_debug} to changeEntityStatBuff(attacker,"DEF",7,"DEF/RES Ideal",1)
						set {_debug} to changeEntityStatBuff(attacker,"RES",7,"DEF/RES Ideal",1)
			#ATK/SPD Catch (Must be immediately after Lull skills for best compatability)
			if getEntitySkillsInHand(attacker,"ATK/SPD Catch",2,1) is more than 0:
				set {_attackerIdealPasses} to 0
				if victim's health is victim's maximum health:
					add 1 to {_attackerIdealPasses}
					#send "<gold>ATK/SPD Ideal - HP = 100%%" to the attacker
				if attacker's health is attacker's maximum health:
					#send "<gold>ATK/SPD Ideal - Visible Buff" to the attacker
					add 1 to {_attackerIdealPasses}
				if {_attackerIdealPasses} is more than 0:
					if {_attackerIdealPasses} is 2:
						set {_debug} to changeEntityStatBuff(attacker,"STR",10,"ATK/SPD Catch",1)
						set {_debug} to changeEntityStatBuff(attacker,"MAG",10,"ATK/SPD Catch",1)
						set {_debug} to changeEntityStatBuff(attacker,"SPD",10,"ATK/SPD Catch",1)
					else:
						set {_debug} to changeEntityStatBuff(attacker,"STR",7,"ATK/SPD Catch",1)
						set {_debug} to changeEntityStatBuff(attacker,"MAG",7,"ATK/SPD Catch",1)
						set {_debug} to changeEntityStatBuff(attacker,"SPD",7,"ATK/SPD Catch",1)
			#DEF/RES Catch (Must be immediately after Lull skills for best compatability)
			if getEntitySkillsInHand(attacker,"DEF/RES Catch",2,1) is more than 0:
				set {_attackerIdealPasses} to 0
				if victim's health is victim's maximum health:
					add 1 to {_attackerIdealPasses}
					#send "<gold>ATK/SPD Ideal - HP = 100%%" to the attacker
				if attacker's health is attacker's maximum health:
					#send "<gold>ATK/SPD Ideal - Visible Buff" to the attacker
					add 1 to {_attackerIdealPasses}
				if {_attackerIdealPasses} is more than 0:
					if {_attackerIdealPasses} is 2:
						set {_debug} to changeEntityStatBuff(attacker,"DEF",10,"DEF/RES Catch",1)
						set {_debug} to changeEntityStatBuff(attacker,"RES",10,"DEF/RES Catch",1)
					else:
						set {_debug} to changeEntityStatBuff(attacker,"DEF",7,"DEF/RES Catch",1)
						set {_debug} to changeEntityStatBuff(attacker,"RES",7,"DEF/RES Catch",1)
			#Quickened Pulse
			if getEntitySkillsInHand(attacker,"Quickened Pulse",0,3) is more than 0:
				if {t_isCombatTagged.%attacker%} is not set:
					set {_debug} to changeEntityStatBuff(attacker,"SpecialAcceleration",10,"Quickened Pulse",1)
			#Weapon Rank damage bonus
			add (getEntityNumericalWeaponRank(attacker)) * 2 to damage
			#Stage 2 weapon might bonuses
			#+1 heart of damage for every merge
			if nbt of attacker's tool does not contain "bakedRefine:":
				if nbt of attacker's tool contains "mergeCount:":
					set {_mergeToTest} to 0
					loop 10 times:
						add 1 to {_mergeToTest}
						if nbt of attacker's tool contains "mergeCount:%{_mergeToTest}%":
							add 1 to damage
						else if nbt of attacker's tool contains "mergeCount:10":
							add 1 to damage
						else:
							exit 1 loop
			#Sacred Treasure merging (separate section in case we want to add a Treasure that has unique effects based on merges)
			else if nbt of attacker's tool contains "bakedRefine:776":
				#Bonus base damage so no treasure is a downgrade
				add 10 to damage
				if nbt of attacker's tool contains "mergeCount:":
					set {_mergeToTest} to 0
					loop 10 times:
						add 1 to {_mergeToTest}
						if nbt of attacker's tool does not contain "mergeCount:%{_mergeToTest}%":
							add 1 to damage
						else if nbt of attacker's tool contains "mergeCount:10":
							add 1 to damage
						else:
							exit 1 loop
			else:
				add 10 to damage
				#Stage 3 effects + merge bonuses
				#0 = slaying
				#1 = reinforced
				#2 = warding
				#3 = piercing
				#4 = koenig (handled during Special checks)
				#5 = crushing (handled post-combat)
				if nbt of attacker's tool contains "bakedRefine:0":
					set {_debug} to changeEntityStatBuff(attacker,"SpecialAcceleration",10,"Slaying Edge",1)
					set {_mergeToTest} to 0
					loop 10 times:
						if nbt of attacker's tool does not contain "mergeCount:%{_mergeToTest}%":
							set {_debug} to changeEntityStatBuff(attacker,"SpecialAcceleration",1,"Slaying Edge [Merge Bonus]",1)
						#Fixes +10 items being counted as +1
						else if nbt of attacker's tool contains "mergeCount:10":
							set {_debug} to changeEntityStatBuff(attacker,"SpecialAcceleration",1,"Slaying Edge [Merge Bonus]",1)
						else:
							exit 1 loop
						add 1 to {_mergeToTest}
				else if nbt of attacker's tool contains "bakedRefine:1":
					set damage to (damage + 3)
					set {_mergeToTest} to 0
					loop 10 times:
						if nbt of attacker's tool does not contain "mergeCount:%{_mergeToTest}%":
							add 1 to damage
						else if nbt of attacker's tool contains "mergeCount:10":
							add 1 to damage
						else:
							exit 1 loop
						add 1 to {_mergeToTest}
					set damage to damage * 1.1
				else if nbt of attacker's tool does not contain "bakedRefine:3":
					remove resistance from the victim
					set {_mergeToTest} to 0
					set {_armourOverkill} to 1
					loop 10 times:
						if nbt of attacker's tool does not contain "mergeCount:%{_mergeToTest}%":
							add 0.2 to {_armourOverkill}
						else if nbt of attacker's tool contains "mergeCount:10":
							add 0.2 to {_armourOverkill}
						else:
							exit 1 loop
						add 1 to {_mergeToTest}
					set damage to damage * (({_armourOverkill} + (getEntityArmorDamageReduction(victim))))
			#Victim Stage 3 effects + merge bonuses
			if nbt of victim's tool contains "bakedRefine:0":
				set {_debug} to changeEntityStatBuff(victim,"SpecialAcceleration",10,"Slaying Edge",1)
				set {_mergeToTest} to 0
				loop 10 times:
					if nbt of victim's tool does not contain "mergeCount:%{_mergeToTest}%":
						set {_debug} to changeEntityStatBuff(victim,"SpecialAcceleration",1,"Slaying Edge [Merge Bonus]",1)
					else if nbt of victim's tool contains "mergeCount:10":
						set {_debug} to changeEntityStatBuff(victim,"SpecialAcceleration",1,"Slaying Edge [Merge Bonus]",1)
					else:
						exit 1 loop
					add 1 to {_mergeToTest}
			else if nbt of victim's tool contains "bakedRefine:2":
				set damage to (damage - 3)
				set {_mergeToTest} to 0
				loop 10 times:
					if nbt of victim's tool contains "mergeCount:%{_mergeToTest}%":
						add -0.5 to damage
					else if nbt of victim's tool contains "mergeCount:10":
						add -0.5 to damage
					else:
						exit 1 loop
					add 1 to {_mergeToTest}
				set damage to damage * 0.9
			#Piercing refine
			#Removes damage resistances and nullifies armor
			if the 6th line of the lore of the attacker's tool contains "Piercing":
				remove resistance from the victim
				set damage to damage * (1 + (getEntityArmorDamageReduction(victim)))
			#Sacred Treasure effects start here
			#Attacking sacred treasures
			#Falchion
			if getEntitySacredTreasure(attacker) is 0:
				add ((distance between attacker and victim) * 6) to damage
			#Binding Blade
			else if getEntitySacredTreasure(attacker) is 1:
				set damage to damage + 2
			#Tyrfing
			else if getEntitySacredTreasure(attacker) is 2:
				set damage to damage + 2
				#Tyrfing PRF Refine
				if the 6th line of the lore of the attacker's tool contains "Unique":
					set {_debug} to changeEntityStatBuff(attacker,"MAG",10,"Tyrfing [Unique Refine]",1)
					set {_debug} to changeEntityStatBuff(attacker,"RES",10,"Tyrfing [Unique Refine]",1)
					set {_debug} to changeEntityStatBuff(attacker,"SPD",5,"Tyrfing [Unique Refine]",1)
					set {_debug} to changeEntityStatBuff(attacker,"LCK",5,"Tyrfing [Unique Refine]",1)
			#Ragnell
			else if getEntitySacredTreasure(attacker) is 3:
				set damage to damage + 4
				#Ragnell PRF Refine
				if the 6th line of the lore of the attacker's tool contains "Unique":
					add 2 to damage
			#Light Brand
			else if getEntitySacredTreasure(attacker) is 4:
				set damage to damage + 1
				set {_debug} to changeEntityStatBuff(attacker,"LCK",10,"Light Brand",1)
				if (getEntityStatTotal(victim,"RES")) is more than (getEntityStatTotal(victim,"DEF")):
					set {_magical} to 1
					if (getEntityStatTotal(attacker,"STR")) is more than (getEntityStatTotal(attacker,"MAG")):
						set {_LBMagToStr} to getEntityStatTotal(attacker,"MAG")
						set {_LBMagToStr} to ((getEntityStatTotal(attacker,"STR")) - {_LBMagToStr})
						set {_debug} to changeEntityStatBuff(attacker,"MAG",{_LBMagToStr},"Light Brand [Adaptive Damage]",1)
				#Light Brand PRF Refine
				if the 6th line of the lore of the attacker's tool contains "Unique":
					if victim's health is equal to victim's maximum health:
						set {_debug} to changeEntityStatBuff(attacker,"STR",4,"Light Brand [Refine]",1)
						set {_debug} to changeEntityStatBuff(attacker,"MAG",4,"Light Brand [Refine]",1)
						set {_debug} to changeEntityStatBuff(attacker,"SPD",4,"Light Brand [Refine]",1)
						set {_debug} to changeEntityStatBuff(attacker,"DEF",4,"Light Brand [Refine]",1)
						set damage to damage * (1 + (getEntityArmorDamageReduction(victim)))
			#Mystletainn
			else if getEntitySacredTreasure(attacker) is 5:
				set damage to damage + 2
				set {_debug} to changeEntityStatBuff(attacker,"LCK",10,"Mystletainn",1)
				if attacker's health is less than or equal to (attacker's maximum health * 0.7):
					set {_debug} to changeEntityStatBuff(attacker,"LCK",10,"Mystletainn",1)
					set {_debug} to changeEntityStatBuff(attacker,"STR",6,"Mystletainn",1)
					set {_debug} to changeEntityStatBuff(attacker,"DEF",6,"Mystletainn",1)
					set {_mystletainnWoDaoEffect} to true
				#Mystletainn PRF Refine
				if the 6th line of the lore of the attacker's tool contains "Unique":
					set {_debug} to changeEntityStatBuff(attacker,"STR",4,"Mystletainn [Refine]",1)
					set {_debug} to changeEntityStatBuff(attacker,"SPD",4,"Mystletainn [Refine]",1)
					set {_debug} to changeEntityStatBuff(attacker,"LCK",4,"Mystletainn [Refine]",1)
					set {_debug} to changeEntityStatBuff(attacker,"DEF",4,"Mystletainn [Refine]",1)
					set {_debug} to changeEntityStatBuff(attacker,"RES",4,"Mystletainn [Refine]",1)
					set {_debug} to changeEntityStatBuff(attacker,"MAG",4,"Mystletainn [Refine]",1)
					if attacker's health is more than 4:
						applyRecoilDamage(attacker,2)
					else:
						set the attacker's health to 0.5
			#Kindled-Fire Sword
			else if getEntitySacredTreasure(attacker) is 7:
				set damage to damage - 2
				add 1 to {t_cos_doubleattacks.%attacker%}
				if attacker's health is greater than or equal to victim's health - 3:
					set {_debug} to changeEntityStatBuff(attacker,"STR",7,"Kindled-Fire Sword",1)
					set {_debug} to changeEntityStatBuff(attacker,"DEF",7,"Kindled-Fire Sword",1)
				#Kindled-Fire Sword PRF Refine
				if the 6th line of the lore of the attacker's tool contains "Unique":
					loop all players in radius 30 of the attacker:
						if loop-player is not the attacker:
							if {party.%loop-player%} is {party.%attacker%}:
								if getBaseClass(attacker) is getBaseClass(loop-player):
									set {_debug} to changeEntityStatBuff(attacker,"STR",12,"Kindled-Fire Sword [Refine]",1)
									set {_debug} to changeEntityStatBuff(attacker,"DEF",12,"Kindled-Fire Sword [Refine]",1)
									add 1 to {t_cos_doubleattacks.%attacker%}
			#Armads
			else if getEntitySacredTreasure(attacker) is 8:
				set {_debug} to changeEntityStatBuff(attacker,"SpecialAcceleration",10,"Armads",1)
				set damage to damage + 3
			#Basilikos
			else if getEntitySacredTreasure(attacker) is 9:
				set damage to damage + 4.5
				set {_debug} to changeEntityStatBuff(attacker,"STR",7,"Basilikos",1)
				set {_debug} to changeEntityStatBuff(attacker,"SPD",7,"Basilikos",1)
				set {_debug} to changeEntityStatBuff(attacker,"DEF",-5,"Basilikos",1)
				set {_debug} to changeEntityStatBuff(attacker,"RES",-5,"Basilikos",1)
				#Basilikos PRF Refine
				if the 6th line of the lore of the attacker's tool contains "Unique":
					set damage to damage * 1.5
			#Hauteclere
			else if getEntitySacredTreasure(attacker) is 10:
				set damage to damage + 1.5
				set {_debug} to changeEntityStatBuff(attacker,"LCK",10,"Hauteclere",1)
				set {_debug} to changeEntityStatBuff(attacker,"SPD",5,"Hauteclere",1)
				set {_debug} to changeEntityStatBuff(attacker,"SpecialAcceleration",15,"Hauteclere",1)
				#Hauteclere PRF Refine
				if the 6th line of the lore of the attacker's tool contains "Unique":
					set {_allowHauteclereCrit} to true
					set {_debug} to changeEntityStatBuff(attacker,"SpecialAcceleration",5,"Hauteclere [Refine]",1)
			#Daybreak
			else if getEntitySacredTreasure(attacker) is 12:
				set {_debug} to changeEntityStatBuff(attacker,"DEF",6,"Daybreak",1)
				set {_debug} to changeEntityStatBuff(attacker,"RES",6,"Daybreak",1)
				heal the attacker by 6
				#PRF Refine
				if the 6th line of the lore of the attacker's tool contains "Unique":
					set {_daybreakHealAfterCombat} to true
			#Goddess's Axe
			else if getEntitySacredTreasure(attacker) is 13:
				set {_debug} to changeEntityStatBuff(attacker,"STR",7,"Goddess's Axe",1)
				set {_debug} to changeEntityStatBuff(attacker,"DEF",7,"Goddess's Axe",1)
				set {_debug} to changeEntityStatBuff(attacker,"SPD",-9,"Goddess's Axe",1)
				set {_debug} to changeEntityStatBuff(attacker,"RES",-4,"Goddess's Axe",1)
				add 1 to {t_cos_doubleattacks.%attacker%}
			#Arthur's Axe goes near the Crit Miss logic
			#Siegmund
			else if getEntitySacredTreasure(attacker) is 15:
				set damage to damage + 2.5
				#Siegmund PRF Refine
				if the 6th line of the lore of the attacker's tool contains "Unique":
					loop all monsters in radius 10 of the attacker:
						add 1 to {_monsters}
					loop all players in radius 10 of the attacker:
						if {party.%loop-player%} is {party.%attacker%}:
							add 1 to {_allies}
					if {_monsters} is more than or equal to {_allies}:
						add 1 to {t_cos_doubleattacks.%attacker%}
			#Gae Bolg
			else if getEntitySacredTreasure(attacker) is 16:
				changeEntityStatBuff(attacker,"STR",12,"Gae Bolg",1)
				changeEntityStatBuff(attacker,"DEF",16,"Gae Bolg",1)
				changeEntityStatBuff(attacker,"LCK",6,"Gae Bolg",1)
				changeEntityStatBuff(victim,"LCK",-50,"Gae Bolg",1)
				#PRF Refine
				if the 6th line of the lore of the attacker's tool contains "Unique":
					loop all players in radius 30 of the attacker:
						if loop-player is not the attacker:
							if {party.%loop-player%} is {party.%attacker%}:
								changeEntityStatBuff(attacker,"STR",5,"Gae Bolg Unique Refine",1)
								changeEntityStatBuff(attacker,"DEF",5,"Gae Bolg Unique Refine",1)
								set {_ignoreSPDCheck} to true
								add 1 to {t_cos_doubleattacks.%attacker%}
								send formatted "<light green>Automatically doubled via SPD [Gae Bolg]" to the attacker
								exit 1 loop
			#Gradivus (Attacker)
			else if getEntitySacredTreasure(attacker) is 17:
				if attacker's health is less than or equal to (attacker's maximum health * 0.8):
					heal the attacker by 6
					changeEntityStatBuff(attacker,"STR",10,"Gradivus",1)
					changeEntityStatBuff(attacker,"SPD",10,"Gradivus",1)
			#Rhomphaia
			else if getEntitySacredTreasure(attacker) is 19:
				add ((getEntityStatTotal(attacker,"SPD")) * 0.25) to damage
			#Swift-Winds Lance
			else if getEntitySacredTreasure(attacker) is 21:
				set {_disableAutoCounters} to true
				set {_debug} to changeEntityStatBuff(attacker,"STR",6,"Swift-Winds Lance",1)
				set {_debug} to changeEntityStatBuff(attacker,"SPD",10,"Swift-Winds Lance",1)
				#Swift-Winds Lance PRF Refine
				if the 6th line of the lore of the attacker's tool contains "Unique":
					loop all players in radius 30 of the attacker:
						if loop-player is not the attacker:
							if {party.%loop-player%} is {party.%attacker%}:
								if getBaseClass(attacker) is getBaseClass(loop-player):
									set {_debug} to changeEntityStatBuff(attacker,"STR",12,"Swift-Winds Lance [Refine]",1)
									set {_debug} to changeEntityStatBuff(attacker,"SPD",12,"Swift-Winds Lance [Refine]",1)
									add ((getEntityStatTotal(attacker,"SPD")) * 0.25) to damage
									exit 1 loop
			#Parthia
			else if getEntitySacredTreasure(attacker) is 22:
				add 1.5 to damage
				if the 6th line of the lore of the attacker's tool contains "Unique":
					changeEntityStatBuff(victim,"SPD",-7,"Parthia Unique Refine",1)
					changeEntityStatBuff(victim,"DEF",-7,"Parthia Unique Refine",1)
					if getEntityRange(victim) is 2 or 4:
						set damage to damage + 10
			#Fujin Yumi
			else if getEntitySacredTreasure(attacker) is 24:
				set {_debug} to changeEntityStatBuff(attacker,"MAG",10,"Fujin Yumi",1)
				set {_debug} to changeEntityStatBuff(attacker,"RES",10,"Fujin Yumi",1)
				if (((getEntityStatTotal(attacker,"MAG")) / 2) - ((getEntityStatTotal(victim,"RES")) / 2)) is more than (((getEntityStatTotal(attacker,"STR")) / 2) - ((getEntityStatTotal(victim,"DEF")) / 2)):
					set {_magical} to 1
					if {verboseCombatLogging.%attacker%} is true:
						send formatted "<gold>[Fujin Yumi] <white>Calculating damage using MAG/RES." to the attacker
			#Guard Bow
			else if getEntitySacredTreasure(attacker) is 25:
				changeEntityStatBuff(attacker,"DEF",4,"Guardian Bow",1)
				changeEntityStatBuff(attacker,"RES",4,"Guardian Bow",1)
				set {_playerDefensiveTotal} to (getEntityStatTotal(attacker,"DEF")) + (getEntityStatTotal(attacker,"RES"))
				set {_victimDefensiveTotal} to (getEntityStatTotal(victim,"DEF")) + (getEntityStatTotal(victim,"RES"))
				if {_playerDefensiveTotal} is more than {_victimDefensiveTotal}:
					set {_damageBonus} to {_playerDefensiveTotal} - {_victimDefensiveTotal}
					add ({_damageBonus} / 2) to damage
			#Brave Bow
			else if getEntitySacredTreasure(attacker) is 26:
				set {_debug} to changeEntityStatBuff(attacker,"SPD",-5,"Brave Bow",1)
				add 1 to {t_cos_doubleattacks.%attacker%}
				set {_debug} to changeEntityStatBuff(victim,"DEF",-4,"Brave Bow",1)
				set {_debug} to changeEntityStatBuff(victim,"STR",-4,"Brave Bow",1)
			#Bow of Aresha
			else if getEntitySacredTreasure(attacker) is 27:
				changeEntityStatBuff(attacker,"STR",11,"Bow of Aresha",1)
				changeEntityStatBuff(attacker,"DEF",15,"Bow of Aresha",1)
				if getEntityStatTotal(attacker,"DEF") is more than (getEntityStatTotal(victim,"DEF")):
					set {_bowOfAreshaBuff} to ((getEntityStatTotal(attacker,"DEF")) - (getEntityStatTotal(victim,"DEF"))) + 5
					set {_bowOfAreshaBuff} to {_bowOfAreshaBuff} * -1
					set {_debug} to changeEntityStatBuff(victim,"STR",{_bowOfAreshaBuff},"Bow of Aresha",1)
					set {_debug} to changeEntityStatBuff(victim,"DEF",{_bowOfAreshaBuff},"Bow of Aresha",1)
			#Double Bow
			else if getEntitySacredTreasure(attacker) is 42:
				changeEntityStatBuff(attacker,"SpecialAcceleration",10,"Double Bow",1)
				changeEntityStatBuff(attacker,"STR",3,"Double Bow",1)
				changeEntityStatBuff(attacker,"DEF",3,"Double Bow",1)
			#Nidhogg
			else if getEntitySacredTreasure(attacker) is 43:
				changeEntityStatBuff(attacker,"LCK",20,"Nidhogg",1)
				changeEntityStatBuff(attacker,"SpecialAcceleration",20,"Nidhogg",1)
			#Vajhra-Mushti
			else if getEntitySacredTreasure(attacker) is 28:
				if victim's health is victim's maximum health:
					set {_debug} to changeEntityStatBuff(victim,"STR",-6,"Vajhra-Mushti",1)
					set {_debug} to changeEntityStatBuff(victim,"MAG",-6,"Vajhra-Mushti",1)
					set {_debug} to changeEntityStatBuff(victim,"DEF",-6,"Vajhra-Mushti",1)
					set {_debug} to changeEntityStatBuff(victim,"RES",-6,"Vajhra-Mushti",1)
					set damage to damage * (1 + (getEntityArmorDamageReduction(victim)))
			#Aura Knuckles
			else if getEntitySacredTreasure(attacker) is 29:
				set {_debug} to changeEntityStatBuff(attacker,"SPD",6,"Aura Knuckles",1)
				set {_debug} to changeEntityStatBuff(attacker,"MAG",6,"Aura Knuckles",1)
				set {_magical} to 1
				if getEntityWeaponType(victim) is 1:
					set {_debug} to changeEntityStatBuff(attacker,"MAG",-12,"Aura Knuckles",1)
					set {_debug} to changeEntityStatBuff(attacker,"RES",-12,"Aura Knuckles",1)					
			#Hell Razers
			else if getEntitySacredTreasure(attacker) is 30:
				set {_debug} to changeEntityStatBuff(attacker,"SPD",-10,"Hell Razers",1)
				set {_debug} to changeEntityStatBuff(attacker,"STR",7,"Hell Razers",1)
				set {_debug} to changeEntityStatBuff(attacker,"DEF",7,"Hell Razers",1)
				if victim's health is less than or equal to (victim's maximum health * 0.7):
					set {_debug} to changeEntityStatBuff(attacker,"STR",10,"Hell Razers",1)
					set {_debug} to changeEntityStatBuff(attacker,"DEF",10,"Hell Razers",1)
					set {_debug} to changeEntityStatBuff(attacker,"LCK",10,"Hell Razers",1)
			#Sky Piercer
			else if getEntitySacredTreasure(attacker) is 32:
				set {_debug} to changeEntityStatBuff(attacker,"SPD",6,"Sky Piercer",1)
				set {_debug} to changeEntityStatBuff(attacker,"LCK",6,"Sky Piercer",1)
				set {_debug} to changeEntityStatBuff(attacker,"STR",-10,"Sky Piercer",1)
				add 1 to {t_cos_doubleattacks.%attacker%}
			#Peshkatz
			else if getEntitySacredTreasure(attacker) is 33:
				set {_debug} to changeEntityStatBuff(attacker,"SpecialAcceleration",10,"Peshkatz",1)
				if attacker's health is more than or equal to (attacker's maximum health * 0.5):
					changeEntityStatBuff(attacker,"STR",7,"Peshkatz",1)
					changeEntityStatBuff(attacker,"SPD",7,"Peshkatz",1)
				#Continued post-combat
			#Kard
			else if getEntitySacredTreasure(attacker) is 35:
				set {_debug} to changeEntityStatBuff(attacker,"SpecialAcceleration",40,"Kard",1)
				set {_debug} to changeEntityStatBuff(attacker,"SPD",-5,"Kard",1)
				set {_debug} to changeEntityStatBuff(attacker,"STR",-5,"Kard",1)
				set {_debug} to changeEntityStatBuff(attacker,"DEF",-5,"Kard",1)
				set {_debug} to changeEntityStatBuff(attacker,"RES",-5,"Kard",1)
			#Assasin's Dagger
			else if getEntitySacredTreasure(attacker) is 36:
				set {_disableAutoCounters} to true
				set {_AssasinDaggerKingBonus} to true
			#Loyalist's Dagger
			else if getEntitySacredTreasure(attacker) is 37:
				loop all players in radius 30 of the attacker:
					if loop-player is not the attacker:
						if {party.%loop-player%} is {party.%attacker%}:
							set {_debug} to changeEntityStatBuff(attacker,"SPD",8,"Loyalist's Dagger",1)
							set {_debug} to changeEntityStatBuff(attacker,"STR",8,"Loyalist's Dagger",1)
							set {_debug} to changeEntityStatBuff(attacker,"LCK",8,"Loyalist's Dagger",1)
							set {_debug} to changeEntityStatBuff(attacker,"DEF",8,"Loyalist's Dagger",1)
							set {_debug} to changeEntityStatBuff(attacker,"RES",8,"Loyalist's Dagger",1)
							add 1 to {t_cos_doubleattacks.%attacker%}
							exit 1 loop
			#Cutlaseer
			else if getEntitySacredTreasure(attacker) is 38:
				add 2 to damage
				loop all monsters in radius 15 of the attacker:
					add 1 to {_monsters}
				loop all players in radius 15 of the attacker:
					if {party.%loop-player%} is {party.%attacker%}:
						add 1 to {_allies}
				if {_monsters} is more than or equal to {_allies}:
					set {_debug} to changeEntityStatBuff(attacker,"SPD",7,"Cutlaseer",1)
					set {_debug} to changeEntityStatBuff(attacker,"STR",7,"Cutlaseer",1)
					set {_debug} to changeEntityStatBuff(attacker,"SpecialAcceleration",15,"Cutlaseer",1)
			#Victim sacred treasure effects
			#Binding Blade (victim)
			if getEntitySacredTreasure(victim) is 1:
				changeEntityStatBuff(victim,"DEF",6,"Binding Blade",1)
				changeEntityStatBuff(victim,"RES",6,"Binding Blade",1)
				if the 6th line of the lore of the victim's tool contains "Unique":
					set damage to damage * 0.8
					if victim's health is more than or equal to (victim's maximum health * 0.5):
						if getEntityRange(victim) is getEntityRange(attacker):
							add 1 to {t_cos_doubleattacks.%victim%}
						else if getEntityRange(victim) is 3:
							add 1 to {t_cos_doubleattacks.%victim%}
			#Tyrfing (victim)
			else if getEntitySacredTreasure(victim) is 2:
				if getEntityRange(attacker) is 2 or 4:
					set damage to damage * 0.75
				if the 6th line of the lore of the victim's tool contains "Unique":
					set {_debug} to changeEntityStatBuff(victim,"MAG",10,"Tyrfing [Unique Refine]",1)
					set {_debug} to changeEntityStatBuff(victim,"RES",10,"Tyrfing [Unique Refine]",1)
					set {_debug} to changeEntityStatBuff(victim,"SPD",5,"Tyrfing [Unique Refine]",1)
					set {_debug} to changeEntityStatBuff(victim,"LCK",5,"Tyrfing [Unique Refine]",1)
			#Ragnell (victim)
			else if getEntitySacredTreasure(victim) is 3:
				if the 6th line of the lore of the victim's tool contains "Unique":
					add 1 to {t_cos_doubleattacks.%victim%}
			#Light Brand (Victim)
			else if getEntitySacredTreasure(victim) is 4:
				changeEntityStatBuff(victim,"LCK",10,"Light Brand",1)
			#Mystletainn (victim)
			else if getEntitySacredTreasure(victim) is 5:
				set {_debug} to changeEntityStatBuff(victim,"LCK",10,"Mystletainn",1)
				if victim's health is less than or equal to (victim's maximum health * 0.7):
					set {_debug} to changeEntityStatBuff(victim,"LCK",10,"Mystletainn",1)
					set {_debug} to changeEntityStatBuff(victim,"STR",6,"Mystletainn",1)
					set {_debug} to changeEntityStatBuff(victim,"DEF",6,"Mystletainn",1)
					set {_mystletainnWoDaoEffect} to true
				#Mystletainn PRF Refine
				if the 6th line of the lore of the victim's tool contains "Unique":
					set {_debug} to changeEntityStatBuff(victim,"STR",4,"Mystletainn [Refine]",1)
					set {_debug} to changeEntityStatBuff(victim,"SPD",4,"Mystletainn [Refine]",1)
					set {_debug} to changeEntityStatBuff(victim,"LCK",4,"Mystletainn [Refine]",1)
					set {_debug} to changeEntityStatBuff(victim,"DEF",4,"Mystletainn [Refine]",1)
					set {_debug} to changeEntityStatBuff(victim,"RES",4,"Mystletainn [Refine]",1)
					set {_debug} to changeEntityStatBuff(victim,"MAG",4,"Mystletainn [Refine]",1)
					if victim's health is more than 4:
						applyRecoilDamage(victim,2)
					else:
						set the victim's health to 0.5
			#Tornado Blade
			else if getEntitySacredTreasure(victim) is 6:
				if getEntityRange(attacker) is 2 or 4:
					changeEntityStatBuff(victim,"STR",6,"Tornado Blade",1)
					changeEntityStatBuff(victim,"MAG",6,"Tornado Blade",1)
					changeEntityStatBuff(victim,"SPD",6,"Tornado Blade",1)
					changeEntityStatBuff(victim,"LCK",6,"Tornado Blade",1)
					changeEntityStatBuff(victim,"CHR",6,"Tornado Blade",1)
					changeEntityStatBuff(victim,"DEF",6,"Tornado Blade",1)
					changeEntityStatBuff(victim,"RES",6,"Tornado Blade",1)
					set damage to damage * 0.66
					add 1 to {t_cos_doubleattacks.%victim%}
			#Kindled-Fire Sword (victim)
			else if getEntitySacredTreasure(victim) is 7:
				if victim's health is more than or equal to (attacker's health - 3):
					changeEntityStatBuff(victim,"STR",7,"Kindled-Fire Sword",1)
					changeEntityStatBuff(victim,"DEF",7,"Kindled-Fire Sword",1)
			#Armads (Victim)
			else if getEntitySacredTreasure(victim) is 8:
				changeEntityStatBuff(victim,"SpecialAcceleration",10,"Armads",1)
				add 1 to {t_cos_doubleattacks.%victim%}
				set {_ignoreSPDCheck} to true
				if the 6th line of the lore of the victim's tool contains "Unique":
					if getEntityRange(attacker) is 2 or 4:
						set damage to damage * 0.6
					if victim's health is more than or equal to (victim's maximum health * 0.7):
						add 1 to {t_cos_doubleattacks.%victim%}
			#Basilikos (Victim)
			else if getEntitySacredTreasure(victim) is 9:
				changeEntityStatBuff(victim,"STR",7,"Basilikos",1)
				changeEntityStatBuff(victim,"SPD",7,"Basilikos",1)
				changeEntityStatBuff(victim,"DEF",-5,"Basilikos",1)
				changeEntityStatBuff(victim,"RES",-5,"Basilikos",1)
				if the 6th line of the lore of the victim's tool contains "Unique":
					set damage to damage * 1.5
			#Hauteclere (Victim)
			else if getEntitySacredTreasure(victim) is 10:
				set {_debug} to changeEntityStatBuff(victim,"LCK",10,"Hauteclere",1)
				set {_debug} to changeEntityStatBuff(victim,"SPD",5,"Hauteclere",1)
				set {_debug} to changeEntityStatBuff(victim,"SpecialAcceleration",15,"Hauteclere",1)
				#Hauteclere PRF Refine
				if the 6th line of the lore of the victim's tool contains "Unique":
					set {_debug} to changeEntityStatBuff(victim,"SpecialAcceleration",5,"Hauteclere [Refine]",1)
			#Tomahawk (Victim)
			else if getEntitySacredTreasure(victim) is 11:
				if getEntityRange(attacker) is 2 or 4:
					changeEntityStatBuff(victim,"STR",6,"Tomahawk",1)
					changeEntityStatBuff(victim,"MAG",6,"Tomahawk",1)
					changeEntityStatBuff(victim,"SPD",6,"Tomahawk",1)
					changeEntityStatBuff(victim,"LCK",6,"Tomahawk",1)
					changeEntityStatBuff(victim,"CHR",6,"Tomahawk",1)
					changeEntityStatBuff(victim,"DEF",6,"Tomahawk",1)
					changeEntityStatBuff(victim,"RES",6,"Tomahawk",1)
					set damage to damage * 0.66
					add 1 to {t_cos_doubleattacks.%victim%}
			#Daybreak (victim)
			else if getEntitySacredTreasure(victim) is 12:
				changeEntityStatBuff(victim,"DEF",6,"Daybreak",1)
				changeEntityStatBuff(victim,"RES",6,"Daybreak",1)
				heal the victim by 6
			#Goddess's Axe (victim)
			else if getEntitySacredTreasure(victim) is 13:
				set {_debug} to changeEntityStatBuff(victim,"STR",7,"Goddess's Axe",1)
				set {_debug} to changeEntityStatBuff(victim,"DEF",7,"Goddess's Axe",1)
				set {_debug} to changeEntityStatBuff(victim,"SPD",-9,"Goddess's Axe",1)
				set {_debug} to changeEntityStatBuff(victim,"RES",-4,"Goddess's Axe",1)
				if the 6th line of the lore of the victim's tool contains "Unique":
					if victim's health is less than or equal to (victim's maximum health * 0.75):
						if getEntityRange(victim) is getEntityRange(attacker):
							make victim damage the attacker by damage
							set damage to damage * 0.3
						else if getEntityRange(victim) is 3:
							make victim damage the attacker by damage
							set damage to damage * 0.3
			#Gae Bolg (victim)
			else if getEntitySacredTreasure(victim) is 16:
				changeEntityStatBuff(victim,"STR",12,"Gae Bolg",1)
				changeEntityStatBuff(victim,"DEF",16,"Gae Bolg",1)
				changeEntityStatBuff(victim,"LCK",6,"Gae Bolg",1)
				changeEntityStatBuff(attacker,"LCK",-50,"Gae Bolg",1)
				#PRF Refine
				if the 6th line of the lore of the victim's tool contains "Unique":
					loop all players in radius 30 of the victim:
						if loop-player is not the victim:
							if {party.%loop-player%} is {party.%victim%}:
								changeEntityStatBuff(victim,"STR",5,"Gae Bolg Unique Refine",1)
								changeEntityStatBuff(victim,"DEF",5,"Gae Bolg Unique Refine",1)
								set {_ignoreSPDCheck} to true
								exit 1 loop
			#Gradivus (victim)
			else if getEntitySacredTreasure(victim) is 17:
				changeEntityStatBuff(victim,"STR",8,"Gradivus",1)
				changeEntityStatBuff(victim,"DEF",8,"Gradivus",1)
				changeEntityStatBuff(victim,"RES",8,"Gradivus",1)
				changeEntityStatBuff(attacker,"LCK",-30,"Gradivus",1)
			#Javelin (Victim)
			else if getEntitySacredTreasure(victim) is 20:
				if getEntityRange(attacker) is 2 or 4:
					changeEntityStatBuff(victim,"STR",6,"Javelin",1)
					changeEntityStatBuff(victim,"MAG",6,"Javelin",1)
					changeEntityStatBuff(victim,"SPD",6,"Javelin",1)
					changeEntityStatBuff(victim,"LCK",6,"Javelin",1)
					changeEntityStatBuff(victim,"CHR",6,"Javelin",1)
					changeEntityStatBuff(victim,"DEF",6,"Javelin",1)
					changeEntityStatBuff(victim,"RES",6,"Javelin",1)
					set damage to damage * 0.66
					add 1 to {t_cos_doubleattacks.%victim%}
			#Swift-Winds Lance (victim)
			else if getEntitySacredTreasure(victim) is 21:
				set {_disableAutoCounters} to true
			#Parthia (Victim)
			else if getEntitySacredTreasure(victim) is 22:
				if getEntityRange(attacker) is 2 or 4:
					set damage to damage * 0.5
			#Fujin Yumi (victim)
			else if getEntitySacredTreasure(victim) is 24:
				set {_debug} to changeEntityStatBuff(victim,"MAG",10,"Fujin Yumi",1)
				set {_debug} to changeEntityStatBuff(victim,"RES",10,"Fujin Yumi",1)
			#Guardian Bow (victim)
			else if getEntitySacredTreasure(victim) is 25:
				changeEntityStatBuff(victim,"DEF",4,"Guardian Bow",1)
				changeEntityStatBuff(victim,"RES",4,"Guardian Bow",1)
			#Brave Bow (victim)
			else if getEntitySacredTreasure(victim) is 26:
				set {_debug} to changeEntityStatBuff(attacker,"DEF",-4,"Brave Bow",1)
				set {_debug} to changeEntityStatBuff(attacker,"STR",-4,"Brave Bow",1)				
			#Bow of Aresha (victim)
			else if getEntitySacredTreasure(victim) is 27:
				set {_debug} to changeEntityStatBuff(victim,"DEF",5,"Bow of Aresha",1)
				set {_debug} to changeEntityStatBuff(victim,"STR",5,"Bow of Aresha",1)
			#Double Bow (victim)
			else if getEntitySacredTreasure(victim) is 42:
				changeEntityStatBuff(victim,"SpecialAcceleration",10,"Double Bow",1)
				changeEntityStatBuff(victim,"STR",3,"Double Bow",1)
				changeEntityStatBuff(victim,"DEF",7,"Double Bow",1)		
				changeEntityStatBuff(victim,"RES",4,"Double Bow",1)		
				add 1 to {t_cos_doubleattacks.%victim%}
				if getEntityRange(attacker) is 2 or 4:
					set {_debug} to changeEntityStatBuff(attacker,"DEF",-4,"Double Bow",1)
					set {_debug} to changeEntityStatBuff(attacker,"STR",-4,"Double Bow",1)
			#Nidhogg (victim)
			else if getEntitySacredTreasure(victim) is 43:
				changeEntityStatBuff(victim,"LCK",20,"Nidhogg",1)
				changeEntityStatBuff(victim,"SpecialAcceleration",20,"Nidhogg",1)
			#Aura Knuckles (victim)
			else if getEntitySacredTreasure(victim) is 29:
				set {_debug} to changeEntityStatBuff(victim,"SPD",6,"Aura Knuckles",1)
				set {_debug} to changeEntityStatBuff(victim,"MAG",6,"Aura Knuckles",1)
				if getEntityWeaponType(attacker) is 1:
					set {_debug} to changeEntityStatBuff(victim,"MAG",-12,"Aura Knuckles",1)
					set {_debug} to changeEntityStatBuff(victim,"RES",-12,"Aura Knuckles",1)
			#Hell Razers (victim)
			else if getEntitySacredTreasure(victim) is 30:
				set {_debug} to changeEntityStatBuff(victim,"SPD",-10,"Hell Razers",1)
				set {_debug} to changeEntityStatBuff(victim,"STR",7,"Hell Razers",1)
				set {_debug} to changeEntityStatBuff(victim,"DEF",7,"Hell Razers",1)
			#Dracoclaws (victim)
			else if getEntitySacredTreasure(victim) is 31:
				set damage to damage * 0.7
			#Sky Piercer (victim)
			else if getEntitySacredTreasure(victim) is 32:
				set {_debug} to changeEntityStatBuff(victim,"SPD",6,"Sky Piercer",1)
				set {_debug} to changeEntityStatBuff(victim,"LCK",6,"Sky Piercer",1)
				set {_debug} to changeEntityStatBuff(victim,"STR",-10,"Sky Piercer",1)
			#Kard (victim)
			else if getEntitySacredTreasure(victim) is 35:
				set {_debug} to changeEntityStatBuff(victim,"SpecialAcceleration",40,"Kard",1)
				set {_debug} to changeEntityStatBuff(victim,"SPD",-5,"Kard",1)
				set {_debug} to changeEntityStatBuff(victim,"STR",-5,"Kard",1)
				set {_debug} to changeEntityStatBuff(victim,"DEF",-5,"Kard",1)
				set {_debug} to changeEntityStatBuff(victim,"RES",-5,"Kard",1)
			#Assasin's Dagger (victim)
			else if getEntitySacredTreasure(attacker) is 36:
				set {_disableAutoCounters} to true
			#Loyalist's Dagger (victim)
			else if getEntitySacredTreasure(victim) is 37:
				loop all players in radius 30 of the victim:
					if loop-player is not the victim:
						if {party.%loop-player%} is {party.%victim%}:
							set {_debug} to changeEntityStatBuff(victim,"SPD",8,"Loyalist's Dagger",1)
							set {_debug} to changeEntityStatBuff(victim,"STR",8,"Loyalist's Dagger",1)
							set {_debug} to changeEntityStatBuff(victim,"LCK",8,"Loyalist's Dagger",1)
							set {_debug} to changeEntityStatBuff(victim,"DEF",8,"Loyalist's Dagger",1)
							set {_debug} to changeEntityStatBuff(victim,"RES",8,"Loyalist's Dagger",1)
			#Cutlaseer (victim)
			else if getEntitySacredTreasure(victim) is 38:
				loop all monsters in radius 15 of the victim:
					add 1 to {_monsters}
				loop all players in radius 15 of the victim:
					if {party.%loop-player%} is {party.%victim%}:
						add 1 to {_allies}
				if {_monsters} is more than or equal to {_allies}:
					set {_debug} to changeEntityStatBuff(victim,"SPD",7,"Cutlaseer",1)
					set {_debug} to changeEntityStatBuff(victim,"STR",7,"Cutlaseer",1)
					set {_debug} to changeEntityStatBuff(victim,"SpecialAcceleration",15,"Cutlaseer",1)
			#Brave Blade
			if getEntitySkillsInHand(attacker,"Brave Blade",0,2) is more than 0:
				set damage to damage - 2
				add 1 to {t_cos_doubleattacks.%attacker%}
			#Marked for Death
			if {t_isMarkedForDeath.%victim%} is true:
				if projectile exists:
					set damage to damage * 1.3
			#Marked for Death (Application, perk)
			if checkSlots(attacker,"Marked for Death") is 1:
				if projectile exists:
					set {t_isMarkedForDeath.%victim%} to true
					play 20 (gold block break with speed 1) at the victim
			#Concentration (Perk)
			if checkSlots(attacker,"Concentration") is 1:
				set damage to damage * {t_concentration.%attacker%}
			#Concentration Loss
			if checkSlots(victim,"Concentration") is 1:
				set {t_concentration.%victim%} to 1
			#Face The Enemy (Perk)
			if checkSlots(attacker,"Face The Enemy") is 1:
				if {t_isCombatTagged.%attacker%} is set:
					set damage to damage * 1.15
			#Face The Enemy (Perk, Victim)
			if checkSlots(victim,"Face The Enemy") is 1:
				if {t_isCombatTagged.%victim%} is set:
					set damage to damage * 0.85				
			#Reins - Attacker
			if getEntitySkillsInHand(attacker,"STR/DEF Rein",0,3) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"STR",-5,"STR/DEF Rein",1)
				set {_debug} to changeEntityStatBuff(victim,"DEF",-5,"STR/DEF Rein",1)
			else if getEntitySkillsInHand(attacker,"MAG/RES Rein",0,3) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"MAG",-5,"MAG/RES Rein",1)
				set {_debug} to changeEntityStatBuff(victim,"RES",-5,"MAG/RES Rein",1)
			else if getEntitySkillsInHand(attacker,"DEF/RES Rein",0,3) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"DEF",-5,"DEF/RES Rein",1)
				set {_debug} to changeEntityStatBuff(victim,"RES",-5,"DEF/RES Rein",1)
			else if getEntitySkillsInHand(attacker,"SPD/DEF Rein",0,3) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"SPD",-5,"SPD/DEF Rein",1)
				set {_debug} to changeEntityStatBuff(victim,"DEF",-5,"SPD/DEF Rein",1)
			else if getEntitySkillsInHand(attacker,"SPD/RES Rein",0,3) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"SPD",-5,"SPD/RES Rein",1)
				set {_debug} to changeEntityStatBuff(victim,"RES",-5,"SPD/RES Rein",1)
			#Reins - Victim
			if getEntitySkillsInHand(victim,"STR/DEF Rein",0,3) is more than 0:
				set {_debug} to changeEntityStatBuff(attacker,"STR",-5,"STR/DEF Rein",1)
				set {_debug} to changeEntityStatBuff(attacker,"DEF",-5,"STR/DEF Rein",1)
			else if getEntitySkillsInHand(victim,"MAG/RES Rein",0,3) is more than 0:
				set {_debug} to changeEntityStatBuff(attacker,"MAG",-5,"MAG/RES Rein",1)
				set {_debug} to changeEntityStatBuff(attacker,"RES",-5,"MAG/RES Rein",1)
			else if getEntitySkillsInHand(victim,"DEF/RES Rein",0,3) is more than 0:
				set {_debug} to changeEntityStatBuff(attacker,"DEF",-5,"DEF/RES Rein",1)
				set {_debug} to changeEntityStatBuff(attacker,"RES",-5,"DEF/RES Rein",1)
			else if getEntitySkillsInHand(victim,"SPD/DEF Rein",0,3) is more than 0:
				set {_debug} to changeEntityStatBuff(attacker,"SPD",-5,"SPD/DEF Rein",1)
				set {_debug} to changeEntityStatBuff(attacker,"DEF",-5,"SPD/DEF Rein",1)
			else if getEntitySkillsInHand(victim,"SPD/RES Rein",0,3) is more than 0:
				set {_debug} to changeEntityStatBuff(attacker,"SPD",-5,"SPD/RES Rein",1)
				set {_debug} to changeEntityStatBuff(attacker,"RES",-5,"SPD/RES Rein",1)
			#Drives & Pulses - Attacker
			#Monster case
			if attacker is monster:
				loop all monsters in radius 30 of the attacker:
					if loop-monster is not the attacker:
						if getEntitySkillsInHand(loop-monster,"Drive STR",0,3) is more than 0:
							set {_debug} to changeEntityStatBuff(attacker,"STR",6,"Drive STR",1)
						else if getEntitySkillsInHand(loop-monster,"Drive MAG",0,3) is more than 0:
							set {_debug} to changeEntityStatBuff(attacker,"MAG",6,"Drive MAG",1)
						else if getEntitySkillsInHand(loop-monster,"Drive SPD",0,3) is more than 0:
							set {_debug} to changeEntityStatBuff(attacker,"SPD",6,"Drive SPD",1)
						else if getEntitySkillsInHand(loop-monster,"Drive DEF",0,3) is more than 0:
							set {_debug} to changeEntityStatBuff(attacker,"DEF",6,"Drive DEF",1)
						else if getEntitySkillsInHand(loop-monster,"Drive RES",0,3) is more than 0:
							set {_debug} to changeEntityStatBuff(attacker,"RES",6,"Drive RES",1)
						else if getEntitySkillsInHand(loop-monster,"Slaying Pulse",0,3) is more than 0:
							if loop-monster's health is more than or equal to attacker's health - 6:
								set {_debug} to changeEntityStatBuff(attacker,"SpecialAcceleration",10,"Slaying Pulse",1)
						else if getEntitySkillsInHand(loop-monster,"Flashing Rush",0,3) is more than 0:
							if loop-monster's health is more than or equal to (loop-monster's maximum health * 0.5):
								set {_lckBonus} to floor((getEntityStatTotal(attacker,"SPD")) - (getEntityStatTotal(victim,"SPD")))
								if {_lckBonus} is more than 20:
									set {_lckBonus} to 20
								set {_debug} to changeEntityStatBuff(attacker,"LCK",{_lckBonus},"Flashing Blade",1)
								add ({_lckBonus} / 2) to damage
						else if getEntitySkillsInHand(loop-monster,"Heavy Rush",0,3) is more than 0:
							if loop-monster's health is more than or equal to (loop-monster's maximum health * 0.5):
								set {_lckBonus} to floor((getEntityStatTotal(attacker,"STR")) - (getEntityStatTotal(victim,"STR")))
								if {_lckBonus} is more than 20:
									set {_lckBonus} to 20
								set {_debug} to changeEntityStatBuff(attacker,"LCK",{_lckBonus},"Heavy Blade",1)
								add ({_lckBonus} / 2) to damage
			#Player case
			else:
				set {_appliedJDS} to false
				loop all players in radius 30 of the attacker:
					if loop-player is not the attacker:
						if {party.%loop-player%} is {party.%attacker%}:
							if checkSlots(loop-player,"Joint-Drive Spectrum") is 1:
								set {_debug} to changeEntityStatBuff(attacker,"STR",4,"Joint-Drive Spectrum",1)
								set {_debug} to changeEntityStatBuff(attacker,"MAG",4,"Joint-Drive Spectrum",1)
								set {_debug} to changeEntityStatBuff(attacker,"SPD",4,"Joint-Drive Spectrum",1)
								set {_debug} to changeEntityStatBuff(attacker,"LCK",4,"Joint-Drive Spectrum",1)
								set {_debug} to changeEntityStatBuff(attacker,"CHR",4,"Joint-Drive Spectrum",1)
								set {_debug} to changeEntityStatBuff(attacker,"DEF",4,"Joint-Drive Spectrum",1)
								set {_debug} to changeEntityStatBuff(attacker,"RES",4,"Joint-Drive Spectrum",1)
							if checkSlots(attacker,"Joint-Drive Spectrum") is 1:
								if {_appliedJDS} is not true:
									set {_debug} to changeEntityStatBuff(attacker,"STR",4,"Joint-Drive Spectrum",1)
									set {_debug} to changeEntityStatBuff(attacker,"MAG",4,"Joint-Drive Spectrum",1)
									set {_debug} to changeEntityStatBuff(attacker,"SPD",4,"Joint-Drive Spectrum",1)
									set {_debug} to changeEntityStatBuff(attacker,"LCK",4,"Joint-Drive Spectrum",1)
									set {_debug} to changeEntityStatBuff(attacker,"CHR",4,"Joint-Drive Spectrum",1)
									set {_debug} to changeEntityStatBuff(attacker,"DEF",4,"Joint-Drive Spectrum",1)
									set {_debug} to changeEntityStatBuff(attacker,"RES",4,"Joint-Drive Spectrum",1)
									set {_appliedJDS} to true
							if getEntitySkillsInHand(loop-player,"Drive STR",0,3) is more than 0:
								set {_debug} to changeEntityStatBuff(attacker,"STR",9,"Drive STR",1)
							else if getEntitySkillsInHand(loop-player,"Drive MAG",0,3) is more than 0:
								set {_debug} to changeEntityStatBuff(attacker,"MAG",9,"Drive MAG",1)
							else if getEntitySkillsInHand(loop-player,"Drive SPD",0,3) is more than 0:
								set {_debug} to changeEntityStatBuff(attacker,"SPD",9,"Drive SPD",1)
							else if getEntitySkillsInHand(loop-player,"Drive DEF",0,3) is more than 0:
								set {_debug} to changeEntityStatBuff(attacker,"DEF",9,"Drive DEF",1)
							else if getEntitySkillsInHand(loop-player,"Drive RES",0,3) is more than 0:
								set {_debug} to changeEntityStatBuff(attacker,"RES",9,"Drive RES",1)
							else if getEntitySkillsInHand(loop-player,"Spur STR",0,3) is more than 0:
								set {_debug} to changeEntityStatBuff(attacker,"STR",5,"Spur STR",1)
							else if getEntitySkillsInHand(loop-player,"Spur MAG",0,3) is more than 0:
								set {_debug} to changeEntityStatBuff(attacker,"MAG",5,"Spur MAG",1)
							else if getEntitySkillsInHand(loop-player,"Spur SPD",0,3) is more than 0:
								set {_debug} to changeEntityStatBuff(attacker,"SPD",5,"Spur SPD",1)
							else if getEntitySkillsInHand(loop-player,"Spur DEF",0,3) is more than 0:
								set {_debug} to changeEntityStatBuff(attacker,"DEF",5,"Spur DEF",1)
							else if getEntitySkillsInHand(loop-player,"Spur RES",0,3) is more than 0:
								set {_debug} to changeEntityStatBuff(attacker,"RES",5,"Spur RES",1)
							else if getEntitySkillsInHand(loop-player,"Slaying Pulse",0,3) is more than 0:
								if loop-player's health is more than or equal to attacker's health - 6:
									set {_debug} to changeEntityStatBuff(attacker,"SpecialAcceleration",10,"Slaying Pulse",1)
							else if getEntitySkillsInHand(loop-player,"Flashing Rush",0,3) is more than 0:
								if loop-player's health is more than or equal to (loop-player's maximum health * 0.5):
									set {_lckBonus} to floor((getEntityStatTotal(attacker,"SPD")) - (getEntityStatTotal(victim,"SPD")))
									if {_lckBonus} is more than 20:
										set {_lckBonus} to 20
									set {_debug} to changeEntityStatBuff(attacker,"LCK",{_lckBonus},"Flashing Blade",1)
									add ({_lckBonus} / 2) to damage
							else if getEntitySkillsInHand(loop-player,"Heavy Rush",0,3) is more than 0:
								if loop-player's health is more than or equal to (loop-player's maximum health * 0.5):
									set {_lckBonus} to floor((getEntityStatTotal(attacker,"STR")) - (getEntityStatTotal(victim,"STR")))
									if {_lckBonus} is more than 20:
										set {_lckBonus} to 20
									set {_debug} to changeEntityStatBuff(attacker,"LCK",{_lckBonus},"Heavy Blade",1)
									add ({_lckBonus} / 2) to damage
			#Drives & Pulses - victim
			#Monster case
			if victim is monster:
				loop all monsters in radius 30 of the victim:
					if loop-monster is not the victim:
						if getEntitySkillsInHand(loop-monster,"Drive STR",0,3) is more than 0:
							set {_debug} to changeEntityStatBuff(victim,"STR",6,"Drive STR",1)
						else if getEntitySkillsInHand(loop-monster,"Drive MAG",0,3) is more than 0:
							set {_debug} to changeEntityStatBuff(victim,"MAG",6,"Drive MAG",1)
						else if getEntitySkillsInHand(loop-monster,"Drive SPD",0,3) is more than 0:
							set {_debug} to changeEntityStatBuff(victim,"SPD",6,"Drive SPD",1)
						else if getEntitySkillsInHand(loop-monster,"Drive DEF",0,3) is more than 0:
							set {_debug} to changeEntityStatBuff(victim,"DEF",6,"Drive DEF",1)
						else if getEntitySkillsInHand(loop-monster,"Drive RES",0,3) is more than 0:
							set {_debug} to changeEntityStatBuff(victim,"RES",6,"Drive RES",1)
						else if getEntitySkillsInHand(loop-monster,"Slaying Pulse",0,3) is more than 0:
							if loop-monster's health is more than or equal to victim's health - 6:
								set {_debug} to changeEntityStatBuff(victim,"SpecialAcceleration",10,"Slaying Pulse",1)
			#Player case
			else:
				set {_appliedJDS} to false
				loop all players in radius 30 of the victim:
					if loop-player is not the victim:
						if {party.%victim%} is {party.%loop-player%}:
							if checkSlots(loop-player,"Joint-Drive Spectrum") is 1:
								set {_debug} to changeEntityStatBuff(victim,"STR",4,"Joint-Drive Spectrum",1)
								set {_debug} to changeEntityStatBuff(victim,"MAG",4,"Joint-Drive Spectrum",1)
								set {_debug} to changeEntityStatBuff(victim,"SPD",4,"Joint-Drive Spectrum",1)
								set {_debug} to changeEntityStatBuff(victim,"LCK",4,"Joint-Drive Spectrum",1)
								set {_debug} to changeEntityStatBuff(victim,"CHR",4,"Joint-Drive Spectrum",1)
								set {_debug} to changeEntityStatBuff(victim,"DEF",4,"Joint-Drive Spectrum",1)
								set {_debug} to changeEntityStatBuff(victim,"RES",4,"Joint-Drive Spectrum",1)
							if checkSlots(victim,"Joint-Drive Spectrum") is 1:
								if {_appliedJDS} is not true:
									set {_debug} to changeEntityStatBuff(victim,"STR",4,"Joint-Drive Spectrum",1)
									set {_debug} to changeEntityStatBuff(victim,"MAG",4,"Joint-Drive Spectrum",1)
									set {_debug} to changeEntityStatBuff(victim,"SPD",4,"Joint-Drive Spectrum",1)
									set {_debug} to changeEntityStatBuff(victim,"LCK",4,"Joint-Drive Spectrum",1)
									set {_debug} to changeEntityStatBuff(victim,"CHR",4,"Joint-Drive Spectrum",1)
									set {_debug} to changeEntityStatBuff(victim,"DEF",4,"Joint-Drive Spectrum",1)
									set {_debug} to changeEntityStatBuff(victim,"RES",4,"Joint-Drive Spectrum",1)
									set {_appliedJDS} to true
							if getEntitySkillsInHand(loop-player,"Drive STR",0,3) is more than 0:
								set {_debug} to changeEntityStatBuff(victim,"STR",6,"Drive STR",1)
							else if getEntitySkillsInHand(loop-player,"Drive MAG",0,3) is more than 0:
								set {_debug} to changeEntityStatBuff(victim,"MAG",6,"Drive MAG",1)
							else if getEntitySkillsInHand(loop-player,"Drive SPD",0,3) is more than 0:
								set {_debug} to changeEntityStatBuff(victim,"SPD",6,"Drive SPD",1)
							else if getEntitySkillsInHand(loop-player,"Drive DEF",0,3) is more than 0:
								set {_debug} to changeEntityStatBuff(victim,"DEF",6,"Drive DEF",1)
							else if getEntitySkillsInHand(loop-player,"Drive RES",0,3) is more than 0:
								set {_debug} to changeEntityStatBuff(victim,"RES",6,"Drive RES",1)
							else if getEntitySkillsInHand(loop-player,"Slaying Pulse",0,3) is more than 0:
								if loop-player's health is more than or equal to victim's health - 6:
									set {_debug} to changeEntityStatBuff(victim,"SpecialAcceleration",10,"Slaying Pulse",1)
							if {traits.%loop-player%::Protective} is set:
								set damage to damage * 0.8
			#Rising Courage (Perk) (Attacker)
			if checkSlots(attacker,"Rising Courage") is 1:
				if {t_morale.%attacker%} is more than 0:
					set {_attackerMorale} to ceil({t_morale.%attacker%})
					changeEntityStatBuff(attacker,"STR",{_attackerMorale},"Rising Courage (Perk)",1)
					changeEntityStatBuff(attacker,"MAG",{_attackerMorale},"Rising Courage (Perk)",1)
					changeEntityStatBuff(attacker,"SPD",{_attackerMorale},"Rising Courage (Perk)",1)
					changeEntityStatBuff(attacker,"LCK",{_attackerMorale},"Rising Courage (Perk)",1)
					changeEntityStatBuff(attacker,"DEF",{_attackerMorale},"Rising Courage (Perk)",1)
					changeEntityStatBuff(attacker,"RES",{_attackerMorale},"Rising Courage (Perk)",1)
			#Rising Courage (Perk) (Victim)
			if checkSlots(victim,"Rising Courage") is 1:
				if {t_morale.%victim%} is more than 0:
					set {_victimMorale} to ceil({t_morale.%victim%})
					changeEntityStatBuff(victim,"STR",{_victimMorale},"Rising Courage (Perk)",1)
					changeEntityStatBuff(victim,"MAG",{_victimMorale},"Rising Courage (Perk)",1)
					changeEntityStatBuff(victim,"SPD",{_victimMorale},"Rising Courage (Perk)",1)
					changeEntityStatBuff(victim,"LCK",{_victimMorale},"Rising Courage (Perk)",1)
					changeEntityStatBuff(victim,"DEF",{_victimMorale},"Rising Courage (Perk)",1)
					changeEntityStatBuff(victim,"RES",{_victimMorale},"Rising Courage (Perk)",1)
			#Sacred Boost (Perk) (Attacker)
			if checkSlots(attacker,"Sacred Boost") is 1:
				if attacker's health is attacker's maximum health:
					changeEntityStatBuff(attacker,"STR",5,"Sacred Boost (Perk)",1)
					changeEntityStatBuff(attacker,"MAG",5,"Sacred Boost (Perk)",1)
					changeEntityStatBuff(attacker,"SPD",5,"Sacred Boost (Perk)",1)
					changeEntityStatBuff(attacker,"LCK",5,"Sacred Boost (Perk)",1)
					changeEntityStatBuff(attacker,"DEF",5,"Sacred Boost (Perk)",1)
					changeEntityStatBuff(attacker,"RES",5,"Sacred Boost (Perk)",1)
			#Sacred Boost (Perk) (victim)
			if checkSlots(victim,"Sacred Boost") is 1:
				if victim's health is victim's maximum health:
					changeEntityStatBuff(victim,"STR",5,"Sacred Boost (Perk)",1)
					changeEntityStatBuff(victim,"MAG",5,"Sacred Boost (Perk)",1)
					changeEntityStatBuff(victim,"SPD",5,"Sacred Boost (Perk)",1)
					changeEntityStatBuff(victim,"LCK",5,"Sacred Boost (Perk)",1)
					changeEntityStatBuff(victim,"DEF",5,"Sacred Boost (Perk)",1)
					changeEntityStatBuff(victim,"RES",5,"Sacred Boost (Perk)",1)
			#The "Blow" family, grants in-combat stats when initiating combat (These are removed after the damage step, so they won't be visible to the player via /cstats)
			if getEntitySkillsInHand(attacker,"Death Blow",2,1) is more than 0:
				set {_dbActive.%attacker%} to changeEntityStatBuff(attacker,"STR",6,"Death Blow",1)
			#These need to be orphaned if-statements since a player could be running 2x A-Slots via Skill Greed
			if getEntitySkillsInHand(attacker,"Hexing Blow",2,1) is more than 0:
				set {_dbActive.%attacker%} to changeEntityStatBuff(attacker,"MAG",6,"Hexing Blow",1)
			if getEntitySkillsInHand(attacker,"Darting Blow",2,1) is more than 0:
				set {_dbActive.%attacker%} to changeEntityStatBuff(attacker,"SPD",6,"Darting Blow",1)
			if getEntitySkillsInHand(attacker,"Armoured Blow",2,1) is more than 0:
				set {_dbActive.%attacker%} to changeEntityStatBuff(attacker,"DEF",6,"Armoured Blow",1)
			if getEntitySkillsInHand(attacker,"Warding Blow",2,1) is more than 0:
				set {_dbActive.%attacker%} to changeEntityStatBuff(attacker,"RES",6,"Warding Blow",1)
			#Blow-style perks
			if checkSlots(attacker,"Darting Blow II") is 1:
				set {_debug} to changeEntityStatBuff(attacker,"SPD",9,"Darting Blow II (Perk)",1)
			if checkSlots(attacker,"Heavy Blow") is 1:
				set {_debug} to changeEntityStatBuff(attacker,"STR",7,"Heavy Blow (Perk)",1)
				set {_debug} to changeEntityStatBuff(attacker,"MAG",7,"Heavy Blow (Perk)",1)
			if checkSlots(attacker,"Bracing Blow") is 1:
				set {_debug} to changeEntityStatBuff(attacker,"DEF",7,"Bracing Blow (Perk)",1)
				set {_debug} to changeEntityStatBuff(attacker,"RES",7,"Bracing Blow (Perk)",1)
			#The "Stance" family, grants in-combat stats if foe initiates combat (These are removed after the damage step, so they won't be visible to the player via /cstats)
			if getEntitySkillsInHand(victim,"Steady Stance",2,1) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"DEF",6,"Steady Stance",1)
				set {_debug} to changeEntityStatBuff(victim,"LCK",6,"Steady Stance",1)
			if getEntitySkillsInHand(victim,"Warding Stance",2,1) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"RES",6,"Warding Stance",1)
				set {_debug} to changeEntityStatBuff(victim,"LCK",6,"Warding Stance",1)
			if getEntitySkillsInHand(victim,"Bracing Stance",2,1) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"DEF",6,"Bracing Stance",1)
				set {_debug} to changeEntityStatBuff(victim,"RES",6,"Bracing Stance",1)
			if getEntitySkillsInHand(victim,"Fierce Stance",2,1) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"STR",6,"Fierce Stance",1)
				set {_debug} to changeEntityStatBuff(victim,"LCK",6,"Fierce Stance",1)
			if getEntitySkillsInHand(victim,"Hexing Stance",2,1) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"MAG",6,"Hexing Stance",1)
				set {_debug} to changeEntityStatBuff(victim,"LCK",6,"Hexing Stance",1)
			if getEntitySkillsInHand(victim,"Kestrel Stance",2,1) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"STR",5,"Kestrel Stance",1)
				set {_debug} to changeEntityStatBuff(victim,"MAG",5,"Kestrel Stance",1)
				set {_debug} to changeEntityStatBuff(victim,"SPD",5,"Kestrel Stance",1)
			#Bond skills
			if getEntitySkillsInHand(attacker,"Bond",2,1) is more than 0:
				loop all entities in radius 30 of the attacker:
					if loop-entity is not the attacker:
						if {party.%loop-entity%} is {party.%attacker%}:
							set {_attackerBondOK} to true
							exit 1 loop
			#Attacker Bond Skill bonuses
			if {_attackerBondOK} is true:
				if getEntitySkillsInHand(attacker,"ATK/SPD Bond",2,1) is more than 0:
					changeEntityStatBuff(attacker,"STR",7,"ATK/SPD Bond",1)
					changeEntityStatBuff(attacker,"MAG",7,"ATK/SPD Bond",1)
					changeEntityStatBuff(attacker,"SPD",7,"ATK/SPD Bond",1)
				if getEntitySkillsInHand(attacker,"ATK/DEF Bond",2,1) is more than 0:
					changeEntityStatBuff(attacker,"STR",7,"ATK/DEF Bond",1)
					changeEntityStatBuff(attacker,"MAG",7,"ATK/DEF Bond",1)
					changeEntityStatBuff(attacker,"SPD",7,"ATK/DEF Bond",1)
				if getEntitySkillsInHand(attacker,"ATK/RES Bond",2,1) is more than 0:
					changeEntityStatBuff(attacker,"STR",7,"ATK/RES Bond",1)
					changeEntityStatBuff(attacker,"MAG",7,"ATK/RES Bond",1)
					changeEntityStatBuff(attacker,"SPD",7,"ATK/RES Bond",1)
				if getEntitySkillsInHand(attacker,"DEF/RES Bond",2,1) is more than 0:
					changeEntityStatBuff(attacker,"STR",7,"DEF/RES Bond",1)
					changeEntityStatBuff(attacker,"MAG",7,"DEF/RES Bond",1)
					changeEntityStatBuff(attacker,"SPD",7,"DEF/RES Bond",1)
			#Bond skills (victim)
			if getEntitySkillsInHand(victim,"Bond",2,1) is more than 0:
				loop all entities in radius 30 of the victim:
					if loop-entity is not the victim:
						if {party.%loop-entity%} is {party.%victim%}:
							set {_victimBondOK} to true
							exit 1 loop
			#victim Bond Skill bonuses
			if {_victimBondOK} is true:
				if getEntitySkillsInHand(victim,"ATK/SPD Bond",2,1) is more than 0:
					changeEntityStatBuff(victim,"STR",7,"ATK/SPD Bond",1)
					changeEntityStatBuff(victim,"MAG",7,"ATK/SPD Bond",1)
					changeEntityStatBuff(victim,"SPD",7,"ATK/SPD Bond",1)
				if getEntitySkillsInHand(victim,"ATK/DEF Bond",2,1) is more than 0:
					changeEntityStatBuff(victim,"STR",7,"ATK/DEF Bond",1)
					changeEntityStatBuff(victim,"MAG",7,"ATK/DEF Bond",1)
					changeEntityStatBuff(victim,"SPD",7,"ATK/DEF Bond",1)
				if getEntitySkillsInHand(victim,"ATK/RES Bond",2,1) is more than 0:
					changeEntityStatBuff(victim,"STR",7,"ATK/RES Bond",1)
					changeEntityStatBuff(victim,"MAG",7,"ATK/RES Bond",1)
					changeEntityStatBuff(victim,"SPD",7,"ATK/RES Bond",1)
				if getEntitySkillsInHand(victim,"DEF/RES Bond",2,1) is more than 0:
					changeEntityStatBuff(victim,"STR",7,"DEF/RES Bond",1)
					changeEntityStatBuff(victim,"MAG",7,"DEF/RES Bond",1)
					changeEntityStatBuff(victim,"SPD",7,"DEF/RES Bond",1)
			#Close Defence
			if getEntityRange(attacker) is 1:
				set {_attackerRange} to 1
			else if getEntityRange(attacker) is 3:
				set {_attackerRange} to 1
			if {_attackerRange} is 1:
				if checkSlots(victim,"Close Defence") is 1:
					changeEntityStatBuff(victim,"DEF",6,"Close Defence (Perk)",1)
					changeEntityStatBuff(victim,"RES",6,"Close Defence (Perk)",1)
			#Distant Defence
			if getEntityRange(attacker) is 2:
				set {_attackerRange} to 2
			else if getEntityRange(attacker) is 4:
				set {_attackerRange} to 2
			if {_attackerRange} is 2:
				if checkSlots(victim,"Distant Defence") is 1:
					changeEntityStatBuff(victim,"DEF",6,"Distant Defence (Perk)",1)
					changeEntityStatBuff(victim,"RES",6,"Distant Defence (Perk)",1)
			#Pass (In Combat)
			if distance between attacker and victim is less than 7:
				if getEntitySkillsInHand(attacker,"Pass",0,2) is more than 0:
					changeEntityStatBuff(attacker,"SPD",5,"Pass",1)
				if getEntitySkillsInHand(victim,"Pass",0,2) is more than 0:
					changeEntityStatBuff(victim,"SPD",5,"Pass",1)
				#Obstruct
				if getEntitySkillsInHand(attacker,"Obstruct",0,2) is more than 0:
					changeEntityStatBuff(victim,"STR",-5,"Obstruct",1)
					changeEntityStatBuff(victim,"MAG",-5,"Obstruct",1)
				if getEntitySkillsInHand(victim,"Obstruct",0,2) is more than 0:
					changeEntityStatBuff(attacker,"STR",-5,"Obstruct",1)
					changeEntityStatBuff(attacker,"MAG",-5,"Obstruct",1)
			#Boost skills
			if attacker's health is more than or equal to (victim's health - 3):
				if getEntitySkillsInHand(attacker,"Flame Boost",2,1) is more than 0:
					changeEntityStatBuff(attacker,"STR",5,"Flame Boost",1)
					changeEntityStatBuff(attacker,"MAG",5,"Flame Boost",1)
					changeEntityStatBuff(attacker,"SPD",5,"Flame Boost",1)
					heal the attacker by 2
				else if getEntitySkillsInHand(attacker,"Earth Boost",2,1) is more than 0:
					changeEntityStatBuff(attacker,"DEF",5,"Earth Boost",1)
					changeEntityStatBuff(attacker,"RES",5,"Earth Boost",1)
					heal the attacker by 4
				else if getEntitySkillsInHand(attacker,"Sacae's Grace",2,1) is more than 0:
					changeEntityStatBuff(attacker,"STR",7,"Sacae's Grace",1)
					changeEntityStatBuff(attacker,"MAG",7,"Sacae's Grace",1)
					changeEntityStatBuff(attacker,"SPD",7,"Sacae's Grace",1)
					set {_attackerSacaeGrace} to true
			else if victim's health is more than or equal to (attacker's health - 3):
				if getEntitySkillsInHand(victim,"Flame Boost",2,1) is more than 0:
					changeEntityStatBuff(victim,"STR",5,"Flame Boost",1)
					changeEntityStatBuff(victim,"MAG",5,"Flame Boost",1)
					changeEntityStatBuff(victim,"SPD",5,"Flame Boost",1)
					heal the victim by 2
				else if getEntitySkillsInHand(victim,"Earth Boost",2,1) is more than 0:
					changeEntityStatBuff(victim,"DEF",5,"Earth Boost",1)
					changeEntityStatBuff(victim,"RES",5,"Earth Boost",1)
					heal the victim by 4						
				else if getEntitySkillsInHand(victim,"Sacae's Grace",2,1) is more than 0:
					changeEntityStatBuff(victim,"STR",7,"Sacae's Grace",1)
					changeEntityStatBuff(victim,"MAG",7,"Sacae's Grace",1)
					changeEntityStatBuff(victim,"SPD",7,"Sacae's Grace",1)
					set {_victimSacaeGrace} to true
			if {_victimSacaeGrace} is not true:
				if getEntitySkillsInHand(victim,"Sacae's Grace",2,1) is more than 0:
					loop all players in radius 15 of the victim:
						if loop-player is not the victim:
							if {party.%loop-player%} is {party.%victim%}:
								changeEntityStatBuff(victim,"STR",7,"Sacae's Grace",1)
								changeEntityStatBuff(victim,"MAG",7,"Sacae's Grace",1)
								changeEntityStatBuff(victim,"SPD",7,"Sacae's Grace",1)
								set {_victimSacaeGrace} to true
								exit 1 loop
			if {_attackerSacaeGrace} is not true:
				if getEntitySkillsInHand(attacker,"Sacae's Grace",2,1) is more than 0:
					loop all players in radius 15 of the attacker:
						if loop-player is not the attacker:
							if {party.%loop-player%} is {party.%attacker%}:
								changeEntityStatBuff(attacker,"STR",7,"Sacae's Grace",1)
								changeEntityStatBuff(attacker,"MAG",7,"Sacae's Grace",1)
								changeEntityStatBuff(attacker,"SPD",7,"Sacae's Grace",1)
								set {_attackerSacaeGrace} to true
								exit 1 loop
			#Impact skills, grants large boost to stats if initiating combat + foe isn't combat tagged
			if {t_isCombatTagged.%victim%} is not set:
				if getEntitySkillsInHand(attacker,"Sturdy Impact",2,1) is more than 0:
					set {_debug} to changeEntityStatBuff(attacker,"STR",8,"Sturdy Impact",1)
					set {_debug} to changeEntityStatBuff(attacker,"DEF",10,"Sturdy Impact",1)
				if getEntitySkillsInHand(attacker,"Warding Impact",2,1) is more than 0:
					set {_debug} to changeEntityStatBuff(attacker,"MAG",8,"Warding Impact",1)
					set {_debug} to changeEntityStatBuff(attacker,"RES",10,"Warding Impact",1)
				if getEntitySkillsInHand(attacker,"Critical Impact",2,1) is more than 0:
					set {_debug} to changeEntityStatBuff(attacker,"SPD",8,"Critical Impact",1)
					set {_debug} to changeEntityStatBuff(attacker,"LCK",10,"Critical Impact",1)
			#Armour Smasher (Skill) - Nulls foe's armour damage resistance
			if getEntitySkillsInHand(attacker,"Armour Smasher",2,1) is more than 0:
				set damage to damage * (1 + (getEntityArmorDamageReduction(victim)))
			#Way of the Warrior [Trait]
			if {traits.%attacker%::Way of the Warrior} is set:
				set damage to damage * (1 + (getEntityArmorDamageReduction(victim)))		
			#Defiant/Brazen Skills, grants in-combat stats if the player's health is at or below 70%.
			if attacker's health is less than or equal to (attacker's maximum health * 0.7):
				if getEntitySkillsInHand(attacker,"Defiant STR",2,1) is more than 0:
					set {_defiantSTRActive.%attacker%} to changeEntityStatBuff(attacker,"STR",7,"Defiant STR",1)
				if getEntitySkillsInHand(attacker,"Defiant MAG",2,1) is more than 0:
					set {_defiantActive.%attacker%} to changeEntityStatBuff(attacker,"MAG",7,"Defiant MAG",1)
				if getEntitySkillsInHand(attacker,"Defiant SPD",2,1) is more than 0:
					set {_defiantActive.%attacker%} to changeEntityStatBuff(attacker,"SPD",7,"Defiant SPD",1)
				if getEntitySkillsInHand(attacker,"Defiant DEF",2,1) is more than 0:
					set {_defiantActive.%attacker%} to changeEntityStatBuff(attacker,"DEF",7,"Defiant DEF",1)
				if getEntitySkillsInHand(attacker,"Defiant RES",2,1) is more than 0:
					set {_defiantActive.%attacker%} to changeEntityStatBuff(attacker,"RES",7,"Defiant RES",1)
				#Brazen STR/DEF
				if checkSlots(attacker,"Brazen STR/DEF") is 1:
					set {_defiantSTRActive.%attacker%} to changeEntityStatBuff(attacker,"STR",7,"Brazen STR/DEF",1)
					set {_defiantActive.%attacker%} to changeEntityStatBuff(attacker,"DEF",7,"Brazen STR/DEF",1)
				#Brazen STR
				if checkSlots(attacker,"Brazen STR") is 1:
					set {_debug} to changeEntityStatBuff(attacker,"STR",9,"Brazen STR",1)
				#Brazen MAG
				if checkSlots(attacker,"Brazen MAG") is 1:
					set {_debug} to changeEntityStatBuff(attacker,"MAG",9,"Brazen MAG",1)
				#Brazen SPD
				if checkSlots(attacker,"Brazen SPD") is 1:
					set {_debug} to changeEntityStatBuff(attacker,"SPD",9,"Brazen SPD",1)		
				#Brazen LCK
				if checkSlots(attacker,"Brazen LCK") is 1:
					set {_debug} to changeEntityStatBuff(attacker,"LCK",9,"Brazen LCK",1)
				#Brazen DEF
				if checkSlots(attacker,"Brazen DEF") is 1:
					set {_debug} to changeEntityStatBuff(attacker,"DEF",9,"Brazen DEF",1)
				#Brazen RES
				if checkSlots(attacker,"Brazen RES") is 1:
					set {_debug} to changeEntityStatBuff(attacker,"RES",9,"Brazen RES",1)
				#Hot-Blooded Trait
				if {traits.%attacker%::Hot-Blooded} is true:
					set {_debug} to changeEntityStatBuff(attacker,"LCK",7,"Hot-Blooded [Trait]",1)
					set {_debug} to changeEntityStatBuff(attacker,"STR",7,"Hot-Blooded [Trait]",1)
					set {_debug} to changeEntityStatBuff(attacker,"MAG",7,"Hot-Blooded [Trait]",1)
					set {_debug} to changeEntityStatBuff(attacker,"DEF",-7,"Hot-Blooded [Trait]",1)
					set {_debug} to changeEntityStatBuff(attacker,"RES",-7,"Hot-Blooded [Trait]",1)
			#Victim case
			if victim's health is less than or equal to (victim's maximum health * 0.7):
				if getEntitySkillsInHand(victim,"Defiant STR",2,1) is more than 0:
					set {_defiantActive.%victim%} to changeEntityStatBuff(victim,"STR",7,"Defiant STR",1)
				if getEntitySkillsInHand(victim,"Defiant MAG",2,1) is more than 0:
					set {_defiantActive.%victim%} to changeEntityStatBuff(victim,"MAG",7,"Defiant MAG",1)
				if getEntitySkillsInHand(victim,"Defiant SPD",2,1) is more than 0:
					set {_defiantActive.%victim%} to changeEntityStatBuff(victim,"SPD",7,"Defiant SPD",1)
				if getEntitySkillsInHand(victim,"Defiant DEF",2,1) is more than 0:
					set {_defiantActive.%victim%} to changeEntityStatBuff(victim,"DEF",7,"Defiant DEF",1)
				if getEntitySkillsInHand(victim,"Defiant RES",2,1) is more than 0:
					set {_defiantActive.%victim%} to changeEntityStatBuff(victim,"RES",7,"Defiant RES",1)
				#Brazen STR/DEF
				if checkSlots(victim,"Brazen STR/DEF") is 1:
					set {_defiantSTRActive.%victim%} to changeEntityStatBuff(victim,"STR",7,"Brazen STR/DEF",1)
					set {_defiantActive.%victim%} to changeEntityStatBuff(victim,"DEF",7,"Brazen STR/DEF",1)
				#Brazen STR
				if checkSlots(victim,"Brazen STR") is 1:
					set {_debug} to changeEntityStatBuff(victim,"STR",9,"Brazen STR",1)
				#Brazen MAG
				if checkSlots(victim,"Brazen MAG") is 1:
					set {_debug} to changeEntityStatBuff(victim,"MAG",9,"Brazen MAG",1)
				#Brazen SPD
				if checkSlots(victim,"Brazen SPD") is 1:
					set {_debug} to changeEntityStatBuff(victim,"SPD",9,"Brazen SPD",1)		
				#Brazen LCK
				if checkSlots(victim,"Brazen LCK") is 1:
					set {_debug} to changeEntityStatBuff(victim,"LCK",9,"Brazen LCK",1)
				#Brazen DEF
				if checkSlots(victim,"Brazen DEF") is 1:
					set {_debug} to changeEntityStatBuff(victim,"DEF",9,"Brazen DEF",1)
				#Brazen RES
				if checkSlots(victim,"Brazen RES") is 1:
					set {_debug} to changeEntityStatBuff(victim,"RES",9,"Brazen RES",1)	
				#Hot-Blooded Trait
				if {traits.%victim%::Hot-Blooded} is true:
					set {_debug} to changeEntityStatBuff(victim,"LCK",7,"Hot-Blooded [Trait]",1)
					set {_debug} to changeEntityStatBuff(victim,"STR",7,"Hot-Blooded [Trait]",1)
					set {_debug} to changeEntityStatBuff(victim,"MAG",7,"Hot-Blooded [Trait]",1)
					set {_debug} to changeEntityStatBuff(victim,"DEF",-7,"Hot-Blooded [Trait]",1)
					set {_debug} to changeEntityStatBuff(victim,"RES",-7,"Hot-Blooded [Trait]",1)
			#"Seeker" summon deals 1.5x more damage
			if {npc_isSpecialSummon.%citizen id of attacker%} is "Seeker":
				add 10 to damage
				set damage to damage * 1.5
			#Crimson Cloud (Perk) [Attacker]
			if checkSlots(attacker,"Crimson Cloud") is 1:
				if {activeSummonCount.%attacker%} is more than 0:
					set {_debug} to changeEntityStatBuff(attacker,"STR",{activeSummonCount.%attacker%} * 3,"Crimson Cloud",1)
					set {_debug} to changeEntityStatBuff(attacker,"SPD",{activeSummonCount.%attacker%} * 3,"Crimson Cloud",1)
					set {_debug} to changeEntityStatBuff(attacker,"LCK",{activeSummonCount.%attacker%} * 3,"Crimson Cloud",1)
					set {_debug} to changeEntityStatBuff(attacker,"MAG",{activeSummonCount.%attacker%} * 3,"Crimson Cloud",1)
			#Crimson Cloud (Perk) [Victim]
			if checkSlots(victim,"Crimson Cloud") is 1:
				if {activeSummonCount.%victim%} is more than 0:
					set {_debug} to changeEntityStatBuff(victim,"STR",{activeSummonCount.%victim%} * 3,"Crimson Cloud",1)
					set {_debug} to changeEntityStatBuff(victim,"SPD",{activeSummonCount.%victim%} * 3,"Crimson Cloud",1)
					set {_debug} to changeEntityStatBuff(victim,"LCK",{activeSummonCount.%victim%} * 3,"Crimson Cloud",1)
					set {_debug} to changeEntityStatBuff(victim,"MAG",{activeSummonCount.%victim%} * 3,"Crimson Cloud",1)					
			#ATK/SPD Push (Skill) [attacker]
			if getEntitySkillsInHand(attacker,"ATK/SPD Push",2,1) is 1:
				if attacker's health is more than or equal to attacker's maximum health * 0.8:
					set {_debug} to changeEntityStatBuff(attacker,"SPD",7,"ATK/SPD Push (Skill)",1)
					set {_debug} to changeEntityStatBuff(attacker,"STR",7,"ATK/SPD Push (Skill)",1)
					set {_debug} to changeEntityStatBuff(attacker,"MAG",7,"ATK/SPD Push (Skill)",1)
					applyRecoilDamage(attacker,2)
			#ATK/DEF Push (Skill) [attacker]
			if getEntitySkillsInHand(attacker,"ATK/DEF Push",2,1) is 1:
				if attacker's health is more than or equal to attacker's maximum health * 0.8:
					set {_debug} to changeEntityStatBuff(attacker,"DEF",7,"ATK/DEF Push (Skill)",1)
					set {_debug} to changeEntityStatBuff(attacker,"STR",7,"ATK/DEF Push (Skill)",1)
					set {_debug} to changeEntityStatBuff(attacker,"MAG",7,"ATK/DEF Push (Skill)",1)
					applyRecoilDamage(attacker,2)
			#ATK/RES Push (Skill) [attacker]
			if getEntitySkillsInHand(attacker,"ATK/RES Push",2,1) is 1:
				if attacker's health is more than or equal to attacker's maximum health * 0.8:
					set {_debug} to changeEntityStatBuff(attacker,"RES",7,"ATK/RES Push (Skill)",1)
					set {_debug} to changeEntityStatBuff(attacker,"STR",7,"ATK/RES Push (Skill)",1)
					set {_debug} to changeEntityStatBuff(attacker,"MAG",7,"ATK/RES Push (Skill)",1)
					applyRecoilDamage(attacker,2)
			#DEF/RES Push (Skill) [attacker]
			if getEntitySkillsInHand(attacker,"DEF/RES Push",2,1) is 1:
				if attacker's health is more than or equal to attacker's maximum health * 0.8:
					set {_debug} to changeEntityStatBuff(attacker,"DEF",7,"DEF/RES Push (Skill)",1)
					set {_debug} to changeEntityStatBuff(attacker,"RES",7,"DEF/RES Push (Skill)",1)
					set {_debug} to changeEntityStatBuff(attacker,"LCK",7,"DEF/RES Push (Skill)",1)
					applyRecoilDamage(attacker,2)
			#ATK/SPD Push (Skill) [victim]
			if getEntitySkillsInHand(victim,"ATK/SPD Push",2,1) is 1:
				if victim's health is more than or equal to victim's maximum health * 0.8:
					set {_debug} to changeEntityStatBuff(victim,"SPD",7,"ATK/SPD Push (Skill)",1)
					set {_debug} to changeEntityStatBuff(victim,"STR",7,"ATK/SPD Push (Skill)",1)
					set {_debug} to changeEntityStatBuff(victim,"MAG",7,"ATK/SPD Push (Skill)",1)
			#ATK/DEF Push (Skill) [victim]
			if getEntitySkillsInHand(victim,"ATK/DEF Push",2,1) is 1:
				if victim's health is more than or equal to victim's maximum health * 0.8:
					set {_debug} to changeEntityStatBuff(victim,"DEF",7,"ATK/DEF Push (Skill)",1)
					set {_debug} to changeEntityStatBuff(victim,"STR",7,"ATK/DEF Push (Skill)",1)
					set {_debug} to changeEntityStatBuff(victim,"MAG",7,"ATK/DEF Push (Skill)",1)
			#ATK/RES Push (Skill) [victim]
			if getEntitySkillsInHand(victim,"ATK/RES Push",2,1) is 1:
				if victim's health is more than or equal to victim's maximum health * 0.8:
					set {_debug} to changeEntityStatBuff(victim,"RES",7,"ATK/RES Push (Skill)",1)
					set {_debug} to changeEntityStatBuff(victim,"STR",7,"ATK/RES Push (Skill)",1)
					set {_debug} to changeEntityStatBuff(victim,"MAG",7,"ATK/RES Push (Skill)",1)
			#DEF/RES Push (Skill) [victim]
			if getEntitySkillsInHand(victim,"DEF/RES Push",2,1) is 1:
				if victim's health is more than or equal to victim's maximum health * 0.8:
					set {_debug} to changeEntityStatBuff(victim,"DEF",7,"DEF/RES Push (Skill)",1)
					set {_debug} to changeEntityStatBuff(victim,"RES",7,"DEF/RES Push (Skill)",1)
					set {_debug} to changeEntityStatBuff(victim,"LCK",7,"DEF/RES Push (Skill)",1)
			#Heavy/Flashing Blade Skills
			if getEntitySkillsInHand(attacker,"Heavy Blade",2,1) is more than 0:
				if getEntityStatTotal(attacker,"STR") is more than getEntityStatTotal(victim,"STR"):
					set {_lckBonus} to floor((getEntityStatTotal(attacker,"STR")) - (getEntityStatTotal(victim,"STR")))
					if {_lckBonus} is more than 20:
						set {_lckBonus} to 20
					set {_debug} to changeEntityStatBuff(attacker,"LCK",{_lckBonus},"Heavy Blade",1)
					add ({_lckBonus} / 2) to damage
			if getEntitySkillsInHand(attacker,"Flashing Blade",2,1) is more than 0:
				if getEntityStatTotal(attacker,"SPD") is more than getEntityStatTotal(victim,"SPD"):
					set {_lckBonus} to floor((getEntityStatTotal(attacker,"SPD")) - (getEntityStatTotal(victim,"SPD")))
					if {_lckBonus} is more than 20:
						set {_lckBonus} to 20
					set {_debug} to changeEntityStatBuff(attacker,"LCK",{_lckBonus},"Flashing Blade",1)
					add ({_lckBonus} / 2) to damage
			#Blazing Storm
			if getEntitySkillsInHand(attacker,"Blazing Storm",2,1) is more than 0:
				if attacker's health is more than or equal to (attacker's maximum health * 0.8):
					if {t_isCombatTagged.%attacker%} is set:
						set {_debug} to changeEntityStatBuff(attacker,"STR",5,"Blazing Storm",1)
						set {_debug} to changeEntityStatBuff(attacker,"SPD",5,"Blazing Storm",1)
						set {_debug} to changeEntityStatBuff(attacker,"MAG",5,"Blazing Storm",1)
						set {_debug} to changeEntityStatBuff(attacker,"LCK",5,"Blazing Storm",1)
						chance of 50%:
							applyOOCStatusEffect(victim,"Dazed",1)
							send formatted "<gold>Victim was Dazed by Blazing Storm!" to the attacker
			#Close Call (Skill)
			if getEntitySkillsInHand(victim,"Close Call",0,2) is more than 0:
				if getEntityStatTotal(victim,"SPD") is more than getEntityStatTotal(attacker,"SPD"):
					set {_CCDamageReduction} to (((getEntityStatTotal(victim,"SPD")) - (getEntityStatTotal(attacker,"SPD"))) * 4)
					if {_CCDamageReduction} is more than 40:
						set {_CCDamageReduction} to 40
					set damage to damage * (1 - ({_CCDamageReduction} / 100))
			#Dragon Wall (Skill)
			if getEntitySkillsInHand(victim,"Dragon Wall",0,2) is more than 0:
				if getEntityStatTotal(victim,"RES") is more than getEntityStatTotal(attacker,"RES"):
					set {_CCDamageReduction} to (((getEntityStatTotal(victim,"RES")) - (getEntityStatTotal(attacker,"RES"))) * 4)
					if {_CCDamageReduction} is more than 40:
						set {_CCDamageReduction} to 40
					set damage to damage * (1 - ({_CCDamageReduction} / 100))
			#Deadly Balance
			if attacker's health is less than victim's health:
				if getEntityStatTotal(victim,"SPD") is more than getEntityStatTotal(attacker,"SPD"):
					set {_deadlyBalanceBonus} to (victim's health - attacker's health) * 2.5
					if {_deadlyBalanceBonus} is more than 50:
						set {_deadlyBalanceBonus} to 50
					set damage to damage * (1 + ({_deadlyBalanceBonus} / 100))
			#Rage - Attacker
			if getEntitySkillsInHand(attacker,"Rage",2,1) is more than 0:
				set {_debug} to changeEntityStatBuff(attacker,"STR",9,"Rage",1)
				set {_debug} to changeEntityStatBuff(attacker,"SPD",9,"Rage",1)
				set {_debug} to changeEntityStatBuff(attacker,"LCK",9,"Rage",1)
				set {_debug} to changeEntityStatBuff(attacker,"DEF",9,"Rage",1)
				set {_debug} to changeEntityStatBuff(attacker,"RES",9,"Rage",1)
				set {_debug} to changeEntityStatBuff(attacker,"MAG",9,"Rage",1)
			#Rage - Victim
			if getEntitySkillsInHand(victim,"Rage",2,1) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"STR",9,"Rage",1)
				set {_debug} to changeEntityStatBuff(victim,"SPD",9,"Rage",1)
				set {_debug} to changeEntityStatBuff(victim,"LCK",9,"Rage",1)
				set {_debug} to changeEntityStatBuff(victim,"DEF",9,"Rage",1)
				set {_debug} to changeEntityStatBuff(victim,"RES",9,"Rage",1)
				set {_debug} to changeEntityStatBuff(victim,"MAG",9,"Rage",1)
			#Magic Wall
			if {t_magicWallDamageReduction.%victim%} is set:
				set damage to damage * {t_magicWallDamageReduction.%victim%}
				if {verboseCombatLogging.%victim%} is true:
					send formatted "<white>Magic Wall reduces damage by: <gold>%100 * {t_magicWallDamageReduction.%victim%}%pct" to the victim
			#Windsweep (Skill)
			if getEntitySkillsInHand(attacker,"Windsweep",0,2) is more than 0:
				if (getEntityStatTotal(attacker,"SPD")) is more than ((getEntityStatTotal(victim,"SPD")) + 5):
					set {_disableAutoCounters} to true
					apply weakness 4 to the victim for 4 seconds
			#Heavy Blade (Perk)
			if checkSlots(attacker,"Heavy Blade") is 1:
				if getEntityStatTotal(attacker,"STR") is more than getEntityStatTotal(victim,"STR"):
					set {_lckBonus} to floor((getEntityStatTotal(attacker,"STR")) - (getEntityStatTotal(victim,"STR")))
					if {_lckBonus} is more than 20:
						set {_lckBonus} to 20
					set {_debug} to changeEntityStatBuff(attacker,"LCK",{_lckBonus},"Heavy Blade (Perk)",1)
					add ({_lckBonus} / 2) to damage
			#Scendscale (Perk)
			if checkSlots(attacker,"Scendscale") is 1:
				if attacker's health is equal to attacker's maximum health:
					add ((getEntityStatTotal(attacker,"STR")) * 0.2) to damage
					applyRecoilDamage(attacker,2.5)
					add 1 to {t_cos_doubleattacks.%attacker%}
			#Brave Impact (Perk)
			if checkSlots(attacker,"Brave Impact") is 1:
				if {t_isCombatTagged.%victim%} is not set:
					changeEntityStatBuff(attacker,"STR",7,"Brave Impact (Perk)",1)
					changeEntityStatBuff(attacker,"DEF",7,"Brave Impact (Perk)",1)
					add 1 to {t_cos_doubleattacks.%attacker%}
			#Stamina Drink (Perk)
			if checkSlots(attacker,"Stamina Drink") is 1:
				changeEntityStatBuff(attacker,"SpecialAcceleration",10,"Stamina Drink (Perk)",1)
			#Stamina Drink (Perk)
			if checkSlots(victim,"Stamina Drink") is 1:
				changeEntityStatBuff(victim,"SpecialAcceleration",10,"Stamina Drink (Perk)",1)
			#Shrug It Off (Perk)
			if checkSlots(victim,"Shrug It Off") is 1:
				if victim's health is less than or equal to victim's maximum health * 0.8:
					set damage to damage * 0.7
			#Hardy Bearing (Perk) (Attacker)
			if checkSlots(attacker,"Hardy Bearing") is 1:
				if attacker's health is more than or equal to (attacker's maximum health * 0.5):
					set {_debug} to changeEntityStatBuff(victim,"LCK",-15,"Hardy Bearing (Perk)",1)
					set {_disableAutoCounters} to true
			#Hardy Bearing (Perk) (victim)
			if checkSlots(victim,"Hardy Bearing") is 1:
				if victim's health is more than or equal to (victim's maximum health * 0.5):
					set {_debug} to changeEntityStatBuff(attacker,"LCK",-15,"Hardy Bearing (Perk)",1)
					set {_disableAutoCounters} to true
			#Bracing Stance (Perk)
			if checkSlots(victim,"Bracing Stance") is 1:
				set {_debug} to changeEntityStatBuff(victim,"DEF",4,"Bracing Stance (Perk)",1)
				set {_debug} to changeEntityStatBuff(victim,"RES",4,"Bracing Stance (Perk)",1)
			#Claustrophobic [Trait]
			if {traits.%attacker%::Claustrophobic} is set:
				loop all players in radius 7 of the attacker:
					if loop-player is not the attacker:
						set {_claustrophobicApplyDebuff} to true
				if {_claustrophobicApplyDebuff} is not true:
					loop all monsters in radius 7 of the attacker:
						set {_claustrophobicApplyDebuff} to true
				if {_claustrophobicApplyDebuff} is true:
					changeEntityStatBuff(attacker,"STR",-4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(attacker,"MAG",-4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(attacker,"SPD",-4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(attacker,"LCK",-4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(attacker,"CHR",-4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(attacker,"DEF",-4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(attacker,"RES",-4,"Claustrophobic (Trait)",1)
				else:
					changeEntityStatBuff(attacker,"STR",4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(attacker,"MAG",4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(attacker,"SPD",4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(attacker,"LCK",4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(attacker,"CHR",4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(attacker,"DEF",4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(attacker,"RES",4,"Claustrophobic (Trait)",1)	
			#Claustrophobic [Trait] [Victim]
			if {traits.%victim%::Claustrophobic} is set:
				loop all players in radius 7 of the victim:
					if loop-player is not the victim:
						set {_claustrophobicApplyDebuff} to true
				if {_claustrophobicApplyDebuff} is not true:
					loop all monsters in radius 7 of the victim:
						set {_claustrophobicApplyDebuff} to true
				if {_claustrophobicApplyDebuff} is true:
					changeEntityStatBuff(victim,"STR",-4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(victim,"MAG",-4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(victim,"SPD",-4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(victim,"LCK",-4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(victim,"CHR",-4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(victim,"DEF",-4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(victim,"RES",-4,"Claustrophobic (Trait)",1)
				else:
					changeEntityStatBuff(victim,"STR",4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(victim,"MAG",4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(victim,"SPD",4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(victim,"LCK",4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(victim,"CHR",4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(victim,"DEF",4,"Claustrophobic (Trait)",1)
					changeEntityStatBuff(victim,"RES",4,"Claustrophobic (Trait)",1)
			#Hoarder [Trait]
			if {traits.%attacker%::Hoarder} is set:
				if attacker's money is less than 100:
					changeEntityStatBuff(attacker,"STR",-5,"Hoarder (Trait)",1)
					changeEntityStatBuff(attacker,"MAG",-5,"Hoarder (Trait)",1)
					changeEntityStatBuff(attacker,"SPD",-5,"Hoarder (Trait)",1)
					changeEntityStatBuff(attacker,"LCK",-5,"Hoarder (Trait)",1)
					changeEntityStatBuff(attacker,"CHR",-5,"Hoarder (Trait)",1)
					changeEntityStatBuff(attacker,"DEF",-5,"Hoarder (Trait)",1)
					changeEntityStatBuff(attacker,"RES",-5,"Hoarder (Trait)",1)		
			#Hoarder [Trait] [Victim]
			if {traits.%victim%::Hoarder} is set:
				if victim's money is less than 100:
					changeEntityStatBuff(victim,"STR",-5,"Hoarder (Trait)",1)
					changeEntityStatBuff(victim,"MAG",-5,"Hoarder (Trait)",1)
					changeEntityStatBuff(victim,"SPD",-5,"Hoarder (Trait)",1)
					changeEntityStatBuff(victim,"LCK",-5,"Hoarder (Trait)",1)
					changeEntityStatBuff(victim,"CHR",-5,"Hoarder (Trait)",1)
					changeEntityStatBuff(victim,"DEF",-5,"Hoarder (Trait)",1)
					changeEntityStatBuff(victim,"RES",-5,"Hoarder (Trait)",1)						
			#DEF/RES Solo (Perk) (Victim)
			if checkSlots(victim,"DEF/RES Solo") is 1:
				if {party.%victim%} is not set:
					set {_debug} to changeEntityStatBuff(victim,"DEF",5,"DEF/RES Solo (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"RES",5,"DEF/RES Solo (Perk)",1)					
				else:
					set {_denySoloSkill} to false
					loop all players in radius 10 of the victim:
						if {party.%loop-player%} is {party.%victim%}:
							set {_denySoloSkill} to true
					if {_denySoloSkill} is false:
						set {_debug} to changeEntityStatBuff(victim,"DEF",5,"DEF/RES Solo (Perk)",1)
						set {_debug} to changeEntityStatBuff(victim,"RES",5,"DEF/RES Solo (Perk)",1)
			#DEF/RES Solo (Perk) (Attacker)
			if checkSlots(attacker,"DEF/RES Solo") is 1:
				if {party.%attacker%} is not set:
					set {_debug} to changeEntityStatBuff(attacker,"DEF",5,"DEF/RES Solo (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"RES",5,"DEF/RES Solo (Perk)",1)					
				else:
					set {_denySoloSkill} to false
					loop all players in radius 10 of the attacker:
						if {party.%loop-player%} is {party.%attacker%}:
							set {_denySoloSkill} to true
					if {_denySoloSkill} is false:
						set {_debug} to changeEntityStatBuff(attacker,"DEF",5,"DEF/RES Solo (Perk)",1)
						set {_debug} to changeEntityStatBuff(attacker,"RES",5,"DEF/RES Solo (Perk)",1)
			#DEF/RES Solo (Perk) (Victim)
			if checkSlots(victim,"STR/SPD Solo") is 1:
				if {party.%victim%} is not set:
					set {_debug} to changeEntityStatBuff(victim,"STR",7,"STR/SPD Solo (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"SPD",7,"STR/SPD Solo (Perk)",1)					
				else:
					set {_denySoloSkill} to false
					loop all players in radius 20 of the victim:
						if {party.%loop-player%} is {party.%victim%}:
							set {_denySoloSkill} to true
					if {_denySoloSkill} is false:
						set {_debug} to changeEntityStatBuff(victim,"STR",7,"STR/SPD Solo (Perk)",1)
						set {_debug} to changeEntityStatBuff(victim,"SPD",7,"STR/SPD Solo (Perk)",1)
			#DEF/RES Solo (Perk) (Attacker)
			if checkSlots(attacker,"STR/SPD Solo") is 1:
				if {party.%attacker%} is not set:
					set {_debug} to changeEntityStatBuff(attacker,"STR",7,"STR/SPD Solo (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"SPD",7,"STR/SPD Solo (Perk)",1)					
				else:
					set {_denySoloSkill} to false
					loop all players in radius 20 of the attacker:
						if {party.%loop-player%} is {party.%attacker%}:
							set {_denySoloSkill} to true
					if {_denySoloSkill} is false:
						set {_debug} to changeEntityStatBuff(attacker,"STR",7,"STR/SPD Solo (Perk)",1)
						set {_debug} to changeEntityStatBuff(attacker,"SPD",7,"STR/SPD Solo (Perk)",1)
			#Skim the Books (Perk)
			if checkSlots(attacker,"Skim the Books") is 1:
				if attacker's tool is any axe:
					set {_debug} to changeEntityStatBuff(attacker,"STR",4,"Skim the Books (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"DEF",4,"Skim the Books (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"RES",4,"Skim the Books (Perk)",1)
			#Skim the Books (Perk)
			if checkSlots(victim,"Skim the Books") is 1:
				if victim's tool is any axe:
					set {_debug} to changeEntityStatBuff(victim,"STR",4,"Skim the Books (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"DEF",4,"Skim the Books (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"RES",4,"Skim the Books (Perk)",1)
			#Flame Boost II (Perk)
			if checkSlots(attacker,"Flame Boost II") is 1:
				if attacker's health is more than or equal to (victim's health + 3):
					set {_debug} to changeEntityStatBuff(attacker,"STR",6,"Flame Boost II (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"DEF",6,"Flame Boost II (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"RES",6,"Flame Boost II (Perk)",1)		
					set {_debug} to changeEntityStatBuff(attacker,"SpecialAcceleration",10,"Flame Boost II (Perk)",1)
			#Secret Training (Perk)
			if checkSlots(attacker,"Secret Training") is 1:
				if attacker's tool is any hoe:
					add 5 to damage
					if (getEntityStatTotal(attacker,"MAG")) is more than (getEntityStatTotal(attacker,"STR")):
						set {_magical} to 1
			#Glory Kills (Perk)
			if checkSlots(attacker,"Glory Kill") is 1:
				if isEntityToolAir(attacker) is true:
					set damage to damage * 2
			#By a Thread (Perk)
			if checkSlots(attacker,"By a Thread") is 1:
				if attacker's health is less than or equal to attacker's maximum health * 0.5:
					set {_debug} to changeEntityStatBuff(attacker,"STR",7,"By a Thread (Perk)",1)
					add ((attacker's maximum health - attacker's health) * 0.3) to damage
			#Indomitable Will (Perk)
			if checkSlots(attacker,"Indomitable Will") is 1:
				if attacker's health is more than or equal to attacker's maximum health * 0.8:
					set damage to damage * (1 + (getEntityArmorDamageReduction(victim)))
			#Electro Heart (Perk)
			if checkSlots(attacker,"Electro Heart") is 1:
				if {dtActive.%attacker%} is true:
					set damage to damage * (1 + (getEntityArmorDamageReduction(victim)))
					strike lightning effect at the victim
			#Charged Shot
			if checkSlots(attacker,"Charged Shot") is 1:
				if {dtActive.%attacker%} is true:
					if projectile exists:
						set damage to damage * 1.2
						applyOOCStatusEffect(victim,"Dazed",1)
			#Steady Breath (Perk)
			if checkSlots(victim,"Steady Breath") is 1:
				set {_debug} to changeEntityStatBuff(victim,"DEF",2,"Steady Breath (Perk)",1)
				set {_debug} to changeEntityStatBuff(victim,"RES",2,"Steady Breath (Perk)",1)
				set {_debug} to changeEntityStatBuff(victim,"SpecialAcceleration",10,"Steady Breath (Perk)",1)
			#Daring Fighter (Perk) (Attacker)
			if checkSlots(attacker,"Daring Fighter") is 1:
				set {_debug} to changeEntityStatBuff(attacker,"SPD",5,"Daring Fighter (Perk)",1)
				set {_debug} to changeEntityStatBuff(attacker,"LCK",5,"Daring Fighter (Perk)",1)
				set {_debug} to changeEntityStatBuff(attacker,"SpecialAcceleration",5,"Daring Fighter (Perk)",1)
			#Daring Fighter (Perk) (Victim)
			if checkSlots(victim,"Daring Fighter") is 1:
				set {_debug} to changeEntityStatBuff(victim,"SPD",5,"Daring Fighter (Perk)",1)
				set {_debug} to changeEntityStatBuff(victim,"LCK",5,"Daring Fighter (Perk)",1)
				set {_debug} to changeEntityStatBuff(victim,"SpecialAcceleration",5,"Daring Fighter (Perk)",1)
			#Windsweep (Perk)
			if checkSlots(attacker,"Windsweep") is 1:
				if (getEntityStatTotal(attacker,"SPD")) is more than ((getEntityStatTotal(victim,"SPD")) + 5):
					set {_disableAutoCounters} to true
					apply weakness 4 to the victim for 4 seconds
			#ATK/SPD Push (Perk)
			if checkSlots(attacker,"ATK/SPD Push") is 1:
				if attacker's health is more than or equal to attacker's maximum health * 0.8:
					set {_debug} to changeEntityStatBuff(attacker,"SPD",7,"ATK/SPD Push (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"STR",7,"ATK/SPD Push (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"MAG",7,"ATK/SPD Push (Perk)",1)
			#Close Call (Perk)
			if checkSlots(victim,"Close Call") is 1:
				if getEntityStatTotal(victim,"SPD") is more than getEntityStatTotal(attacker,"SPD"):
					set {_CCDamageReduction} to (((getEntityStatTotal(victim,"SPD")) - (getEntityStatTotal(attacker,"SPD"))) * 4)
					if {_CCDamageReduction} is more than 40:
						set {_CCDamageReduction} to 40
					set damage to damage * (1 - ({_CCDamageReduction} / 100))
			#ATK +6 (Perk)
			if checkSlots(attacker,"ATK +6") is 1:
				add 6 to damage
			#Lifetaker (Perk)
			if checkSlots(attacker,"Lifetaker") is 1:
				heal the attacker by damage * 0.1
			#Breath of Life (Perk)
			if checkSlots(attacker,"Breath of Life") is 1:
				loop all players in radius 30 of the attacker:
					if {party.%loop-player%} is {party.%attacker%}:
						if loop-player is not the attacker:
							heal loop-player by 6 hearts
			#Swift Strike
			if checkSlots(attacker,"Swift Strike") is 1:
				if attacker's health is more than or equal to (attacker's maximum health * 0.5):
					set {_debug} to changeEntityStatBuff(attacker,"STR",5,"Swift Strike (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"SPD",5,"Swift Strike (Perk)",1)
					apply swiftness 2 to the attacker for 2 seconds
			#Hidden Thorn (Perk)
			if checkSlots(attacker,"Hidden Thorn") is 1:
				if {_magical} is 1:
					if (getEntityStatTotal(attacker,"MAG")) is less than (getEntityStatTotal(victim,"MAG")):
						set {_HTBonusDamage} to (((getEntityStatTotal(attacker,"MAG")) - (getEntityStatTotal(victim,"MAG"))) * 0.5)
						if {_HTBonusDamage} is more than 20:
							set {_HTBonusDamage} to 20
						add {_HTBonusDamage} to damage
				else:
					if (getEntityStatTotal(attacker,"STR")) is less than (getEntityStatTotal(victim,"STR")):
						set {_HTBonusDamage} to (((getEntityStatTotal(attacker,"STR")) - (getEntityStatTotal(victim,"STR"))) * 0.5)
						if {_HTBonusDamage} is more than 20:
							set {_HTBonusDamage} to 20
						add {_HTBonusDamage} to damage
			#Heavy Draw (Perk)
			if checkSlots(attacker,"Heavy Draw") is 1:
				set {_HDBonusDamage} to (distance between attacker and victim * 0.25)
				if {_HDBonusDamage} is more than 10:
					set {_HDBonusDamage} to 10
				add {_HDBonusDamage} to damage
			#Lunar Arc (Perk)
			if checkSlots(attacker,"Lunar Arc") is 1:
				set {_LABonusDamage} to (((getEntityStatTotal(victim,"DEF")) + (getEntityStatTotal(victim,"RES"))) * 0.1)
				add {_LABonusDamage} to damage
			#More than Magic (Perk)
			if {t_MoreThanMagicBonusActive.%attacker%} is set:
				set damage to damage * 1.2
			#Dual Strike
			if checkSlots(attacker,"Dual Strike") is 1:
				if attacker's health is more than or equal to (attacker's maximum health * 0.7):
					loop all players in radius 10 of the attacker:
						if {party.%loop-player%} is {party.%attacker%}:
							if loop-player is not the attacker:
								if {_magical} is not 1:
									add floor((getEntityStatTotal(loop-player,"STR")) * 0.1) to damage
								else:
									add floor((getEntityStatTotal(loop-player,"MAG")) * 0.1) to damage
								set {_odds} to getEntityStatTotal(loop-player,"LCK")
								set {_odds} to floor({_odds} / 4)
								if {_odds} is more than 100:
									set {_odds} to 100
								chance of {_odds}%:
									add 1 to {t_cos_doubleattacks.%attacker%}
									send formatted "<light purple>Dual Strike was activated!" to the attacker
									if {quotesToggle.%attacker%} is true:
										set {_quoteRNG} to random integer between 1 and 4
										make attacker say "<light purple>[%victim's tablist name%'s Dual Strike] %{characterQuotes.%victim%::SpecialProc%{_quoteRNG}%}%"
								exit 1 loop
			#Headshotting
			if projectile exists:
				set {_allowHeadshots} to checkSlots(attacker,"Precision")
				if {_allowHeadshots} is 1:
					#send "<light green>%victim's y-coordinate%" to the attacker
					#send "<orange>%projectile's y-coordinate%" to the attacker
					if projectile's y-coordinate is more than or equal to (victim's y-coordinate + 1.4 - (projectile's y-coordinate - victim's y-coordinate)):
						if projectile's y-coordinate is less than or equal to (victim's y-coordinate + 2 - (projectile's y-coordinate - victim's y-coordinate)):
							send "<orange>Headshot!" to the attacker
							set damage to damage * 3
							play 10 (firework spark with speed 0) at the projectile
							play sound "block.anvil.land" with volume 1.5 and pitch 2 at the attacker
			#Divine Blessing (Perk)
			if checkSlots(attacker,"Divine Blessing") is 1:
				if attacker has regeneration:
					heal the attacker by damage * 0.25
				else if attacker has absorption:
					heal the attacker by damage * 0.25
			#Scathing Blow (Perk) (In-Combat)
			if checkSlots(attacker,"Scathing Blow") is 1:
				if attacker's health is attacker's maximum health:
					set {_debug} to changeEntityStatBuff(attacker,"STR",4,"Scathing Blow (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"MAG",4,"Scathing Blow (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"DEF",4,"Scathing Blow (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"RES",4,"Scathing Blow (Perk)",1)
			#Power of Gods (Perk) (Attacker)
			if checkSlots(attacker,"Power of Gods") is 1:
				set {_positivePotionEffects} to 0
				if attacker has strength:
					add 1 to {_positivePotionEffects}
				if attacker has swiftness:
					add 1 to {_positivePotionEffects}
				if attacker has regeneration:
					add 1 to {_positivePotionEffects}
				if attacker has resistance:
					add 1 to {_positivePotionEffects}
				if attacker has absorption:
					add 1 to {_positivePotionEffects}
				if {_positivePotionEffects} is more than or equal to 1:
					set {_debug} to changeEntityStatBuff(attacker,"STR",4,"Power of Gods (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"MAG",4,"Power of Gods (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"SPD",4,"Power of Gods (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"DEF",4,"Power of Gods (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"RES",4,"Power of Gods (Perk)",1)
				if {_positivePotionEffects} is more than or equal to 2:
					set {_ignoreSPDCheck} to true
					add 1 to {t_cos_doubleattacks.%attacker%}
				if {_positivePotionEffects} is more than or equal to 3:
					set {_disableAutoCounters} to true
					clear {t_cos_doubleattacks.%victim%}
				if {_positivePotionEffects} is more than or equal to 4:
					set {_debug} to changeEntityStatBuff(attacker,"STR",6,"Power of Gods (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"MAG",6,"Power of Gods (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"SPD",6,"Power of Gods (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"DEF",6,"Power of Gods (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"RES",6,"Power of Gods (Perk)",1)
					set {_pogRecoilDamage} to attacker's maximum health * 0.2
					applyRecoilDamage(attacker,{_pogRecoilDamage})
			#Power of Gods (Perk) (Attacker)
			if checkSlots(attacker,"Power of Gods") is 1:
				set {_positivePotionEffects} to 0
				if victim has strength:
					add 1 to {_positivePotionEffects}
				if victim has swiftness:
					add 1 to {_positivePotionEffects}
				if victim has regeneration:
					add 1 to {_positivePotionEffects}
				if victim has resistance:
					add 1 to {_positivePotionEffects}
				if victim has absorption:
					add 1 to {_positivePotionEffects}
				if {_positivePotionEffects} is more than or equal to 1:
					set {_debug} to changeEntityStatBuff(victim,"STR",4,"Power of Gods (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"MAG",4,"Power of Gods (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"DEF",4,"Power of Gods (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"RES",4,"Power of Gods (Perk)",1)
				if {_positivePotionEffects} is more than or equal to 2:
					set {_ignoreSPDCheck} to true
					add 1 to {t_cos_doubleattacks.%victim%}
				if {_positivePotionEffects} is more than or equal to 3:
					set {_disableAutoCounters} to true
					clear {t_cos_doubleattacks.%attacker%}
				if {_positivePotionEffects} is more than or equal to 4:
					set {_debug} to changeEntityStatBuff(victim,"STR",6,"Power of Gods (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"MAG",6,"Power of Gods (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"DEF",6,"Power of Gods (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"RES",6,"Power of Gods (Perk)",1)
					set {_pogRecoilDamage} to victim's maximum health * 0.2
					applyRecoilDamage(victim,{_pogRecoilDamage})
			#Devil's Sentence (Perk)
			if checkSlots(attacker,"Devil's Sentence") is 1:
				if attacker's health is more than or equal to attacker's maximum health * 0.5:
					if getEntityStatBuff(victim,"STR") is less than 0:
						set {_debug} to changeEntityStatBuff(victim,"STR",(getEntityStatBuff(victim,"STR")),"Devil's Sentence (Perk)",1)
					if getEntityStatBuff(victim,"MAG") is less than 0:
						set {_debug} to changeEntityStatBuff(victim,"MAG",(getEntityStatBuff(victim,"MAG")),"Devil's Sentence (Perk)",1)
					if getEntityStatBuff(victim,"SPD") is less than 0:
						set {_debug} to changeEntityStatBuff(victim,"SPD",(getEntityStatBuff(victim,"SPD")),"Devil's Sentence (Perk)",1)
					if getEntityStatBuff(victim,"DEF") is less than 0:
						set {_debug} to changeEntityStatBuff(victim,"DEF",(getEntityStatBuff(victim,"DEF")),"Devil's Sentence (Perk)",1)
					if getEntityStatBuff(victim,"RES") is less than 0:
						set {_debug} to changeEntityStatBuff(victim,"RES",(getEntityStatBuff(victim,"RES")),"Devil's Sentence (Perk)",1)
			#Master of All (Perk)
			if checkSlots(attacker,"Master of All") is 1:
				if attacker's health is more than or equal to attacker's maximum health * 0.5:
					if attacker is riding a horse:
						set {_debug} to changeEntityStatBuff(attacker,"STR",6,"Master of All (Perk)",1)
						set {_debug} to changeEntityStatBuff(attacker,"MAG",6,"Master of All (Perk)",1)
						set {_debug} to changeEntityStatBuff(attacker,"SPD",6,"Master of All (Perk)",1)
			#Isolation (Perk) (Attacker)
			if checkSlots(attacker,"Isolation") is 1:
				set {_foes} to 0
				loop all entities in radius 7 of the attacker:
					if loop-entity is monster:
						add 1 to {_foes}
					else if loop-entity is player:
						if {party.%loop-entity%} is not {party.%attacker%}:
							add 1 to {_foes}
				if {_foes} is less than or equal to 2:
					set {_debug} to changeEntityStatBuff(victim,"STR",-7,"Isolation (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"MAG",-7,"Isolation (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"SPD",-7,"Isolation (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"DEF",-7,"Isolation (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"RES",-7,"Isolation (Perk)",1)
			#Isolation (Perk) (victim)
			if checkSlots(victim,"Isolation") is 1:
				set {_foes} to 0
				loop all entities in radius 7 of the victim:
					if loop-entity is monster:
						add 1 to {_foes}
					else if loop-entity is player:
						if {party.%loop-entity%} is not {party.%victim%}:
							add 1 to {_foes}
				if {_foes} is less than or equal to 2:
					set {_debug} to changeEntityStatBuff(attacker,"STR",-7,"Isolation (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"MAG",-7,"Isolation (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"SPD",-7,"Isolation (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"DEF",-7,"Isolation (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"RES",-7,"Isolation (Perk)",1)
			#Shroud of Shadow (Perk)
			if checkSlots(attacker,"Shroud of Shadow") is 1:
				set {_foes} to 0
				loop all entities in radius 7 of the victim:
					if loop-entity is monster:
						add 1 to {_foes}
					else if loop-entity is player:
						if {party.%loop-entity%} is not {party.%victim%}:
							add 1 to {_foes}
				if {_foes} is more than or equal to 3:
					set {_debug} to changeEntityStatBuff(attacker,"DEF",-6,"Shroud of Shadow (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"RES",-6,"Shroud of Shadow (Perk)",1)
					set {_attackerSoSDebuffOK} to true
			#Angel of Death (Perk)
			if checkSlots(attacker,"Angel of Death") is 1:
				set {_foes} to 0
				set {_allies} to 0
				loop all entities in radius 10 of the attacker:
					if loop-entity is monster:
						add 1 to {_foes}
					else if loop-entity is player:
						if {party.%loop-entity%} is not {party.%victim%}:
							add 1 to {_foes}
						else:
							add 1 to {_allies}
				if {_foes} is more than {_allies}:
					set {_debug} to changeEntityStatBuff(attacker,"STR",6,"Angel of Death (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"MAG",6,"Angel of Death (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"SPD",6,"Angel of Death (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"SpecialAcceleration",10,"Angel of Death (Perk)",1)
			#Critical Solo (Perk)
			if checkSlots(attacker,"Critical Solo") is 1:
				set {_disableSolo} to false
				loop all players in radius 10 of the attacker:
					if loop-player is not the attacker:
						if {party.%loop-player%} is {party.%attacker%}:
							set {_disableSolo} to true
							exit 1 loop
				if {_disableSolo} is not true:
					set {_debug} to changeEntityStatBuff(attacker,"SPD",10,"Critical Solo (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"LCK",10,"Critical Solo (Perk)",1)
			#Blood Pact (Perk) (Apply)
			if checkSlots(attacker,"Blood Pact") is 1:
				if {t_isCombatTagged.%victim%} is not set:
					if {t_isCombatTagged.%attacker%} is not set:
						set {t_bloodPactTarget.%attacker%} to the victim
						play 20 (redstone block break with speed 1) at the victim
						send formatted "<light red><bold>Blood Pact formed with the enemy!" to the attacker
						send formatted "<light red><bold>Blood Pact formed with %attacker%! Any damage they take, you take as well!" to the victim
			#Blood Pact (Perk) (Damage Mirroring)
			if checkSlots(victim,"Blood Pact") is 1:
				if {t_bloodPactTarget.%victim%} is set:
					damage {t_bloodPactTarget.%victim%} by damage / 2
					play 20 (redstone block break with speed 1) at {t_bloodPactTarget.%victim%}
			#Sudden Panic (Perk) (Attacker)
			if checkSlots(attacker,"Sudden Panic") is 1:
				if attacker's health is more than victim's health - 3:
					if getEntityStatBuff(victim,"STR") is more than 0:
						set {_debug} to changeEntityStatBuff(victim,"STR",(getEntityStatBuff(victim,"STR")) * -2,"Sudden Panic (Perk)",1)
					if getEntityStatBuff(victim,"MAG") is more than 0:
						set {_debug} to changeEntityStatBuff(victim,"MAG",(getEntityStatBuff(victim,"MAG")) * -2,"Sudden Panic (Perk)",1)
					if getEntityStatBuff(victim,"SPD") is more than 0:
						set {_debug} to changeEntityStatBuff(victim,"SPD",(getEntityStatBuff(victim,"SPD")) * -2,"Sudden Panic (Perk)",1)
					if getEntityStatBuff(victim,"DEF") is more than 0:
						set {_debug} to changeEntityStatBuff(victim,"DEF",(getEntityStatBuff(victim,"DEF")) * -2,"Sudden Panic (Perk)",1)
					if getEntityStatBuff(victim,"RES") is more than 0:
						set {_debug} to changeEntityStatBuff(victim,"RES",(getEntityStatBuff(victim,"RES")) * -2,"Sudden Panic (Perk)",1)
					changeEntityStatBuff(victim,"MAG",-6,"Sudden Panic (Perk)",1)
					changeEntityStatBuff(victim,"STR",-6,"Sudden Panic (Perk)",1)
					changeEntityStatBuff(victim,"RES",-6,"Sudden Panic (Perk)",1)
					changeEntityStatBuff(victim,"DEF",-6,"Sudden Panic (Perk)",1)
			#Sudden Panic (Perk) (Victim)
			if checkSlots(victim,"Sudden Panic") is 1:
				if victim's health is more than attacker's health - 3:
					if getEntityStatBuff(attacker,"STR") is more than 0:
						set {_debug} to changeEntityStatBuff(attacker,"STR",(getEntityStatBuff(attacker,"STR")) * -2,"Sudden Panic (Perk)",1)
					if getEntityStatBuff(attacker,"MAG") is more than 0:
						set {_debug} to changeEntityStatBuff(attacker,"MAG",(getEntityStatBuff(attacker,"MAG")) * -2,"Sudden Panic (Perk)",1)
					if getEntityStatBuff(attacker,"SPD") is more than 0:
						set {_debug} to changeEntityStatBuff(attacker,"SPD",(getEntityStatBuff(attacker,"SPD")) * -2,"Sudden Panic (Perk)",1)
					if getEntityStatBuff(attacker,"DEF") is more than 0:
						set {_debug} to changeEntityStatBuff(attacker,"DEF",(getEntityStatBuff(attacker,"DEF")) * -2,"Sudden Panic (Perk)",1)
					if getEntityStatBuff(attacker,"RES") is more than 0:
						set {_debug} to changeEntityStatBuff(attacker,"RES",(getEntityStatBuff(attacker,"RES")) * -2,"Sudden Panic (Perk)",1)
					changeEntityStatBuff(attacker,"MAG",-6,"Sudden Panic (Perk)",1)
					changeEntityStatBuff(attacker,"STR",-6,"Sudden Panic (Perk)",1)
					changeEntityStatBuff(attacker,"RES",-6,"Sudden Panic (Perk)",1)
					changeEntityStatBuff(attacker,"DEF",-6,"Sudden Panic (Perk)",1)
			#Futile Resistance (Perk)
			if checkSlots(attacker,"Futile Resistance") is 1:
				if victim's health is less than victim's maximum health * 0.5:
					changeEntityStatBuff(victim,"RES",-6,"Futile Resistance (Perk)",1)
					changeEntityStatBuff(victim,"DEF",-6,"Futile Resistance (Perk)",1)
					if attacker's health is more than or equal to attacker's maximum health * 0.7:
						changeEntityStatBuff(attacker,"STR",6,"Futile Resistance (Perk)",1)
						changeEntityStatBuff(attacker,"MAG",6,"Futile Resistance (Perk)",1)
			#Chaos's Embrace (Perk, duplicate of Dominator)
			if checkSlots(attacker,"Chaos's Embrace") is 1:
				if getEntityStatBuff(victim,"STR") is less than 0:
					add getAbsoluteValue(getEntityStatBuff(victim,"STR") / 2) to damage
				if getEntityStatBuff(victim,"MAG") is less than 0:
					add getAbsoluteValue(getEntityStatBuff(victim,"MAG") / 2) to damage
				if getEntityStatBuff(victim,"SPD") is less than 0:
					add getAbsoluteValue(getEntityStatBuff(victim,"SPD") / 2) to damage
				if getEntityStatBuff(victim,"LCK") is less than 0:
					add getAbsoluteValue(getEntityStatBuff(victim,"LCK") / 2) to damage
				if getEntityStatBuff(victim,"DEF") is less than 0:
					add getAbsoluteValue(getEntityStatBuff(victim,"DEF") / 2) to damage
				if getEntityStatBuff(victim,"RES") is less than 0:
					add getAbsoluteValue(getEntityStatBuff(victim,"RES") / 2) to damage
				set {_iaRecoilDamage} to attacker's maximum health * 0.2
				applyRecoilDamage(attacker,{_iaRecoilDamage})
			#ATK/SPD Unity (Perk) (Attacker)
			if checkSlots(attacker,"ATK/SPD Unity") is 1:
				loop all players in radius 30 of the attacker:
					if {party.%loop-player%} is {party.%attacker%}:
						set {_allowBond} to true
						exit 1 loop
				if {_allowBond} is true:
					if getEntityStatBuff(attacker,"STR") is less than 0:
						set {_debug} to changeEntityStatBuff(attacker,"STR",getEntityStatBuff(attacker,"STR") * -1,"ATK/SPD Unity (Perk)",1)
					if getEntityStatBuff(attacker,"MAG") is less than 0:
						set {_debug} to changeEntityStatBuff(attacker,"MAG",getEntityStatBuff(attacker,"MAG") * -1,"ATK/SPD Unity (Perk)",1)
					if getEntityStatBuff(attacker,"SPD") is less than 0:
						set {_debug} to changeEntityStatBuff(attacker,"SPD",getEntityStatBuff(attacker,"SPD") * -1,"ATK/SPD Unity (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"STR",7,"ATK/SPD Unity (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"MAG",7,"ATK/SPD Unity (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"SPD",7,"ATK/SPD Unity (Perk)",1)
			#ATK/SPD Unity (Perk) (Victim)
			if checkSlots(victim,"ATK/SPD Unity") is 1:
				loop all players in radius 30 of the victim:
					if {party.%loop-player%} is {party.%victim%}:
						set {_allowBond} to true
						exit 1 loop
				if {_allowBond} is true:
					if getEntityStatBuff(victim,"STR") is less than 0:
						set {_debug} to changeEntityStatBuff(victim,"STR",getEntityStatBuff(victim,"STR") * -1,"ATK/SPD Unity (Perk)",1)
					if getEntityStatBuff(victim,"MAG") is less than 0:
						set {_debug} to changeEntityStatBuff(victim,"MAG",getEntityStatBuff(victim,"MAG") * -1,"ATK/SPD Unity (Perk)",1)
					if getEntityStatBuff(victim,"SPD") is less than 0:
						set {_debug} to changeEntityStatBuff(victim,"SPD",getEntityStatBuff(victim,"SPD") * -1,"ATK/SPD Unity (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"STR",7,"ATK/SPD Unity (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"MAG",7,"ATK/SPD Unity (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"SPD",7,"ATK/SPD Unity (Perk)",1)
			#Quick Refrain (Perk) (Penalty) (Attacker)
			if checkSlots(attacker,"Quick Refrain") is 1:
				if {t_weaponComboPenalty.%attacker%} is set:
					changeEntityStatBuff(attacker,"MAG",-6,"Quick Refrain (Perk)",1)
					changeEntityStatBuff(attacker,"STR",-6,"Quick Refrain (Perk)",1)
					changeEntityStatBuff(attacker,"SPD",-6,"Quick Refrain (Perk)",1)
					changeEntityStatBuff(attacker,"RES",-6,"Quick Refrain (Perk)",1)
					changeEntityStatBuff(attacker,"DEF",-6,"Quick Refrain (Perk)",1)
			#Quick Refrain (Perk) (Penalty) (Victim)
			if checkSlots(victim,"Quick Refrain") is 1:
				if {t_weaponComboPenalty.%victim%} is set:
					changeEntityStatBuff(victim,"MAG",-6,"Quick Refrain (Perk)",1)
					changeEntityStatBuff(victim,"STR",-6,"Quick Refrain (Perk)",1)
					changeEntityStatBuff(victim,"SPD",-6,"Quick Refrain (Perk)",1)
					changeEntityStatBuff(victim,"RES",-6,"Quick Refrain (Perk)",1)
					changeEntityStatBuff(victim,"DEF",-6,"Quick Refrain (Perk)",1)
			#Flashing Blade II (Perk)
			if checkSlots(attacker,"Flashing Blade II") is 1:
				set {_debug} to changeEntityStatBuff(victim,"SPD",-5,"Flashing Blade II (Perk)",1)
				if getEntityStatTotal(attacker,"SPD") is more than or equal to getEntityStatTotal(victim,"SPD"):
					set {_lckBonus} to (floor((getEntityStatTotal(attacker,"SPD")) - (getEntityStatTotal(victim,"SPD")))) * 2
					if {_lckBonus} is more than 10:
						set {_lckBonus} to 10
					set {_debug} to changeEntityStatBuff(attacker,"SpecialAcceleration",10,"Flashing Blade II (Perk)",1)
					add ({_lckBonus} / 2) to damage
			#Aegis Guard (Perk)
			if checkSlots(victim,"Aegis Guard") is 1:
				if victim is blocking:
					if getEntityRange(attacker) is 2:
						set damage to damage * 0.3
			#Warlock's Ward (Perk)
			if checkSlots(victim,"Warlock's Ward") is 1:
				if victim's health is more than victim's maximum health * 0.5:
					if victim is blocking:
						set {_debug} to changeEntityStatBuff(victim,"DEF",4,"Warlock's Ward (Perk)",1)
						set {_debug} to changeEntityStatBuff(victim,"RES",4,"Warlock's Ward (Perk)",1)
						if (((getEntityStatTotal(attacker,"MAG")) / 2) - ((getEntityStatTotal(victim,"RES")) / 2)) is more than (((getEntityStatTotal(attacker,"STR")) / 2) - ((getEntityStatTotal(victim,"DEF")) / 2)):
							set {_magical} to 0
						else:
							set {_magical} to 1
			#Vengeful Fighter (Perk)
			if checkSlots(victim,"Vengeful Fighter") is 1:
				if victim's health is more than victim's maximum health * 0.5:
					if getEntityStatTotal(attacker,"SPD") is more than ((getEntityStatTotal(victim,"SPD")) + 5):
						if getEntityRange(attacker) is getEntityRange(victim):
							add 1 to {t_cos_doubleattacks.%victim%}
						else if getEntityRange(victim) is more than 2:			
							add 1 to {t_cos_doubleattacks.%victim%}
						set {_debug} to changeEntityStatBuff(victim,"SpecialAcceleration",10,"Vengeful Fighter (Perk)",1)
			#Dragonskin (Perk)
			if checkSlots(victim,"Dragonskin") is 1:
				if getEntityStatTotal(victim,"RES") is more than getEntityStatTotal(attacker,"RES"):
					set {_DSDamageReduction} to (((getEntityStatTotal(victim,"RES")) - (getEntityStatTotal(attacker,"RES"))) * 4)
					if {_DSDamageReduction} is more than 40:
						set {_DSDamageReduction} to 40
					set damage to damage * (1 - ({_DSDamageReduction} / 100))
			#Magical Specialist (Perk)
			if checkSlots(attacker,"Magical Specialist") is 1:
				if getEntityWeaponType(attacker) is 1:
					set damage to damage * 1.2
			#Guns Specialist (Perk)
			if checkSlots(attacker,"Guns Specialist") is 1:
				if getEntityWeaponType(attacker) is 2:
					set damage to damage * 1.2
			#Traditional Specialist (Perk)
			if checkSlots(attacker,"Traditional Specialist") is 1:
				if getEntityWeaponType(attacker) is 0:
					set damage to damage * 1.2
			#Gamble (Damage Bonus)
			if checkSlots(attacker,"Gamble") is 1:
				set {_debug} to changeEntityStatBuff(attacker,"STR",12,"Gamble (Perk)",1)
				set {_debug} to changeEntityStatBuff(attacker,"MAG",12,"Gamble (Perk)",1)
			#Infernal Ascendence (Perk) (Attacker)
			if checkSlots(attacker,"Infernal Ascendence") is 1:
				if attacker's health is more than or equal to attacker's maximum health * 0.5:
					set {_debug} to changeEntityStatBuff(attacker,"STR",(getEntityStatBuff(attacker,"STR")),"Infernal Ascendence (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"MAG",(getEntityStatBuff(attacker,"MAG")),"Infernal Ascendence (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"SPD",(getEntityStatBuff(attacker,"SPD")),"Infernal Ascendence (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"LCK",(getEntityStatBuff(attacker,"LCK")),"Infernal Ascendence (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"DEF",(getEntityStatBuff(attacker,"DEF")),"Infernal Ascendence (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"RES",(getEntityStatBuff(attacker,"RES")),"Infernal Ascendence (Perk)",1)
					set {_iaRecoilDamage} to attacker's maximum health * 0.3
					applyRecoilDamage(attacker,{_iaRecoilDamage})
			#Infernal Ascendence (Perk) (Victim)
			if checkSlots(victim,"Infernal Ascendence") is 1:
				if victim's health is more than victim's maximum health * 0.5:
					set {_debug} to changeEntityStatBuff(victim,"STR",(getEntityStatBuff(victim,"STR")),"Infernal Ascendence (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"MAG",(getEntityStatBuff(victim,"MAG")),"Infernal Ascendence (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"SPD",(getEntityStatBuff(victim,"SPD")),"Infernal Ascendence (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"LCK",(getEntityStatBuff(victim,"LCK")),"Infernal Ascendence (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"DEF",(getEntityStatBuff(victim,"DEF")),"Infernal Ascendence (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"RES",(getEntityStatBuff(victim,"RES")),"Infernal Ascendence (Perk)",1)
					set {_iaRecoilDamage} to victim's maximum health * 0.3
					applyRecoilDamage(victim,{_iaRecoilDamage})
			#Dominator
			if getEntitySkillsInHand(attacker,"Dominator",2,1) is more than 0:
				if getEntityStatBuff(victim,"STR") is less than 0:
					add getAbsoluteValue(getEntityStatBuff(victim,"STR") / 2) to damage
				if getEntityStatBuff(victim,"MAG") is less than 0:
					add getAbsoluteValue(getEntityStatBuff(victim,"MAG") / 2) to damage
				if getEntityStatBuff(victim,"SPD") is less than 0:
					add getAbsoluteValue(getEntityStatBuff(victim,"SPD") / 2) to damage
				if getEntityStatBuff(victim,"LCK") is less than 0:
					add getAbsoluteValue(getEntityStatBuff(victim,"LCK") / 2) to damage
				if getEntityStatBuff(victim,"DEF") is less than 0:
					add getAbsoluteValue(getEntityStatBuff(victim,"DEF") / 2) to damage
				if getEntityStatBuff(victim,"RES") is less than 0:
					add getAbsoluteValue(getEntityStatBuff(victim,"RES") / 2) to damage
			#Mayhem
			if getEntitySkillsInHand(attacker,"Mayhem",2,1) is more than 0:
				if getEntityStatBuff(victim,"STR") is less than 0:
					set {_debug} to changeEntityStatBuff(attacker,"STR",getEntityStatBuff(victim,"STR") * -1,"Mayhem",1)
				if getEntityStatBuff(victim,"MAG") is less than 0:
					set {_debug} to changeEntityStatBuff(attacker,"MAG",getEntityStatBuff(victim,"MAG") * -1,"Mayhem",1)
				if getEntityStatBuff(victim,"SPD") is less than 0:
					set {_debug} to changeEntityStatBuff(attacker,"SPD",getEntityStatBuff(victim,"SPD") * -1,"Mayhem",1)
				if getEntityStatBuff(victim,"LCK") is less than 0:
					set {_debug} to changeEntityStatBuff(attacker,"LCK",getEntityStatBuff(victim,"LCK") * -1,"Mayhem",1)
				if getEntityStatBuff(victim,"DEF") is less than 0:
					set {_debug} to changeEntityStatBuff(attacker,"DEF",getEntityStatBuff(victim,"DEF") * -1,"Mayhem",1)
				if getEntityStatBuff(victim,"RES") is less than 0:
					set {_debug} to changeEntityStatBuff(attacker,"RES",getEntityStatBuff(victim,"RES") * -1,"Mayhem",1)
			#Alchemical Mutation (Perk)
			if checkSlots(attacker,"Alchemical Mutation") is 1:
				set {_triggerMorphOnAttacker} to true
			if checkSlots(victim,"Alchemical Mutation") is 1:
				set {_triggerMorphOnVictim} to true
			#Morph status effect (please kill me)
			#Attacker Case
			if {_triggerMorphOnAttacker} is true:
				set {_highestSTR} to 0
				set {_highestMAG} to 0
				set {_highestSPD} to 0
				set {_highestDEF} to 0
				set {_highestRES} to 0
				#Find highest stats on entities within 30 blocks
				loop all entities in radius 30 of the attacker:
					if loop-entity is not the attacker:
						if getEntityStat(loop-entity,"STR") is more than {_highestSTR}:
							set {_highestSTR} to getEntityStat(loop-entity,"STR")
						if getEntityStat(loop-entity,"MAG") is more than {_highestMAG}:
							set {_highestMAG} to getEntityStat(loop-entity,"MAG")
						if getEntityStat(loop-entity,"SPD") is more than {_highestSPD}:
							set {_highestSPD} to getEntityStat(loop-entity,"SPD")
						if getEntityStat(loop-entity,"DEF") is more than {_highestDEF}:
							set {_highestDEF} to getEntityStat(loop-entity,"DEF")
						if getEntityStat(loop-entity,"RES") is more than {_highestRES}:
							set {_highestRES} to getEntityStat(loop-entity,"RES")
				#Apply stat buff/debuff equal to difference between player's stat and the caluclated higher stat (can go negative on purpose)
				set {_debug} to changeEntityStatBuff(attacker,"STR",{_highestSTR} - (getEntityStat(attacker,"STR")),"Morph Status Effect",1)
				set {_debug} to changeEntityStatBuff(attacker,"MAG",{_highestMAG} - (getEntityStat(attacker,"MAG")),"Morph Status Effect",1)
				set {_debug} to changeEntityStatBuff(attacker,"SPD",{_highestSPD} - (getEntityStat(attacker,"SPD")),"Morph Status Effect",1)
				set {_debug} to changeEntityStatBuff(attacker,"DEF",{_highestDEF} - (getEntityStat(attacker,"DEF")),"Morph Status Effect",1)
				set {_debug} to changeEntityStatBuff(attacker,"RES",{_highestRES} - (getEntityStat(attacker,"RES")),"Morph Status Effect",1)
			#Victim Case
			if {_triggerMorphOnVictim} is true:
				set {_highestSTR} to 0
				set {_highestMAG} to 0
				set {_highestSPD} to 0
				set {_highestDEF} to 0
				set {_highestRES} to 0
				#Find highest stats on entities within 30 blocks
				loop all entities in radius 30 of the victim:
					if loop-entity is not the victim:
						if getEntityStat(loop-entity,"STR") is more than {_highestSTR}:
							set {_highestSTR} to getEntityStat(loop-entity,"STR")
						if getEntityStat(loop-entity,"MAG") is more than {_highestMAG}:
							set {_highestMAG} to getEntityStat(loop-entity,"MAG")
						if getEntityStat(loop-entity,"SPD") is more than {_highestSPD}:
							set {_highestSPD} to getEntityStat(loop-entity,"SPD")
						if getEntityStat(loop-entity,"DEF") is more than {_highestDEF}:
							set {_highestDEF} to getEntityStat(loop-entity,"DEF")
						if getEntityStat(loop-entity,"RES") is more than {_highestRES}:
							set {_highestRES} to getEntityStat(loop-entity,"RES")
				#Apply stat buff/debuff equal to difference between player's stat and the caluclated higher stat (can go negative on purpose)
				set {_debug} to changeEntityStatBuff(victim,"STR",{_highestSTR} - (getEntityStat(victim,"STR")),"Morph Status Effect",1)
				set {_debug} to changeEntityStatBuff(victim,"MAG",{_highestMAG} - (getEntityStat(victim,"MAG")),"Morph Status Effect",1)
				set {_debug} to changeEntityStatBuff(victim,"SPD",{_highestSPD} - (getEntityStat(victim,"SPD")),"Morph Status Effect",1)
				set {_debug} to changeEntityStatBuff(victim,"DEF",{_highestDEF} - (getEntityStat(victim,"DEF")),"Morph Status Effect",1)
				set {_debug} to changeEntityStatBuff(victim,"RES",{_highestRES} - (getEntityStat(victim,"RES")),"Morph Status Effect",1)
			#Surge skills
			if attacker's health is more than (attacker's maximum health * 0.25):
				if getEntitySkillsInHand(attacker,"Critical Surge",2,1) is more than 0:
					changeEntityStatBuff(attacker,"SPD",7,"Critical Surge",1)
					changeEntityStatBuff(attacker,"LCK",7,"Critical Surge",1)
					heal the attacker by ceil((getEntityStatTotal(attacker,"SPD")) * 0.1)
				if getEntitySkillsInHand(attacker,"Sturdy Surge",2,1) is more than 0:
					changeEntityStatBuff(attacker,"STR",7,"Sturdy Surge",1)
					changeEntityStatBuff(attacker,"DEF",7,"Sturdy Surge",1)
					heal the attacker by ceil((getEntityStatTotal(attacker,"DEF")) * 0.1)
				if getEntitySkillsInHand(attacker,"Warding Surge",2,1) is more than 0:
					changeEntityStatBuff(attacker,"MAG",7,"Warding Surge",1)
					changeEntityStatBuff(attacker,"RES",7,"Warding Surge",1)
					heal the attacker by ceil((getEntityStatTotal(attacker,"RES")) * 0.1)
				if getEntitySkillsInHand(attacker,"Surge Sparrow",2,1) is more than 0:
					changeEntityStatBuff(attacker,"STR",7,"Surge Sparrow",1)
					changeEntityStatBuff(attacker,"SPD",7,"Surge Sparrow",1)
					heal the attacker by ceil((getEntityStatTotal(attacker,"SPD")) * 0.1)
			#send "<light blue>Base Damage: %damage%" to the attacker
			#Double-attack effects
			#
			#Brash Assault
			if attacker's health is less than or equal to (attacker's maximum health * 0.5):
				if getEntityRange(attacker) is getEntityRange(victim):
					set {_ignoreSPDCheck} to true
					add 1 to {t_cos_doubleattacks.%attacker%}
					send "<light blue>Brash Assault activated!" to the attacker
			#
			#Counter skills
			#
			#Archer's Foil (Perk)
			if checkSlots(victim,"Archer's Foil") is 1:
				if victim's tool is a bow:
					if distance between attacker and victim is less than or equal to 4:
						add 1 to {t_cos_doubleattacks.%victim%}
						set {_debug} to changeEntityStatBuff(victim,"STR",5,"Archer's Foil",1)
						set {_debug} to changeEntityStatBuff(victim,"DEF",5,"Archer's Foil",1)
					else if getEntityRange(attacker) is 1:
						add 1 to {t_cos_doubleattacks.%victim%}
						set {_debug} to changeEntityStatBuff(victim,"STR",5,"Archer's Foil",1)
						set {_debug} to changeEntityStatBuff(victim,"DEF",5,"Archer's Foil",1)						
			#Riposte
			if getEntitySkillsInHand(victim,"Riposte",0,2) is more than or equal to 0:
				if victim's health is more than or equal to victim's maximum health * 0.8:
					if getEntityRange(attacker) is getEntityRange(victim):
						add 1 to {t_cos_doubleattacks.%victim%}
					else if the 4th line of the lore of the victim's tool contains "Counter":
						add 1 to {t_cos_doubleattacks.%victim%}
			#Quick Riposte (Perk)
			if checkSlots(victim,"Quick Riposte") is 1:
				if victim's health is more than or equal to victim's maximum health * 0.7:
					if getEntityRange(attacker) is getEntityRange(victim):
						add 1 to {t_cos_doubleattacks.%victim%}
					else if the 4th line of the lore of the victim's tool contains "Counter":
						add 1 to {t_cos_doubleattacks.%victim%}
			#
			#
			#Mob exclusive skills
			#
			#
			#Ender Dragon EP Skills
			if victim is ender dragon:
				#Dragonskin: Grants DEF/RES +7 if foe initiates. Reduces damage from foe's attacks by 50%.
				changeEntityStatBuff(victim,"DEF",7,"Dragonskin",1)
				changeEntityStatBuff(victim,"RES",7,"Dragonskin",1)
				set damage to damage * 0.5
				#Divine Ward: If foe's weapon is not a Sacred Treasure, further reduce damage by 80%.
				if nbt of attacker's tool does not contain "SacredTreasureID:":
					set damage to damage * 0.2
			#Wither EP Skills
			else if victim is wither boss:
				#Witherskin: If HP > 50%, reduces damage by 5 hearts, grants DEF/RES +7, and further reduces damage by 50%.
				changeEntityStatBuff(victim,"DEF",7,"Witherskin",1)
				changeEntityStatBuff(victim,"RES",7,"Witherskin",1)
				set damage to (damage - 5) * 0.5
				#Withering Riposte - If HP < 50% and foe uses ranged attack, inflicts wither 4 on foe.
				if distance between the attacker and the victim is more than 5:
					apply wither 4 to the attacker for 5 seconds
			#Ender Dragon PP Skills
			if attacker is ender dragon:
				#Dragonbreath: When attacking at range, targets the foe's RES and grants MAG +12, DEF/RES +10 during combat.
				if distance between the attacker and the victim is more than 5:
					changeEntityStatBuff(attacker,"DEF",10,"Dragonbreath",1)
					changeEntityStatBuff(attacker,"RES",10,"Dragonbreath",1)
					changeEntityStatBuff(attacker,"MAG",12,"Dragonbreath",1)
					set {_magical} to true
				#Sharp Claws: When attacking at point-blank, nullifies foe's armor bonuses and boosts damage by 30%.
				else:
					set damage to (damage * (1 + (getEntityArmorDamageReduction(victim)))) * 1.3
			#SPD check
			#
			#Overrides
			#
			#Close Breaker
			if getEntitySkillsInHand(attacker,"Close Breaker",0,2) is more than 0:
				if getEntityRange(victim) is 1 or 3:
					set {_ignoreSPDCheck} to true
					add 1 to {t_cos_doubleattacks.%attacker%}
					send formatted "<light green>Outsped the defender and doubled!" to the attacker
					send formatted "<light red>%attacker% outsped you and doubled!" to the victim
			if getEntitySkillsInHand(victim,"Close Breaker",2,2) is more than 0:
				if getEntityRange(attacker) is 1 or 3:
					#Only sets the ignoreSPDCheck flag since the victim can only deny double-attacks.
					set {_ignoreSPDCheck} to true
			#Ranged Breaker
			if getEntitySkillsInHand(attacker,"Ranged Breaker",0,2) is more than 0:
				if getEntityRange(victim) is 2 or 4:
					set {_ignoreSPDCheck} to true
					add 1 to {t_cos_doubleattacks.%attacker%}
					send formatted "<light green>Outsped the defender and doubled!" to the attacker
					send formatted "<light red>%attacker% outsped you and doubled!" to the victim
			if getEntitySkillsInHand(victim,"Ranged Breaker",0,2) is more than 0:
				if getEntityRange(attacker) is 2 or 4:
					set {_ignoreSPDCheck} to true
			#Desperation Override
			else if attacker's health is less than or equal to (attacker's maximum health * 0.75):
				if getEntitySkillsInHand(attacker,"Desperation",0,2) is more than 0:
					set {_debug} to changeEntityStatBuff(victim,"SPD",-5,"Desperation",1)
					if (getEntityStatTotal(attacker,"SPD")) is more than (getEntityStatTotal(victim,"SPD")):
						set {_ignoreSPDCheck} to true
						add 1 to {t_cos_doubleattacks.%attacker%}
						set {_disableAutoCounters} to true
						send formatted "<light green>Outsped the defender and doubled!" to the attacker
						send formatted "<light red>%attacker% outsped you and doubled!" to the victim
			#Crusader's Charge (Perk)
			if checkSlots(attacker,"Crusader's Charge") is 1:
				if {_ignoreSPDCheck} is not true:
					if attacker's health is more than or equal to attacker's maximum health * 0.5:
						set {_debug} to changeEntityStatBuff(victim,"SPD",-5,"Crusader's Charge",1)
						if (getEntityStatTotal(attacker,"SPD")) is more than (getEntityStatTotal(victim,"SPD")):
							set {_ignoreSPDCheck} to true
							add 1 to {t_cos_doubleattacks.%attacker%}
							send formatted "<light green>Outsped the defender and doubled!" to the attacker
							send formatted "<light red>%attacker% outsped you and doubled!" to the victim		
							set {_debug} to changeEntityStatBuff(attacker,"DEF",6,"Crusader's Charge (Perk)",1)
							set {_debug} to changeEntityStatBuff(attacker,"RES",6,"Crusader's Charge (Perk)",1)
							set {_debug} to changeEntityStatBuff(attacker,"STR",6,"Crusader's Charge (Perk)",1)
							set {_debug} to changeEntityStatBuff(attacker,"MAG",6,"Crusader's Charge (Perk)",1)
			#Pursuit Ring
			if attacker's health is more than or equal to (attacker's maximum health * 0.7):
				loop all items in the attacker's inventory:
					if the name of the loop-item is "<green><bold>Pursuit Ring":
						set damage to damage * 1.4
						exit 1 loop
			#Defaults to the standard doubling check if desperation did not give a double
			if {_ignoreSPDCheck} is not true:
				if (getEntityStatTotal(attacker,"SPD")) is more than (getEntityStatTotal(victim,"SPD") + 5):
					#set damage to damage * 2
					add 1 to {t_cos_doubleattacks.%attacker%}
					send formatted "<light green>Outsped the defender and doubled!" to the attacker
					send formatted "<light red>%attacker% outsped you and doubled!" to the victim
			#Disable doubling for debugging, could re-purpose this as a skill/perk effect (FEH Wary Fighter?)
			if {disableDoubleAttacks.%attacker%} is true:
				set {t_cos_doubleattacks.%attacker%} to 1
			if {disableDoubleAttacks.%victim%} is true:
				clear {t_cos_doubleattacks.%victim%}
			#Personal Difficulty - attacker
			if {playerDifficulty.%attacker%} is 1:
				set damage to damage * 1.5
			else if {playerDifficulty.%attacker%} is 4:
				set damage to damage * 1
			else if {playerDifficulty.%attacker%} is 5:
				set damage to damage * 1
			else if {playerDifficulty.%attacker%} is 6:
				set damage to damage * 1
			else if {playerDifficulty.%attacker%} is 7:
				set damage to damage * 1
			else if {playerDifficulty.%attacker%} is 8:
				set damage to damage * 1
			else if {playerDifficulty.%attacker%} is 9:
				set damage to damage * 1
			#Personal Difficulty - victim
			if {playerDifficulty.%victim%} is 1:
				set damage to damage * 1
			else if {playerDifficulty.%victim%} is 2:
				set damage to damage * 1
			else if {playerDifficulty.%victim%} is 3:
				set damage to damage * 1
			else if {playerDifficulty.%victim%} is 4:
				set damage to damage * 1
			else if {playerDifficulty.%victim%} is 5:
				set damage to damage * 1
			else if {playerDifficulty.%victim%} is 6:
				set damage to damage * 1
			else if {playerDifficulty.%victim%} is 7:
				set damage to damage * 1
			else if {playerDifficulty.%victim%} is 8:
				set damage to damage * 1
			else if {playerDifficulty.%victim%} is 9:
				set damage to damage * 1
			#Kamikaze trait
			if {traits.%attacker%::Kamikaze} is true:
				add ((attacker's maximum health - attacker's health) * 0.5) to damage
			#Underdog trait
			if {traits.%attacker%::Underdog} is true:
				if getEntityStat(attacker,"lvl") is less than getEntityStat(victim,"lvl"):
					set damage to damage * 1.3
			if {traits.%victim%::Underdog} is true:
				if getEntityStat(attacker,"lvl") is less than getEntityStat(victim,"lvl"):
					set damage to damage * 1.3
			#Pessimism [Perk]
			if checkSlots(attacker,"Pessimism") is 1:
				set damage to damage * 1.15
			#
			#
			#
			#VERY EXPERIMENTAL
			#Close-range victim can always counter-attack on difficulties above HARD
			#Autoriposte only when HP >= 30%
			if victim's health is more than (victim's maximum health * 0.3):
				if getEntityRange(victim) is 1:
					if {playerDifficulty.%victim%} is more than or equal to 4:
						add 1 to {t_cos_doubleattacks.%victim%}
					else if {playerDifficulty.%attacker%} is more than or equal to 4:
						add 1 to {t_cos_doubleattacks.%victim%}
				else if getEntityRange(victim) is 3:
					if {playerDifficulty.%victim%} is more than or equal to 4:
						add 1 to {t_cos_doubleattacks.%victim%}
					else if {playerDifficulty.%attacker%} is more than or equal to 4:
						add 1 to {t_cos_doubleattacks.%victim%}
				else if getEntityRange(victim) is getEntityRange(attacker):
					if getEntityRange(attacker) is not 2 or 4:
						if {playerDifficulty.%victim%} is more than or equal to 4:
							add 1 to {t_cos_doubleattacks.%victim%}
						else if {playerDifficulty.%attacker%} is more than or equal to 4:
							add 1 to {t_cos_doubleattacks.%victim%}					
			#
			#
			#
			#Damage Calculations + Special Skill Effects
			#If a Special skill is activated, {_proc} gets set to the name of the skill for things like character quotes and undoing temporary debuffs (luna's DEF/RES reduction for example)
			set {_timesToAttack} to {t_cos_doubleattacks.%attacker%}
			loop {_timesToAttack} times:
				#Critical Miss
				#Base avoid is --20-- 0, what the fuck?
				set {_criticalMissChance} to ((getEntityStatTotal(victim,"LCK")) - (getEntityStatTotal(attacker,"LCK")))
				add ((getEntityStatTotal(victim,"SPD")) - (getEntityStatTotal(attacker,"SPD"))) to {_criticalMissChance}
				subtract ((getEntityNumericalWeaponRank(attacker)) * 6) from {_criticalMissChance}
				#Apply a penalty to hitrate if the attacker's weapon's ability requirement is higher than the appropriate ability.
				if getEntityWeaponType(attacker) is 0:
					set {_attackerAbility} to getEntityArrayValueByName(attacker,"abilities","Traditional Weapons") parsed as integer
				else if getEntityWeaponType(attacker) is 1:
					set {_attackerAbility} to getEntityArrayValueByName(attacker,"abilities","Magical Weapons") parsed as integer
				else if getEntityWeaponType(attacker) is 2:
					set {_attackerAbility} to getEntityArrayValueByName(attacker,"abilities","Guns") parsed as integer
				add ((getEntityNumericalWeaponRank(attacker)) * 3) to {_attackerAbility}
				if {_attackerAbility} is less than getEntityWeaponAbilityRequirement(attacker's tool,attacker):
					send "<orange>Ability too low to wield weapon effectively! (-%(((getEntityWeaponAbilityRequirement(attacker's tool,attacker)) - {_attackerAbility}) * 5)%%% hitrate penalty)" to the attacker
					add (((getEntityWeaponAbilityRequirement(attacker's tool,attacker)) - {_attackerAbility}) * 5) to {_criticalMissChance}
				#Cap at 100
				if {_criticalMissChance} is more than 100:
					set {_criticalMissChance} to 100
				if {_criticalMissChance} is more than 0:
					set {_rn1} to a random integer from 0 to {_criticalMissChance}
					set {_rn2} to a random integer from 0 to {_criticalMissChance}
					set {_finalChance} to floor(({_rn1} + {_rn2}) / 2)
				else:
					set {_criticalMissChance} to 0
					set {_finalChance} to 0
				if {verboseCombatLogging.%attacker%} is set:
					send formatted "<gold>[Hitrate] <white>Base Miss Chance: %{_finalChance}%" to the attacker
				if {verboseCombatLogging.%victim%} is set:
					send formatted "<gold>[Hitrate] <white>Base Miss Chance: %{_finalChance}%" to the victim
				#Morale Hitrate Bonus/Penalty
				if {traits.%attacker%::Level-Headed} is not true:
					if {t_morale.%attacker%} is less than 0:
						add (({t_morale.%attacker%} * 1) * (1 + checkSlots(attacker,"Rising Courage"))) to {_finalChance}
					else if {t_morale.%attacker%} is more than 0:
						subtract (({t_morale.%attacker%} * 2) * (1 + checkSlots(attacker,"Rising Courage"))) from {_finalChance}
				#Power Pitcher (Perk)
				if checkSlots(attacker,"Power Pitcher") is 1:
					if damage cause is projectile:
						add 6 to damage
						subtract 15 from {_finalChance}
				#Leadership hitrate bonus
				subtract getAllyLeadership(attacker) from {_finalChance}
				if {verboseCombatLogging.%attacker%} is set:
					send "Attacker leadership: %getAllyLeadership(attacker)%" to the attacker
					send "Victim leadership: %getAllyLeadership(victim)%" to the attacker
				#Leadership avoidance bonus
				add getAllyLeadership(victim) to {_finalChance}
				if {verboseCombatLogging.%victim%} is set:
					send "Attacker leadership: %getAllyLeadership(attacker)%" to the victim
					send "Victim leadership: %getAllyLeadership(victim)%" to the victim
				#Avoidance +20 (Perk)
				if checkSlots(victim,"Avoidance +20") is 1:
					add 20 to {_finalChance}
				#Sacae's Grace (Avoid bonus)
				if {_victimSacaeGrace} is true:
					add 25 to {_finalChance}
				#Sacae's Grace (accuracy bonus)
				if {_attackerSacaeGrace} is true:
					subtract 25 from {_finalChance}
				#Desperate Dodge (Perk)
				if checkSlots(victim,"Desperate Dodge") is 1:
					if victim's health is less than or equal to victim's maximum health * 0.5:
						add 30 to {_finalChance}
				#Kaga's Teachings
				if {traits.%attacker%::Kaga's Teachings} is true:
					add 20 to {_finalChance}
				if {traits.%victim%::Kaga's Teachings} is true:
					subtract 35 from {_finalChance}
				#Arthur's Axe (Attacker)
				if getEntitySacredTreasure(attacker) is 14:
					add 35 to {_finalChance}
				#Arthur's Axe (Victim)
				if getEntitySacredTreasure(victim) is 14:
					subtract 35 from {_finalChance}
				#Gamble (Perk)
				if checkSlots(attacker,"Gamble") is 1:
					add 30 to {_finalChance}
				#Sky's the Limit (Perk)
				if checkSlots(attacker,"Sky's the Limit") is 1:
					set damage to damage * 1.15
				#Attack Stability (Perk)
				if checkSlots(attacker,"Attack Stability") is 1:
					subtract 25 from {_finalChance}
					set {_debug} to changeEntityStatBuff(attacker,"STR",5,"Attack Stability (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"MAG",5,"Attack Stability (Perk)",1)
				set {_finalChance} to floor({_finalChance})
				if {verboseCombatLogging.%attacker%} is set:
					send formatted "<gold>[Hitrate] <white>Final Miss Chance: %{_finalChance}%" to the attacker
				if {verboseCombatLogging.%victim%} is set:
					send formatted "<gold>[Hitrate] <white>Final Miss Chance: %{_finalChance}%" to the victim
				#Enable Verbose Combat Logging in the Journal instead
				#if {reportDodgeOdds.%attacker%} is set:
				#	send "Critical Miss Chance: %{_finalChance}% pct" to the attacker
				#if {reportDodgeOdds.%victim%} is set:
				#	send "Critical Dodge Chance: %{_finalChance}% pct" to the victim
				if {_finalChance} is more than 10:
					chance of {_finalChance}%:
						apply weakness 2 to the attacker for 1 seconds
						set {_critMiss} to true
						play 10 (cloud with speed 0) at the victim
						play sound "entity.experience_orb.pickup" with volume 3 and pitch 2 at victim for attacker
						play sound "entity.experience_orb.pickup" with volume 3 and pitch 2 at victim for victim
						send "<light red>Critical Miss!" to the attacker
						send "<light green>Critical Dodge!" to the victim
						#Arthur's Axe Dodge Confirm
						if getEntitySacredTreasure(victim) is 14:
							set {_arthurAxeDodgeBuff} to true
						#Level-Headed check for attacker
						if {traits.%attacker%::Level-Headed} is not true:
							if {t_morale.%attacker%} is more than -10:
								clear {t_maxMoraleChatMessage.%attacker%}
								subtract 1 from {t_morale.%attacker%}
							#Prevents penalty from going beyond the lower bound
							else if {t_morale.%attacker%} is less than -10:
								set {t_morale.%attacker%} to -10
							if {t_morale.%attacker%} is -10:
								if {t_minMoraleChatMessage.%attacker%} is not true:
									set {t_minMoraleChatMessage.%attacker%} to true
									play 15 (lapis block break with speed 1) at the attacker
									send "<blue>Your Morale is at it's lowest point, but an ally can raise it back up by right-clicking on you!" to the attacker
							if {quotesToggle.%attacker%} is true:
								if {t_morale.%attacker%} is -10:
									if {t_minimumMoraleQuoteSpamBlocker.%attacker%} is not true:
										set {t_minimumMoraleQuoteSpamBlocker.%attacker%} to true
										make attacker say {playerQuotes.%attacker%::MinimumMorale}
								if {t_morale.%attacker%} is less than or equal to -5:
									if {t_fallingMoraleQuoteSpamBlocker.%attacker%} is not true:
										set {t_fallingMoraleQuoteSpamBlocker.%attacker%} to true
										make attacker say {playerQuotes.%attacker%::FallingMorale}
						#Disables Morale if victim took the Level-Headed trait
						if {traits.%victim%::Level-Headed} is not true:
							#Clears the notification for returning to neutral morale passively
							clear {t_moraleNeutralMessage.%victim%}
							clear {t_moraleNeutralMessage.%victim%}
							#Morale Boost from landing an attack
							if {t_morale.%victim%} is less than 10:
								add 1 to {t_morale.%victim%}
								clear {t_fallingMoraleQuoteSpamBlocker.%victim%}
							else if {t_morale.%victim%} is 10:
								if {t_maxMoraleChatMessage.%victim%} is not true:
									set {t_maxMoraleChatMessage.%victim%} to true
									play mob spawner flames at the victim
									send "<orange>You're at max morale!!" to the victim
							if {t_morale.%victim%} is less than 0:
								add 1 to {t_morale.%victim%}
								clear {t_minMoraleChatMessage.%victim%}
								clear {t_minimumMoraleQuoteSpamBlocker.%victim%}
							#Rising/Peak Morale quote trigger
							if {quotesToggle.%victim%} is true:
								if {t_morale.%victim%} is more than or equal to 10:
									if {t_peakMoraleQuoteSpamBlocker.%victim%} is not true:
										set {t_peakMoraleQuoteSpamBlocker.%victim%} to true
										#Just in case the value somehow goes past 10
										set {t_morale.%victim%} to 10
										make victim say {playerQuotes.%victim%::PeakMorale}
								else if {t_morale.%victim%} is more than or equal to 5:
									if {t_risingMoraleQuoteSpamBlocker.%victim%} is not true:
										set {t_risingMoraleQuoteSpamBlocker.%victim%} to true
										make victim say {playerQuotes.%victim%::RisingMorale}						
				if {_critMiss} is not true:
					#Increase attacker's Weapon Rank by 1
					changeEntityWeaponRank(attacker,1)
					#Disables Morale if attacker took the Level-Headed trait
					if {traits.%attacker%::Level-Headed} is not true:
						#Clears the notification for returning to neutral morale passively
						clear {t_moraleNeutralMessage.%attacker%}
						clear {t_moraleNeutralMessage.%victim%}
						#Morale Boost from landing an attack
						if {t_morale.%attacker%} is less than 10:
							add 1 to {t_morale.%attacker%}
							clear {t_fallingMoraleQuoteSpamBlocker.%attacker%}
						else if {t_morale.%attacker%} is 10:
							if {t_maxMoraleChatMessage.%attacker%} is not true:
								set {t_maxMoraleChatMessage.%attacker%} to true
								play mob spawner flames at the attacker
								send "<orange>You're at max morale!!" to the attacker
						if {t_morale.%attacker%} is less than 0:
							add 1 to {t_morale.%attacker%}
							clear {t_minMoraleChatMessage.%attacker%}
							clear {t_minimumMoraleQuoteSpamBlocker.%attacker%}
						#Rising/Peak Morale quote trigger
						if {quotesToggle.%attacker%} is true:
							if {t_morale.%attacker%} is more than or equal to 10:
								if {t_peakMoraleQuoteSpamBlocker.%attacker%} is not true:
									set {t_peakMoraleQuoteSpamBlocker.%attacker%} to true
									#Just in case the value somehow goes past 10
									set {t_morale.%attacker%} to 10
									make attacker say {playerQuotes.%attacker%::PeakMorale}
							else if {t_morale.%attacker%} is more than or equal to 5:
								if {t_risingMoraleQuoteSpamBlocker.%attacker%} is not true:
									set {t_risingMoraleQuoteSpamBlocker.%attacker%} to true
									make attacker say {playerQuotes.%attacker%::RisingMorale}
					#Disables Morale if victim took the Level-Headed trait
					if {traits.%victim%::Level-Headed} is not true:
						#Morale penalty for being damaged
						if {t_morale.%victim%} is more than -10:
							clear {t_maxMoraleChatMessage.%victim%}
							subtract 2 from {t_morale.%victim%}
							#Clears the quote spam blocker since the victim's morale will probably drop below the threshold to trigger the quote.
							clear {t_risingMoraleQuoteSpamBlocker.%victim%}
							clear {t_peakMoraleQuoteSpamBlocker.%victim%}
						#Prevents penalty from going beyond the lower bound
						else if {t_morale.%victim%} is less than -10:
							set {t_morale.%victim%} to -10
						if {t_morale.%victim%} is -10:
							if {t_minMoraleChatMessage.%victim%} is not true:
								set {t_minMoraleChatMessage.%victim%} to true
								play 15 (lapis block break with speed 1) at the victim
								send "<blue>Your Morale is at it's lowest point, but an ally can raise it back up by right-clicking on you!" to the victim
						if {quotesToggle.%victim%} is true:
							if {t_morale.%victim%} is -10:
								if {t_minimumMoraleQuoteSpamBlocker.%victim%} is not true:
									set {t_minimumMoraleQuoteSpamBlocker.%victim%} to true
									make victim say {playerQuotes.%victim%::MinimumMorale}
							if {t_morale.%victim%} is less than or equal to -5:
								if {t_fallingMoraleQuoteSpamBlocker.%victim%} is not true:
									set {t_fallingMoraleQuoteSpamBlocker.%victim%} to true
									make victim say {playerQuotes.%victim%::FallingMorale}
					#Arthur's Axe Hit Confirm
					if getEntitySacredTreasure(attacker) is 14:
						set damage to damage * 1.15
						set {_arthurAxeHitBuff} to true
					#Critical Hit
					#Base crit chance of 0%
					set {_criticalHitChance} to 0
					#Add 25%% of attacker's LCK to the crit chance
					add floor((getEntityStatTotal(attacker,"LCK")) / 4) to {_criticalHitChance}
					#Subtract 25%% of victim's LCK from the crit chance
					subtract floor((getEntityStatTotal(victim,"LCK")) / 4) from {_criticalHitChance}
					#Additional crit chance modifiers (these intentionally ignore the base chance cap)
					if getEntityVarByName(attacker,"hasAdrenalineBuff") is "true":
						add 10 to {_criticalHitChance}
					if getEntityVarByName(attacker,"hasSpecialPulseBuff") is "1":
						add 10 to {_criticalHitChance}
					#add getAllyLeadership(attacker) to {_criticalHitChance}
					add (({t_morale.%attacker%} * 3) * (1 + checkSlots(attacker,"Rising Courage"))) to {_criticalHitChance}
					#Bloody Mess [Trait]
					if {traits.%attacker%::Bloody Mess} is set:
						add 20 to {_criticalHitChance}
					if {traits.%victim%::Bloody Mess} is set:
						add 20 to {_criticalHitChance}
					#Cap crit chance to 100 for obvious reasons
					if {_criticalHitChance} is more than 100:
						set {_criticalHitChance} to 100
					#Honest Heart [Trait]
					if {traits.%attacker%::Honest Heart} is set:
						set {_criticalHitChance} to 0
					chance of {_criticalHitChance}%:
						set damage to damage * 2
						send "<orange><bold>Critical Hit!!" to the attacker
						play 15 (gold block break with speed 1) at the victim
						play mob spawner flames at the victim
						play sound "entity.zombie_villager.cure" with volume 0.5 and pitch 1.5 at attacker for victim
						play sound "entity.zombie_villager.cure" with volume 0.5 and pitch 1.5 at victim for attacker
						#Lethality (Perk)
						if checkSlots(attacker,"Lethality") is 1:
							set damage to damage * 1.25
						#Venom Fang (Perk)
						if checkSlots(attacker,"Venom Fang") is 1:
							add floor(getEntityStatTotal(attacker,"STR") * 0.2) to damage
							applyRecoilDamage(attacker,5)
					#Prayer Ring
					else if attacker's health is less than or equal to (attacker's maximum health * 0.5):
						loop all items in the attacker's inventory:
							if the name of the loop-item is "<orange><bold>Prayer Ring":
								set damage to damage * 2
								send "<orange><bold>Critical Hit [Prayer Ring]!!" to the attacker
								play 15 (gold block break with speed 1) at the victim
								play mob spawner flames at the victim
								play sound "entity.zombie_villager.cure" with volume 0.5 and pitch 1.5 at attacker for victim
								play sound "entity.zombie_villager.cure" with volume 0.5 and pitch 1.5 at victim for attacker
								#Lethality
								if checkSlots(attacker,"Lethality") is 1:
									set damage to damage * 1.25
								#Venom Fang (Perk)
								if checkSlots(attacker,"Venom Fang") is 1:
									add floor(getEntityStatTotal(attacker,"STR") * 0.2) to damage
									applyRecoilDamage(attacker,5)
								exit 1 loop
					#Special Skills
					#Anything that changes the damage calculation (like temporary DEF/RES debuffs) should be checked BEFORE the damage calcuation
					#Moonbow
					if getEntitySkillsInHand(attacker,"Moonbow",0,5) is 1:
						if specialCheck(attacker,getEntityStatTotal(attacker,"LCK"),1.2,90) is 1:
							set {_proc} to "Moonbow"
							set {_MoonbowDEFReduction} to floor(((getEntityStat(victim,"DEF")) + (getEntityStatBuff(victim,"DEF"))) * 0.3)
							set {_MoonbowRESReduction} to floor(((getEntityStat(victim,"RES")) + (getEntityStatBuff(victim,"RES"))) * 0.3)
							set {_debug} to changeEntityStatBuff(victim,"DEF",{_MoonbowDEFReduction} * -1,"Moonbow Temp Debuff",0)
							set {_debug} to changeEntityStatBuff(victim,"RES",{_MoonbowRESReduction} * -1,"Moonbow Temp Debuff",0)		
							play 20 (cloud with speed 1) at the victim
							play 20 (ender signal with speed 1) at the victim
							play sound "entity.zombie_villager.cure" with volume 0.5 and pitch 1.5 at victim for attacker
					#Luna
					else if getEntitySkillsInHand(attacker,"Luna",0,5) is 1:
						if specialCheck(attacker,getEntityStatTotal(attacker,"LCK"),1,70) is 1:
							set {_proc} to "Luna"
							set {_LunaDEFReduction} to floor(((getEntityStat(victim,"DEF")) + (getEntityStatBuff(victim,"DEF"))) * 0.5)
							set {_LunaRESReduction} to floor(((getEntityStat(victim,"RES")) + (getEntityStatBuff(victim,"RES"))) * 0.5)
							set {_debug} to changeEntityStatBuff(victim,"DEF",{_LunaDEFReduction} * -1,"Luna Temp Debuff",0)
							set {_debug} to changeEntityStatBuff(victim,"RES",{_LunaRESReduction} * -1,"Luna Temp Debuff",0)
							if {verboseCombatLogging.%attacker%} is true:
								send formatted "<gold>Luna reduces foe's DEF by: <white>%{_LunaDEFReduction}%." to the attacker
								send formatted "<gold>Luna reduces foe's RES by: <white>%{_LunaRESReduction}%." to the attacker							
							play 20 (cloud with speed 1) at the victim
							play 20 (ender signal with speed 1) at the victim
							play sound "entity.zombie_villager.cure" with volume 0.5 and pitch 1.5 at victim for attacker
					#Aether
					else if getEntitySkillsInHand(attacker,"Aether",0,5) is 1:
						if specialCheck(attacker,getEntityStatTotal(attacker,"LCK"),0.9,50) is 1:
							#To make Aether's activation "meatier", we wait until after stat calculations so that the Sol part of Aether's effect heals more damage.
							set {_proc} to "Aether"
							set {_AetherDEFReduction} to floor(((getEntityStat(victim,"DEF")) + (getEntityStatBuff(victim,"DEF"))) * 0.5)
							set {_AetherRESReduction} to floor(((getEntityStat(victim,"RES")) + (getEntityStatBuff(victim,"RES"))) * 0.5)
							if {verboseCombatLogging.%attacker%} is true:
								send formatted "<gold>Aether reduces foe's DEF by: <white>%{_AetherDEFReduction}%." to the attacker
								send formatted "<gold>Aether reduces foe's RES by: <white>%{_AetherRESReduction}%." to the attacker
							set {_debug} to changeEntityStatBuff(victim,"DEF",{_AetherDEFReduction} * -1,"Aether Temp Debuff",0)
							set {_debug} to changeEntityStatBuff(victim,"RES",{_AetherRESReduction} * -1,"Aether Temp Debuff",0)	
							play 10 (heart with speed 1) at the attacker
							show 15 (gold block break with speed 1) at the attacker
							play 20 (cloud with speed 1) at the victim
							play 20 (ender signal with speed 1) at the victim
							play sound "item.totem.use" with volume 0.5 and pitch 1 at victim for attacker
							play sound "entity.zombie_villager.cure" with volume 0.5 and pitch 1.5 at victim for attacker
					#Lunar Brace DEF/RES Reduction
					if {_proc} is set:
						if the 2nd line of the lore of the attacker's tool contains "Lunar Brace":
							set {_LunarBraceDEFReduction} to floor(((getEntityStat(victim,"DEF")) + (getEntityStatBuff(victim,"DEF"))) * 0.3)
							set {_LunarBraceRESReduction} to floor(((getEntityStat(victim,"RES")) + (getEntityStatBuff(victim,"RES"))) * 0.3)
							if {verboseCombatLogging.%attacker%} is true:
								send formatted "<gold>Lunar Brace reduces foe's DEF by: <white>%{_LunarBraceDEFReduction}%." to the attacker
								send formatted "<gold>Lunar Brace reduces foe's RES by: <white>%{_LunarBraceRESReduction}%." to the attacker
							set {_debug} to changeEntityStatBuff(victim,"DEF",{_LunarBraceDEFReduction} * -1,"Lunar Brace Temp Debuff",0)
							set {_debug} to changeEntityStatBuff(victim,"RES",{_LunarBraceRESReduction} * -1,"Lunar Brace Temp Debuff",0)		
							play 20 (cloud with speed 1) at the victim
							play 20 (ender signal with speed 1) at the victim
							play sound "entity.zombie_villager.cure" with volume 0.5 and pitch 1.5 at victim for attacker
					#Stat Calculations
					#Magical damage calculation
					if {_magical} is 1:
						add (((getEntityStatTotal(attacker,"MAG")) / 2) - ((getEntityStatTotal(victim,"RES")) / 2)) to damage
						if {verboseCombatLogging.%attacker%} is true:
							send formatted "<gold>[Magical Damage] <white>Damage calculation: %(((getEntityStatTotal(attacker,"MAG")) / 2) - ((getEntityStatTotal(victim,"RES")) / 2))%" to the attacker
							send formatted "<gold>[Magical Damage] <white>Damage calculation: %(((getEntityStatTotal(attacker,"MAG")) / 2) - ((getEntityStatTotal(victim,"RES")) / 2))%" to the victim
					#Physical damage calculation
					else:
						add (((getEntityStatTotal(attacker,"STR")) / 2) - ((getEntityStatTotal(victim,"DEF")) / 2)) to damage
						if {verboseCombatLogging.%attacker%} is true:
							send formatted "<gold>[Physical Damage] <white>Damage calculation: %(((getEntityStatTotal(attacker,"STR")) / 2) - ((getEntityStatTotal(victim,"DEF")) / 2))%" to the attacker
							send formatted "<gold>[Physical Damage] <white>Damage calculation: %(((getEntityStatTotal(attacker,"STR")) / 2) - ((getEntityStatTotal(victim,"DEF")) / 2))%" to the victim
					#These Special skills should take effect only after the normal damage calculation has been done, gives "meatier" effects and makes more sense.
					#Sol
					if getEntitySkillsInHand(attacker,"Sol",0,5) is more than 0:
						if specialCheck(attacker,getEntityStatTotal(attacker,"LCK"),1.0,75) is 1:
							set {_proc} to "Sol"
							heal the attacker by (damage * 0.5)
							if {verboseCombatLogging.%attacker%} is true:
								send formatted "<gold>Sol restores %damage * 0.5% HP." to the attacker
							play 10 (heart with speed 1) at the attacker
							show 15 (gold block break with speed 1) at the attacker
							play sound "entity.player.levelup" with volume 1 and pitch 0.75 at victim for attacker
					#Retribution
					else if getEntitySkillsInHand(attacker,"Retribution",0,5) is 1:
						if specialCheck(attacker,getEntityStatTotal(attacker,"LCK"),1.0,75) is 1:
							set {_proc} to "Retribution"
							add ((attacker's maximum health - attacker's health) * 0.5) to damage
							if {verboseCombatLogging.%attacker%} is true:
								send formatted "<gold>Retribution boosts damage by %((attacker's maximum health - attacker's health) * 0.5)%." to the attacker
							play 20 (red wool break with speed 1) at the victim
							play sound "entity.zombie_villager.cure" with volume 0.25 and pitch 1.5 at victim for attacker
					#Glimmer
					else if getEntitySkillsInHand(attacker,"Glimmer",0,5) is 1:
						if specialCheck(attacker,getEntityStatTotal(attacker,"LCK"),0.75,60) is 1:
							set {_proc} to "Glimmer"
							set damage to damage * 1.5
							if {verboseCombatLogging.%attacker%} is true:
								send formatted "<gold>Glimmer boosts damage by 1.5x." to the attacker
							play 15 (nether portal break with speed 1) at the victim
							play sound "entity.zombie_villager.cure" with volume 0.5 and pitch 1.5 at victim for attacker
					#Deadeye
					else if getEntitySkillsInHand(attacker,"Deadeye",0,5) is 1:
						if attacker's tool is bow:
							if specialCheck(attacker,getEntityStatTotal(attacker,"LCK"),0.65,60) is 1:
								set {_proc} to "Deadeye"
								set damage to damage * (1 + (getEntityArmorDamageReduction(victim)))
								set damage to damage * 1.5
								if {verboseCombatLogging.%attacker%} is true:
									send formatted "<gold>Deadeye boosts damage by 1.5x." to the attacker
								play 15 (nether portal break with speed 1) at the victim
								play sound "entity.zombie_villager.cure" with volume 0.5 and pitch 1.5 at victim for attacker
					#Ruptured Sky
					else if getEntitySkillsInHand(attacker,"Ruptured Sky",0,5) is 1:
						if specialCheck(attacker,getEntityStatTotal(attacker,"LCK"),0.65,60) is 1:
							set {_proc} to "Ruptured Sky"
							add (((getEntityStatTotal(victim,"STR")) + (getEntityStatTotal(victim,"MAG"))) * 0.5) to damage
							if {verboseCombatLogging.%attacker%} is true:
								send formatted "<gold>Ruptured Sky boosts damage by %(((getEntityStatTotal(victim,"STR")) + (getEntityStatTotal(victim,"MAG"))) * 0.5)%." to the attacker
							play 20 (purple wool break with speed 1) at the victim
							play 20 (dust of netherrack with speed 1) at the victim
							play sound "item.totem.use" with volume 0.5 and pitch 2 at victim for attacker
					#Astra
					else if getEntitySkillsInHand(attacker,"Astra",0,5) is 1:
						if specialCheck(attacker,getEntityStatTotal(attacker,"LCK"),0.5,50) is 1:
							set {_proc} to "Astra"
							set damage to damage * 2.5
							if {verboseCombatLogging.%attacker%} is true:
								send formatted "<gold>Astra boosts damage by 2.5x." to the attacker
							play 10 (cloud with speed 1) at the victim
							play 20 (nether portal break with speed 1) at the victim
							play sound "entity.zombie_villager.cure" with volume 0.5 and pitch 1 at victim for attacker
					#Dragon Fang
					else if getEntitySkillsInHand(attacker,"Dragon Fang",0,5) is 1:
						if specialCheck(attacker,getEntityStatTotal(attacker,"LCK"),0.60,60) is 1:
							set {_proc} to "Dragon Fang"
							add (((getEntityStatTotal(attacker,"STR")) + (getEntityStatTotal(attacker,"MAG"))) * 0.25) to damage
							if {verboseCombatLogging.%attacker%} is true:
								send formatted "<gold>Dragon Fang boosts damage by %(((getEntityStatTotal(attacker,"STR")) + (getEntityStatTotal(attacker,"MAG"))) * 0.25)%." to the attacker
							play 20 (purple wool break with speed 1) at the victim
							play 20 (dust of netherrack with speed 1) at the victim
							play sound "item.totem.use" with volume 0.5 and pitch 2 at victim for attacker
					#Bonfire
					else if getEntitySkillsInHand(attacker,"Bonfire",0,5) is 1:
						if specialCheck(attacker,getEntityStatTotal(attacker,"LCK"),0.6,60) is 1:
							set {_proc} to "Bonfire"
							add (getEntityStatTotal(attacker,"DEF") * 0.5) to damage
							if {verboseCombatLogging.%attacker%} is true:
								send formatted "<gold>Bonfire boosts damage by %(getEntityStatTotal(attacker,"DEF") * 0.5)%." to the attacker
							play 20 (orange wool break with speed 1) at the victim
							play 20 (dust of netherrack with speed 1) at the victim
							play sound "item.totem.use" with volume 0.5 and pitch 2 at victim for attacker
					#Iceberg
					else if getEntitySkillsInHand(attacker,"Iceberg",0,5) is 1:
						if specialCheck(attacker,getEntityStatTotal(attacker,"LCK"),0.6,60) is 1:
							set {_proc} to "Iceberg"
							add (getEntityStatTotal(attacker,"RES") * 0.5) to damage
							if {verboseCombatLogging.%attacker%} is true:
								send formatted "<gold>Iceberg boosts damage by %(getEntityStatTotal(attacker,"RES") * 0.6)%." to the attacker
							play 20 (light blue wool break with speed 1) at the victim
							play 20 (dust of netherrack with speed 1) at the victim
							play sound "item.totem.use" with volume 0.5 and pitch 2 at victim for attacker
					#Hurricane
					#else if getEntitySkillsInHand(attacker,"Hurricane",0,5) is 1:
					#	if specialCheck(attacker,getEntityStatTotal(attacker,"LCK"),0.8,60) is 1:
					#		set {_proc} to "Hurricane"
					#		add (getEntityStatTotal(attacker,"SPD") * 0.8) to damage
					#		if {verboseCombatLogging.%attacker%} is true:
					#			send formatted "<gold>Hurricane boosts damage by %(getEntityStatTotal(attacker,"SPD") * 0.8)%." to the attacker
					#		play 20 (lime wool break with speed 1) at the victim
					#		play 20 (dust of netherrack with speed 1) at the victim
					#		play sound "item.totem.use" with volume 0.5 and pitch 2 at victim for attacker
					#Rising Thunder
					else if getEntitySkillsInHand(attacker,"Rising Thunder",0,5) is 1:
						if specialCheck(attacker,getEntityStatTotal(attacker,"LCK"),0.6,75) is 1:
							set {_proc} to "Rising Thunder"
							#AOE Behavior
							loop all entities in radius 10 of the victim:
								if loop-entity is not the victim:
									if loop-entity is not the attacker:
										if {party.%loop-entity%} is not {party.%attacker%}:
											set {_aoeDamage} to damage * 0.5
											applyRecoilDamage(loop-entity,{_aoeDamage})
											play 10 (firework spark with speed 1) at the loop-entity
											#send formatted "<light red>Struck by %attacker's tablist name%'s Rising Thunder!" to loop-entity
							play sound "entity.zombie_villager.cure" with volume 0.5 and pitch 1.5 at victim for attacker
					#Blazing Thunder
					else if getEntitySkillsInHand(attacker,"Blazing Thunder",0,5) is 1:
						if specialCheck(attacker,getEntityStatTotal(attacker,"LCK"),0.6,75) is 1:
							set {_proc} to "Blazing Thunder"
							set damage to damage * 1.25
							play 10 (firework spark with speed 1) at the victim
							#AOE Behavior
							loop all entities in radius 5 of the victim:
								if loop-entity is not the victim:
									if loop-entity is not the attacker:
										if {party.%loop-entity%} is not {party.%attacker%}:
											set {_aoeDamage} to damage * 0.5
											applyRecoilDamage(loop-entity,{_aoeDamage})
											play 10 (firework spark with speed 1) at the loop-entity
											#send formatted "<light red>Struck by %attacker's tablist name%'s Blazing Thunder!" to loop-entity
							play sound "entity.zombie_villager.cure" with volume 0.5 and pitch 1.5 at victim for attacker
					#Galeforce
					else if getEntitySkillsInHand(attacker,"Galeforce",0,5) is 1:
						if specialCheck(attacker,getEntityStatTotal(attacker,"LCK"),1,50) is 1:
							set {_proc} to "Galeforce"
							loop all entities in radius 15 of the attacker:
								if loop-entity is not the attacker:
									if {party.%loop-entity%} is not {party.%attacker%}:
										if {t_galeforceCooldown.%attacker%} is not set:
											applyOOCStatusEffect(loop-entity,"Dazed",5)
											play large explosion at the loop-entity
											#send formatted "<light red>Dazed by %attacker%'s Galeforce!" to loop-entity
							set {t_galeforceCooldown.%attacker%} to 5
							play sound "entity.zombie_villager.cure" with volume 0.5 and pitch 1 at victim for attacker
					#Njorun's Zeal (Perk)
					if checkSlots(attacker,"Njorun's Zeal") is 1:
						if attacker does not have weakness:
							if attacker does not have slowness:
								if attacker's health is more than or equal to attacker's maximum health * 0.5:
									if attacker is riding a horse:
										set {_proc} to "Njorun's Zeal"
										loop all entities in radius 15 of the attacker:
											if loop-entity is not the attacker:
												if {party.%loop-entity%} is not {party.%attacker%}:
													if {t_njorunsZealCooldown.%attacker%} is not set:
														applyOOCStatusEffect(loop-entity,"Dazed",5)
														play large explosion at the loop-entity
														send formatted "<light red>Dazed by %attacker%'s Njorun's Zeal perk!" to loop-entity
										set {t_njorunsZealCooldown.%attacker%} to 5
										play sound "entity.zombie_villager.cure" with volume 0.5 and pitch 1 at victim for attacker
										apply weakness 2 to the attacker for 10 seconds
										apply slowness 2 to the attacker for 10 seconds
										loop all horses in radius 1 of the attacker:
											apply weakness 2 to the loop-horse for 10 seconds
											apply slowness 2 to the loop-horse for 10 seconds
					#Pavise
					if getEntitySkillsInHand(victim,"Pavise",0,5) is 1:
						if getEntityRange(attacker) is 1 or 3:
							if defensiveSpecialCheck(victim,getEntityStatTotal(victim,"LCK"),2,100) is 1:
								set {_defensiveProc} to "Pavise"
								set damage to damage * 0.5
								if {verboseCombatLogging.%victim%} is true:
									send formatted "<gold>Pavise reduces damage by 0.5x." to the attacker
								if the 6th line of the lore of the victim's tool contains "Koenig":
									subtract 7.5 from damage
								if the 2nd line of the lore of the victim's tool contains "Shield Pulse":
									subtract 2.5 from damage
								if checkSlots(victim,"Shield Pulse") is 1:
									subtract 2.5 from damage
								#Time's Pulse
								if getEntitySkillsInHand(victim,"Time's Pulse",0,3) is more than 0:
									if {t_isCombatTagged.%victim%} is set:
										subtract 7.5 from damage
								play 10 (firework spark with speed 1) at the victim
								play sound "entity.zombie_villager.cure" with volume 0.5 and pitch 1.5 at attacker for victim
					#Aegis
					else if getEntitySkillsInHand(victim,"Aegis",0,5) is 1:
						if getEntityRange(attacker) is 2 or 4:
							if defensiveSpecialCheck(victim,getEntityStatTotal(victim,"LCK"),2,100) is 1:
								set {_defensiveProc} to "Aegis"
								set damage to damage * 0.5
								if {verboseCombatLogging.%victim%} is true:
									send formatted "<gold>Aegis reduces damage by 0.5x." to the attacker
								if the 6th line of the lore of the victim's tool contains "Koenig":
									subtract 7.5 from damage
								if the 2nd line of the lore of the victim's tool contains "Shield Pulse":
									subtract 2.5 from damage
								if checkSlots(victim,"Shield Pulse") is 1:
									subtract 2.5 from damage
								#Time's Pulse
								if getEntitySkillsInHand(victim,"Time's Pulse",0,3) is more than 0:
									if {t_isCombatTagged.%victim%} is set:
										subtract 7.5 from damage
								play 10 (firework spark with speed 1) at the victim
								play sound "entity.zombie_villager.cure" with volume 0.5 and pitch 1.5 at attacker for victim
					#Buckler
					else if getEntitySkillsInHand(victim,"Buckler",0,5) is 1:
						if defensiveSpecialCheck(victim,getEntityStatTotal(victim,"LCK"),1.5,90) is 1:
							set {_defensiveProc} to "Buckler"
							set damage to damage * 0.75
							if {verboseCombatLogging.%victim%} is true:
								send formatted "<gold>Buckler reduces damage by 0.75x." to the attacker
							if the 6th line of the lore of the victim's tool contains "Koenig":
								subtract 7.5 from damage
							if the 2nd line of the lore of the victim's tool contains "Shield Pulse":
								subtract 2.5 from damage
							if checkSlots(victim,"Shield Pulse") is 1:
								subtract 2.5 from damage
							#Time's Pulse
							if getEntitySkillsInHand(victim,"Time's Pulse",0,3) is more than 0:
								if {t_isCombatTagged.%victim%} is set:
									subtract 7.5 from damage								
							play 10 (firework spark with speed 1) at the victim
							play sound "entity.zombie_villager.cure" with volume 0.5 and pitch 1.5 at attacker for victim
					#Holy Vestments
					else if getEntitySkillsInHand(victim,"Holy Vestments",0,5) is 1:
						if defensiveSpecialCheck(victim,getEntityStatTotal(victim,"LCK"),1.3,70) is 1:
							set {_defensiveProc} to "Holy Vestments"
							set damage to damage * 0.5
							if {verboseCombatLogging.%victim%} is true:
								send formatted "<gold>Holy Vestments reduces damage by 0.5x." to the attacker
							if {t_cos_doubleattacks.%attacker%} is more than 1:
								set damage to damage * 0.7
								if {verboseCombatLogging.%victim%} is true:
									send formatted "<gold>The foe can double, Holy Vestments reduces damage further by 0.7x." to the attacker
							if the 6th line of the lore of the victim's tool contains "Koenig":
								subtract 7.5 from damage
							if the 2nd line of the lore of the victim's tool contains "Shield Pulse":
								subtract 2.5 from damage
							if checkSlots(victim,"Shield Pulse") is 1:
								subtract 2.5 from damage
							#Time's Pulse
							if getEntitySkillsInHand(victim,"Time's Pulse",0,3) is more than 0:
								if {t_isCombatTagged.%victim%} is set:
									subtract 7.5 from damage								
							play 10 (firework spark with speed 1) at the victim
							play sound "entity.zombie_villager.cure" with volume 0.5 and pitch 1.5 at attacker for victim
					#Miracle
					else if getEntitySkillsInHand(victim,"Miracle",0,5) is 1:
						if damage is more than victim's health:
							if defensiveSpecialCheck(victim,getEntityStatTotal(victim,"LCK"),1,100) is 1:
								set {_defensiveProc} to "Miracle"
								cancel event
								set victim's health to 0.5
								if the 6th line of the lore of the victim's tool contains "Koenig":
									set victim's health to 7.5
								if the 2nd line of the lore of the victim's tool contains "Shield Pulse":
									add 2.5 to the victim's health
								if checkSlots(victim,"Shield Pulse") is 1:
									subtract 2.5 from damage
								#Time's Pulse
								if getEntitySkillsInHand(victim,"Time's Pulse",0,3) is more than 0:
									if {t_isCombatTagged.%victim%} is set:
										add 7.5 to victim's health								
								play 20 (firework spark with speed 1) at the victim
								play sound "item.totem.use" with volume 0.5 and pitch 1 at victim for attacker
								play sound "entity.zombie_villager.cure" with volume 0.5 and pitch 1.5 at attacker for victim
					#Miracle [Tyrfing]
					if getEntitySacredTreasure(victim) is 2:
						if damage is more than victim's health:
							if defensiveSpecialCheck(victim,getEntityStatTotal(victim,"LCK"),1,100) is 1:
								set {_defensiveProc} to "Tyrfing's Miracle"
								cancel event
								set victim's health to 0.5
								if the 6th line of the lore of the victim's tool contains "Koenig":
									set victim's health to 7.5
								if the 2nd line of the lore of the victim's tool contains "Shield Pulse":
									add 2.5 to the victim's health
								if checkSlots(victim,"Shield Pulse") is 1:
									subtract 2.5 from damage
								#Time's Pulse
								if getEntitySkillsInHand(victim,"Time's Pulse",0,3) is more than 0:
									if {t_isCombatTagged.%victim%} is set:
										add 7.5 to victim's health								
								play 20 (firework spark with speed 1) at the victim
								play sound "item.totem.use" with volume 0.5 and pitch 1 at victim for attacker
								play sound "entity.zombie_villager.cure" with volume 0.5 and pitch 1.5 at attacker for victim
					#Near Save
					loop all players in radius 30 of the victim:
						if checkSlots(loop-player,"Near Save") is 1:
							set {_odds} to getEntityStatTotal(loop-player,"LCK")
							set {_odds} to floor({_odds} / 4)
							if {_odds} is more than 100:
								set {_odds} to 100
							chance of {_odds}%:
								set damage to damage / 2
								send "<light yellow>%loop-player's tablist name%<reset><light yellow>'s Near Save perk reduced the damage suffered." to the victim
					#Shield damage reduction
					if victim is blocking:
						set {_poise} to ((getEntityStatTotal(victim,"STR")) + (getEntityStatTotal(victim,"DEF")))
						if the lore of the victim's offhand tool contains "Skill Greed":
							set {_poise} to {_poise} / 4
						else if the lore of the victim's offhand tool contains "Sturdy Frame":
							set {_poise} to {_poise} * 2
						set {_poise} to ({_poise} * ((checkSlots(victim,"True Block") + 1)))
						#Shield parry
						if {t_canShieldParry.%victim%} is true:
							set {_poise} to {_poise} * 3
							send formatted "<gold>Parried the opponent! Poise raised to %{_poise}%" to the victim
							play sound "block.anvil.place" with volume 0.7 and pitch 0.8 at the victim
							clear {t_canShieldParry.%victim%}
						if {_poise} is less than damage:
							set damage to (damage * (({_poise} - damage) * 0.01))
							send "<light red>The block failed!" to the victim
						else:
							set damage to ((damage * (({_poise} - damage) * 0.1)) - 5)
							play sound "entity.experience_orb.pickup" with volume 3 and pitch 2 at victim for attacker
							play sound "entity.experience_orb.pickup" with volume 3 and pitch 2 at victim for victim
							send "<light green>Blocked the attack successfully!" to the victim
							send formatted "<light red>%victim's tablist name%<reset><light red>'s block was too strong!" to the attacker
				#Check if a Special skill activated on this hit
				if {_proc} is set:
					#Koenig baked refine
					if nbt of attacker's tool contains "bakedRefine:4":
						add 7.5 to damage
						set {_mergeToTest} to 0
						loop 10 times:
							add 1 to {_mergeToTest}
							if nbt of attacker's tool contains "mergeCount:%{_mergeToTest}%":
								add 2 to damage
							else if nbt of attacker's tool contains "mergeCount:10":
								add 2 to damage
							else:
								exit 1 loop
					#Wrath
					if getEntitySkillsInHand(attacker,"Wrath",0,2) is more than 0:
						if attacker's health is less than or equal to attacker's maximum health * 0.75:
							add 10 to damage
					#Time's Pulse
					if getEntitySkillsInHand(attacker,"Time's Pulse",0,3) is more than 0:
						if {t_isCombatTagged.%attacker%} is set:
							add 7.5 to damage
					#Assasin's Dagger
					if getEntitySacredTreasure(attacker) is 36:
						set damage to damage * 1.3
						applyOOCStatusEffect(victim,"Poison",5)
					#Special post-stat check effects (ex: aether's healing effect)
					if {_proc} is "Aether":
						heal the attacker by (damage * 0.5)
						set {_debug} to changeEntityStatBuff(victim,"DEF",{_AetherDEFReduction},"Aether Temp Debuff",0)
						set {_debug} to changeEntityStatBuff(victim,"RES",{_AetherRESReduction},"Aether Temp Debuff",0)
					else if {_proc} is "Moonbow":
						set {_debug} to changeEntityStatBuff(victim,"DEF",{_MoonbowDEFReduction},"Moonbow Temp Debuff",0)
						set {_debug} to changeEntityStatBuff(victim,"RES",{_MoonbowRESReduction},"Moonbow Temp Debuff",0)
					else if {_proc} is "Luna":
						set {_debug} to changeEntityStatBuff(victim,"DEF",{_LunaDEFReduction},"Luna Temp Debuff",0)
						set {_debug} to changeEntityStatBuff(victim,"RES",{_LunaRESReduction},"Luna Temp Debuff",0)
					if the 2nd line of the lore of the attacker's tool contains "Lunar Brace":
						set {_debug} to changeEntityStatBuff(victim,"DEF",{_LunarBraceDEFReduction},"Lunar Brace Temp Debuff",0)
						set {_debug} to changeEntityStatBuff(victim,"RES",{_LunarBraceRESReduction},"Lunar Brace Temp Debuff",0)
					if the 6th line of the lore of the attacker's tool contains "Koenig":
						add 7.5 to damage
					if the 2nd line of the lore of the attacker's tool contains "Solar Brace":
						heal the attacker by (damage * 0.2)
					#Siegmund heal-on-special
					if getEntitySacredTreasure(attacker) is 15:
						heal the attacker by (attacker's maximum health * 0.25)
					#Daybreak heal-on-special
					else if getEntitySacredTreasure(attacker) is 12:
						if the 6th line of the lore of the attacker's tool contains "Unique":
							heal the attacker by (damage * 0.3)
					#Rex Hasta boost damage on special
					else if getEntitySacredTreasure(attacker) is 18:
						add 20 to damage
						if the 6th line of the lore of the attacker's tool contains "Unique":
							set damage to damage * 1.25
							if attacker's health is less than or equal to attacker's maximum health * 0.75:
								add 10 to damage
						set {_rexHastaPostCombatBuff} to true
					#Lethality
					if checkSlots(attacker,"Lethality") is 1:
						set damage to damage * 1.25
				#Broadcast Special quote and what special was activated
				#Special case for defensive specials
				if {_defensiveProc} is set:
					send formatted "<light purple>%{_defensiveProc}% was activated!" to the victim
					if checkSlots(victim,"Requiem") is 1:
						loop all players in radius 30 of the victim:
							if {party.%loop-player%} is {party.%victim%}:
								apply strength 2 to loop-player for 10 seconds
								apply swiftness 2 to loop-player for 10 seconds
					if {quotesToggle.%victim%} is true:
						set {_quoteRNG} to random integer between 1 and 4
						make victim say "<light purple>[%victim's tablist name%'s %{_defensiveProc}%] %{playerQuotes.%victim%::SpecialProc%{_quoteRNG}%}%"
					#Break out of the current loop if Miracle activates (it cancels the damage event so doing any more checks isn't needed)
					if {_proc} is "Miracle":
						exit 1 loop
				else if {_proc} is set:
					if checkSlots(attacker,"Requiem") is 1:
						loop all players in radius 30 of the attacker:
							if {party.%loop-player%} is {party.%attacker%}:
								apply strength 2 to loop-player for 10 seconds
								apply swiftness 2 to loop-player for 10 seconds
					send formatted "<light purple>%{_proc}% was activated!" to the attacker
					if {quotesToggle.%attacker%} is true:
						set {_quoteRNG} to random integer between 1 and 4
						make attacker say "<light purple>[%{_proc}%] %{playerQuotes.%attacker%::SpecialProc%{_quoteRNG}%}%"					
				clear {_proc}
				clear {_defensiveProc}
				#
				#Auto Counters
				#
				#Prevents dead players from counter-attacking (lol)
				if victim is alive:
					if final damage is less than victim's health:
						#Blocks these effects from activating if another skill disables them (like the Windsweep perk)
						if {_disableAutoCounters} is not true:
							#Only allow a specific number of counter-attacks, players will trade blows one after another if they both can make a follow-up.
							if {t_cos_doubleattacks.%victim%} is more than or equal to 1:
								if {t_isCounterAttacking.%victim%} is not true:
									set {t_isCounterAttacking.%victim%} to true
									subtract 1 from {t_cos_doubleattacks.%victim%}
									#Melee Counter
									if distance between attacker and victim is less than or equal to 4.3:
										make the victim damage the attacker by (damage * 0.25)
									#Projectile Counter
									else:
										make the victim damage the attacker by (damage * 0.25)
				subtract 1 from {t_cos_doubleattacks.%attacker%}
			#Report number of hits if it exceeds 1
			if {_timesToAttack} is more than 1:
				send formatted "<light blue>Attacked %2 ^ ({_timesToAttack} - 1)% times!" to the attacker
				#silently reduce damage if you make a follow-up to nerf deathball builds (stacking doubles gives diminishing returns
				set damage to damage * 0.8
			clear {t_cos_doubleattacks.%attacker%}
			clear {t_cos_doubleattacks.%victim%}
			clear {t_isCounterAttacking.%victim%}
			#Reinforced/Warding Refine effects
			if the 6th line of the lore of the attacker's tool contains "Reinforced":
				set damage to (damage + 3) * 1.1
			if the 6th line of the lore of the victim's tool contains "Warding":
				set damage to (damage - 3) * 0.9
			#Finishing Blows
			if attacker is player:
				if {traits.%attacker%::Heavy Handed} is true:
					add 1 to {t_comboBuildup.%attacker%}
				if checkSlots(attacker,"Heavy Hand") is 1:
					set {_HeavyHandModifier} to 1.56
				else:
					set {_HeavyHandModifier} to 1
				if {traits.%attacker%::Loose Cannon} is true:
					set {_loosecannonbuildmodifier} to 1
				#Swords
				if attacker's tool is any sword:
					add ((0.25 * {_HeavyHandModifier}) / ((getEntitySkillsInHand(attacker,"Combo Plus",0,4)) + ({_loosecannonbuildmodifier} + 0) + 1)) to {t_comboBuildup.%attacker%}
					#last hit behavior is unique to each weapon type for additional effects
					if {t_comboBuildup.%attacker%} is more than or equal to 1:
						add 10 to damage
						#Swords deal light AOE damage
						loop all monsters in radius 7 of the victim:
							damage the loop-monster by (damage / 4)
							push the loop-monster backwards at speed 0.4
							push the loop-monster upwards at speed 0.15
						if {verboseCombatLogging.%attacker%} is true:
							send formatted "<gold>Sword finishing blow! +10 damage, AOE-7 at 25%% damage. Melee disabled for %{t_weaponComboPenalty.%attacker%}% seconds." to the attacker							
						create safe explosion of force 0 at the victim
						push the victim backwards at speed 0.45
						push the victim upwards at speed 0.2
						set {t_weaponComboPenalty.%attacker%} to (1.5 / (1 + checkSlots(attacker,"Quick Refrain")))
						set {t_weaponComboPenalty.%attacker%} to {t_weaponComboPenalty.%attacker%} / (1 + checkSlots(attacker,"Traditional Specialist"))
						if checkSlots(attacker,"Crescendo") is 1:
							set {t_weaponComboPenalty.%attacker%} to {t_weaponComboPenalty.%attacker%} * 2
							add 10 to damage
							#Swords deal light AOE damage
							loop all monsters in radius 7 of the victim:
								damage the loop-monster by (damage / 4)
								push the loop-monster backwards at speed 0.4
								push the loop-monster upwards at speed 0.15
							if {verboseCombatLogging.%attacker%} is true:
								send formatted "<gold>Crescendo doubled the effect!" to the attacker
						create bossbar titled "<light blue>Melee Fatigue" and id "weapondowntime.%attacker's uuid%" for attacker with progress 100 with colors blue
						display bossbar "weapondowntime.%attacker's uuid%"
						#Monado - Arts Gauge fill
						if getEntitySacredTreasure(attacker) is 40:
							if {monadoArtsGauge.%attacker%} is less than 100:
								add 33 to {monadoArtsGauge.%attacker%}
								set bossbar "monadogauge.%attacker's uuid%" progress to {monadoArtsGauge.%attacker%}
								if {monadoArtsGauge.%attacker%} is more than or equal to 99:
									set {monadoArtsGauge.%attacker%} to 100
									send "<light blue>Monado Arts gauge filled! Right-click to activate an Art." to the attacker
				#Axes
				else if attacker's tool is any axe:
					add ((0.66 * {_HeavyHandModifier}) / ((getEntitySkillsInHand(attacker,"Combo Plus",0,4) + ({_loosecannonbuildmodifier} + 0) + 1))) to {t_comboBuildup.%attacker%}
					if {t_comboBuildup.%attacker%} is more than or equal to 1:
						add 10 to damage
						set damage to damage * (1.2 + (getEntityArmorDamageReduction(victim)))
						if {verboseCombatLogging.%attacker%} is true:
							send formatted "<gold>Axe finishing blow! +10 damage, Penetrated armour for [%(1 + (getEntityArmorDamageReduction(victim)))%]x damage. Melee disabled for %{t_weaponComboPenalty.%attacker%}% seconds." to the attacker
						create safe explosion of force 0 at the victim
						push the victim backwards at speed 0.7
						push the victim upwards at speed 0.7
						set {t_weaponComboPenalty.%attacker%} to (2.3 / (1 + checkSlots(attacker,"Quick Refrain")))
						set {t_weaponComboPenalty.%attacker%} to {t_weaponComboPenalty.%attacker%} / (1 + checkSlots(attacker,"Traditional Specialist"))
						if checkSlots(attacker,"Crescendo") is 1:
							add 10 to damage
							set damage to damage * (1.2 + (getEntityArmorDamageReduction(victim)))
							set {t_weaponComboPenalty.%attacker%} to {t_weaponComboPenalty.%attacker%} * 2
							if {verboseCombatLogging.%attacker%} is true:
								send formatted "<gold>Crescendo doubled the effect!" to the attacker
						create bossbar titled "<light blue>Melee Fatigue" and id "weapondowntime.%attacker's uuid%" for attacker with progress 100 with colors blue
						display bossbar "weapondowntime.%attacker's uuid%"
				#Lances
				else if nbt of attacker's tool contains "LanceType":
					add ((0.34 * {_HeavyHandModifier}) / ((getEntitySkillsInHand(attacker,"Combo Plus",0,4)) + ({_loosecannonbuildmodifier} + 0) + 1)) to {t_comboBuildup.%attacker%}
					if {t_comboBuildup.%attacker%} is more than or equal to 1:
						add 10 to damage
						set {_debug} to applyOOCStatusEffect(victim,"Dazed",1.5)
						send "<gold>Dazed the foe for 3 seconds!" to the attacker
						if {verboseCombatLogging.%attacker%} is true:
							send formatted "<gold>Lance finishing blow! +10 damage, Foe dazed for 3 seconds. Melee disabled for %{t_weaponComboPenalty.%attacker%}% seconds." to the attacker
						create safe explosion of force 0 at the victim
						push the victim backwards at speed 0.2
						push the victim upwards at speed 0.2
						set {t_weaponComboPenalty.%attacker%} to (1.9 / (1 + checkSlots(attacker,"Quick Refrain")))
						set {t_weaponComboPenalty.%attacker%} to {t_weaponComboPenalty.%attacker%} / (1 + checkSlots(attacker,"Traditional Specialist"))
						if checkSlots(attacker,"Crescendo") is 1:
							add 10 to damage
							set {_debug} to applyOOCStatusEffect(victim,"Dazed",3)
							set {t_weaponComboPenalty.%attacker%} to {t_weaponComboPenalty.%attacker%} * 2
							if {verboseCombatLogging.%attacker%} is true:
								send formatted "<gold>Crescendo doubled the effect!" to the attacker
						create bossbar titled "<light blue>Melee Fatigue" and id "weapondowntime.%attacker's uuid%" for attacker with progress 90 with colors blue
						display bossbar "weapondowntime.%attacker's uuid%"
				#Gauntlets
				else if nbt of attacker's tool contains "GauntletType":
					add ((0.34 * {_HeavyHandModifier}) / ((getEntitySkillsInHand(attacker,"Combo Plus",0,4) + ({_loosecannonbuildmodifier} + 0) + 1))) to {t_comboBuildup.%attacker%}
					if {t_comboBuildup.%attacker%} is more than or equal to 1:
						add 10 to damage
						heal the attacker by 3
						add 3 to the attacker's food bar
						if {verboseCombatLogging.%attacker%} is true:
							send formatted "<gold>Gauntlets finishing blow! +10 damage, Restored 3 hearts & 3 hunger. Melee disabled for %{t_weaponComboPenalty.%attacker%}% seconds." to the attacker
						create safe explosion of force 0 at the victim
						push the victim backwards at speed 0.2
						push the victim upwards at speed 0.4
						set {t_weaponComboPenalty.%attacker%} to (1.5 / (1 + checkSlots(attacker,"Quick Refrain")))
						set {t_weaponComboPenalty.%attacker%} to {t_weaponComboPenalty.%attacker%} / (1 + checkSlots(attacker,"Traditional Specialist"))
						if checkSlots(attacker,"Crescendo") is 1:
							add 10 to damage
							heal the attacker by 3
							add 3 to the attacker's food bar
							set {t_weaponComboPenalty.%attacker%} to {t_weaponComboPenalty.%attacker%} * 2
							if {verboseCombatLogging.%attacker%} is true:
								send formatted "<gold>Crescendo doubled the effect!" to the attacker
						create bossbar titled "<light blue>Melee Fatigue" and id "weapondowntime.%attacker's uuid%" for attacker with progress 100 with colors blue
						display bossbar "weapondowntime.%attacker's uuid%"
				#Daggers
				else if nbt of attacker's tool contains "DaggerType":
					add ((0.2 * {_HeavyHandModifier}) / ((getEntitySkillsInHand(attacker,"Combo Plus",0,4) + ({_loosecannonbuildmodifier} + 0) + 1))) to {t_comboBuildup.%attacker%}
					if {t_comboBuildup.%attacker%} is more than or equal to 1:
						add 10 to damage
						set {_debug} to changeEntityStatBuff(victim,"SPD",-7,"Dagger Finishing Blow",1)
						set {_debug} to changeEntityStatBuff(victim,"STR",-7,"Dagger Finishing Blow",1)
						set {_debug} to changeEntityStatBuff(victim,"DEF",-7,"Dagger Finishing Blow",1)
						set {_debug} to changeEntityStatBuff(victim,"RES",-7,"Dagger Finishing Blow",1)
						if {verboseCombatLogging.%attacker%} is true:
							send formatted "<gold>Dagger finishing blow! +10 damage, inflicted STR/SPD/DEF/RES -7 on foe through next action. Melee disabled for %{t_weaponComboPenalty.%attacker%}% seconds." to the attacker
						create safe explosion of force 0 at the victim
						push the victim backwards at speed 0.2
						push the victim upwards at speed 0.2
						set {t_weaponComboPenalty.%attacker%} to (1 / (1 + checkSlots(attacker,"Quick Refrain")))
						set {t_weaponComboPenalty.%attacker%} to {t_weaponComboPenalty.%attacker%} / (1 + checkSlots(attacker,"Traditional Specialist"))
						if checkSlots(attacker,"Crescendo") is 1:
							set {_debug} to changeEntityStatBuff(victim,"SPD",-7,"Dagger Finishing Blow",1)
							set {_debug} to changeEntityStatBuff(victim,"STR",-7,"Dagger Finishing Blow",1)
							set {_debug} to changeEntityStatBuff(victim,"DEF",-7,"Dagger Finishing Blow",1)
							set {_debug} to changeEntityStatBuff(victim,"RES",-7,"Dagger Finishing Blow",1)
							set {t_weaponComboPenalty.%attacker%} to {t_weaponComboPenalty.%attacker%} * 2
							if {verboseCombatLogging.%attacker%} is true:
								send formatted "<gold>Crescendo doubled the effect!" to the attacker
						create bossbar titled "<light blue>Melee Fatigue" and id "weapondowntime.%attacker's uuid%" for attacker with progress 20 with colors blue
						display bossbar "weapondowntime.%attacker's uuid%"
				#Combo freeze
				if {t_weaponComboPenalty.%attacker%} is not set:
					set {t_weaponComboFreeze.%attacker%} to 3
				if {enableComboBar.%attacker%} is set:
					set bossbar "combobar.%attacker's uuid%" progress to {t_comboBuildup.%attacker%} * 100
			if final damage is less than or equal to 0:
				if victim is not item frame:
					if damage cause is not fall:
						if {traits.%attacker%::Power Player} is true:
							set damage to damage * -1
						else if {traits.%victim%::Power Player} is true:
							set damage to damage * -1
						cancel event
						if projectile exists:
							delete the projectile
						send formatted "<light red>Your efforts are wasted. %victim%'s defenses are too strong." to the attacker
						send formatted "<light green>%attacker%'s blows were no match for your defenses." to the victim
						play sound "entity.experience_orb.pickup" with volume 3 and pitch 2 at victim for attacker
						play sound "entity.experience_orb.pickup" with volume 3 and pitch 2 at victim for victim
			else:
				#Add player attackers to the victim's list of previous combat targets so we can award partial XP later
				if citizen id of the attacker is not set:
					if attacker is player:
						if victim is monster:
							set {t_lastInvolvedCombatTargets.%victim%::%attacker%} to the attacker
							add damage to {t_mobAggro.%victim%::%attacker%}
							loop {t_lastInvolvedCombatTargets.%victim%::*}:
								if {t_mobAggro.%victim%::%loop-index%} is more than {t_mobAggro.%victim%::%attacker%}:
									if "%attacker%" is not "%loop-index%":
										set victim's target to loop-value
			#Castling (Perk)
			if checkSlots(victim,"Castling") is 1:
				if victim's health is less than or equal to (victim's maximum health * 0.7):
					loop all players in radius 15 of the victim:
						if {npc_summonOwner.%citizen id of loop-player%} is the victim:
							set damage to damage * 0.5
							damage loop-player by damage
							send formatted "<light yellow>Castled the damage with %loop-player's name%." to the victim
							exit 1 loop
			#DEF/RES Save (Perk)
			loop all players in radius 15 of the victim:
				if loop-player is not the victim:
					if checkSlots(loop-player,"DEF/RES Save") is 1:
						if {party.%victim%} is {party.%loop-player%}:
							cancel event
							set {_debug} to changeEntityStatBuff(loop-player,"DEF",4,"DEF/RES Save (Perk)",1)
							set {_debug} to changeEntityStatBuff(loop-player,"RES",4,"DEF/RES Save (Perk)",1)
							make the attacker damage loop-player by damage
							exit 1 loop
			set {_actionBarLVL} to getEntityStat(victim,"lvl")
			#Training Mode damage modifiers
			if attacker is player:
				if attacker's world is "Salindrum":
					set damage to damage * {sd.outgoingmult.%attacker%}
			else if victim is player:
				if victim's world is "Salindrum":
					set damage to damage * {sd.incomingmult.%victim%}
			if damage is less than victim's health:
				send action bar "<bold>%victim% | Level: %{_actionBarLVL}% | HP: %victim's health - (final damage / 2)% / %victim's maximum health% | Damage Dealt: %final damage / 2%" to the attacker
			else:
				send action bar "<gold><bold>%victim%<reset><bold> | Level: %{_actionBarLVL}% | HP: <gold><bold>0 / %victim's maximum health%<reset><bold> | Damage Dealt: %final damage / 2% | <gold><bold>Overkill: %abs(victim's health - (final damage / 2))%" to the attacker
			#Finishing Touch (Perk)
			if checkSlots({npc_summonOwner.%citizen id of the attacker%},"Finishing Touch") is 1:
				if {npc_str.%citizen id of the attacker%} is set:
					if final damage is more than or equal to victim's health:
						set damage to 0
						set the victim's health to 1
						cancel event
						set {_debug} to applyOOCStatusEffect(victim,"Finishing Touch",10)
			#Post-Combat Effects (things like recoil damage)
			if attacker is alive:
				#Fury - Attacker
				if getEntitySkillsInHand(attacker,"Fury",2,1) is more than 0:
					if attacker's health is more than 4:
						applyRecoilDamage(attacker,4)
					else:
						set the attacker's health to 0.5
				#Rage - Attacker
				if getEntitySkillsInHand(attacker,"Rage",2,1) is more than 0:
					if attacker's health is more than (attacker's maximum health * 0.2):
						set {_rageRecoil} to floor(attacker's maximum health * 0.2)
						applyRecoilDamage(attacker,{_rageRecoil})
					else:
						set the attacker's health to 0.5
				#Mystic Boost (attacker)
				if getEntitySkillsInHand(attacker,"Mystic Boost",0,2) is more than 0:
					heal the attacker by 6 hearts
				#Mystic Boost perk (attacker)
				if checkSlots(attacker,"Mystic Boost") is 1:
					heal the attacker by 6 hearts
				#Herbivore (attacker)
				if checkSlots(attacker,"Herbivore") is 1:
					heal the attacker by 3 hearts
			if victim is alive:
				#Fury - Victim
				if getEntitySkillsInHand(victim,"Fury",2,1) is more than 0:
					if victim's health is more than 4:
						damage the victim by 2 hearts
					else:
						set the victim's health to 0.5
				#Rage - victim
				if getEntitySkillsInHand(victim,"Rage",2,1) is more than 0:
					if victim's health is more than (victim's maximum health * 0.2):
						set {_rageRecoil} to floor(victim's maximum health * 0.2)
						applyRecoilDamage(victim,{_rageRecoil})
					else:
						set the victim's health to 0.5
				#Mystic Boost (Victim)
				if getEntitySkillsInHand(victim,"Mystic Boost",0,2) is more than 0:
					heal the victim by 6 hearts
				#Mystic Boost perk (Victim)
				if checkSlots(victim,"Mystic Boost") is 1:
					heal the victim by 6 hearts
				#Herbivore (victim)
				if checkSlots(victim,"Herbivore") is 1:
					heal the victim by 3 hearts
			#Savage Blow
			if getEntitySkillsInHand(attacker,"Savage Blow",0,3) is more than 0:
				loop all entities in radius 5 of the victim:
					if loop-entity is not the victim:
						if loop-entity is not the attacker:
							if {party.%victim%} is not {party.%loop-entity%}:
								applyRecoilDamage(loop-entity,4.5)
			#Savage Blow II (Perk)
			if checkSlots(attacker,"Savage Blow II") is 1:
				if attacker's health is more than attacker's maximum health * 0.5:
					loop all entities in radius 7 of the victim:
						if loop-entity is not the victim:
							if loop-entity is not the attacker:
								if {party.%victim%} is not {party.%loop-entity%}:
									if loop-entity's health is more than 8:
										applyRecoilDamage(loop-entity,7)
			#Antigravity
			if getEntitySkillsInHand(attacker,"Antigravity",0,3) is more than 0:
				push the victim upwards at speed 0.33
				loop all entities in radius 7 of the victim:
					if loop-entity is not the victim:
						if loop-entity is not the attacker:
							if {party.%victim%} is not {party.%loop-entity%}:
								apply levitation 1 to the loop-entity for 3 seconds
			#Lethargy
			if getEntitySkillsInHand(attacker,"Lethargy",0,3) is more than 0:
				loop all entities in radius 7 of the victim:
					if loop-entity is not the victim:
						if loop-entity is not the attacker:
							if {party.%victim%} is not {party.%loop-entity%}:
								apply slowness 2 to the loop-entity for 3 seconds
			#Fear
			if getEntitySkillsInHand(attacker,"Fear",0,3) is more than 0:
				loop all entities in radius 7 of the victim:
					if loop-entity is not the victim:
						if loop-entity is not the attacker:
							if {party.%victim%} is not {party.%loop-entity%}:
								apply weakness 2 to the loop-entity for 3 seconds
			#Shroud of Shadow (Perk)
			if {_attackerSoSDebuffOK} is true:
				loop all entities in radius 7 of the victim:
					if loop-entity is not the victim:
						if loop-entity is not the attacker:
							if {party.%victim%} is not {party.%loop-entity%}:
								apply slowness 2 to the loop-entity for 5 seconds
								apply weakness 2 to the loop-entity for 5 seconds
			#Breath of Life
			if getEntitySkillsInHand(attacker,"Breath of Life",0,3) is more than 0:
				loop all players in radius 30 of the attacker:
					if loop-player is not the attacker:
						if loop-player is not the victim:
							if {party.%attacker%} is {party.%loop-player%}:
								heal the loop-player by 4.5 hearts
			#Crushing refine
			if the 6th line of the lore of the attacker's tool contains "Crushing":
				if damage is more than 7:
					set {_crushingBonus} to floor(damage * 0.33)
					set {_debug} to changeEntityStatBuff(attacker,"SpecialAcceleration",{_crushingBonus},"Crushing (Refine)",1)
			if nbt of attacker's tool contains "bakedRefine:5":
				set {_crushingBonus} to 0.33
				set {_mergeToTest} to 0
				loop 10 times:
					add 1 to {_mergeToTest}
					if nbt of attacker's tool contains "mergeCount:%{_mergeToTest}%":
						add 0.05 to {_crushingBonus}
					else if nbt of attacker's tool contains "mergeCount:10":
						add 0.05 to {_crushingBonus}
					else:
						exit 1 loop
				set {_debug} to changeEntityStatBuff(attacker,"SpecialAcceleration",{_crushingBonus},"Crushing (Refine)",1)
				set {_crushingBonus} to floor(damage * {_crushingBonus})
			#
			#Clear buff/debuffs from previous combats
			#
			#Monster Case
			if attacker is monster:
				loop {t_tempActiveBuffs.str.%attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"STR",loop-value * -1,loop-index,1)
					clear {t_tempActiveBuffs.str.%attacker%::%loop-index%}
				loop {t_tempActiveBuffs.mag.%attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"MAG",loop-value * -1,loop-index,1)
					clear {t_tempActiveBuffs.mag.%attacker%::%loop-index%}			
				loop {t_tempActiveBuffs.spd.%attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"SPD",loop-value * -1,loop-index,1)
					clear {t_tempActiveBuffs.spd.%attacker%::%loop-index%}
				loop {t_tempActiveBuffs.def.%attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"DEF",loop-value * -1,loop-index,1)
					clear {t_tempActiveBuffs.def.%attacker%::%loop-index%}
				loop {t_tempActiveBuffs.res.%attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"RES",loop-value * -1,loop-index,1)
					clear {t_tempActiveBuffs.res.%attacker%::%loop-index%}
				loop {t_tempActiveBuffs.lck.%attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"LCK",loop-value * -1,loop-index,1)
					clear {t_tempActiveBuffs.lck.%attacker%::%loop-index%}
				loop {t_tempActiveBuffs.chr.%attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"CHR",loop-value * -1,loop-index,1)
					clear {t_tempActiveBuffs.chr.%attacker%::%loop-index%}
				loop {t_tempActiveBuffs.specialacceleration.%attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"SpecialAcceleration",loop-value * -1,loop-index,1)
					clear {t_tempActiveBuffs.specialacceleration.%attacker%::%loop-index%}
			#Player Case
			else if citizen id of the attacker is not set:
				loop {tempActiveBuffs.str.%attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"STR",loop-value * -1,loop-index,1)
					clear {tempActiveBuffs.str.%attacker%::%loop-index%}
				loop {tempActiveBuffs.mag.%attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"MAG",loop-value * -1,loop-index,1)
					clear {tempActiveBuffs.mag.%attacker%::%loop-index%}			
				loop {tempActiveBuffs.spd.%attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"SPD",loop-value * -1,loop-index,1)
					clear {tempActiveBuffs.spd.%attacker%::%loop-index%}
				loop {tempActiveBuffs.def.%attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"DEF",loop-value * -1,loop-index,1)
					clear {tempActiveBuffs.def.%attacker%::%loop-index%}
				loop {tempActiveBuffs.res.%attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"RES",loop-value * -1,loop-index,1)
					clear {tempActiveBuffs.res.%attacker%::%loop-index%}
				loop {tempActiveBuffs.lck.%attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"LCK",loop-value * -1,loop-index,1)
					clear {tempActiveBuffs.lck.%attacker%::%loop-index%}
				loop {tempActiveBuffs.chr.%attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"CHR",loop-value * -1,loop-index,1)
					clear {tempActiveBuffs.chr.%attacker%::%loop-index%}
				loop {tempActiveBuffs.specialacceleration.%attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"SpecialAcceleration",loop-value * -1,loop-index,1)
					clear {tempActiveBuffs.specialacceleration.%attacker%::%loop-index%}
			#NPC Case
			else if citizen id of the attacker is set:
				loop {npc_tempActiveBuffs.str.%citizen id of attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"STR",loop-value * -1,loop-index,1)
					clear {npc_tempActiveBuffs.str.%citizen id of attacker%::%loop-index%}
				loop {npc_tempActiveBuffs.mag.%citizen id of attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"MAG",loop-value * -1,loop-index,1)
					clear {npc_tempActiveBuffs.mag.%citizen id of attacker%::%loop-index%}			
				loop {npc_tempActiveBuffs.spd.%citizen id of attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"SPD",loop-value * -1,loop-index,1)
					clear {npc_tempActiveBuffs.spd.%citizen id of attacker%::%loop-index%}
				loop {npc_tempActiveBuffs.def.%citizen id of attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"DEF",loop-value * -1,loop-index,1)
					clear {npc_tempActiveBuffs.def.%citizen id of attacker%::%loop-index%}
				loop {npc_tempActiveBuffs.res.%citizen id of attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"RES",loop-value * -1,loop-index,1)
					clear {npc_tempActiveBuffs.res.%citizen id of attacker%::%loop-index%}
				loop {npc_tempActiveBuffs.lck.%citizen id of attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"LCK",loop-value * -1,loop-index,1)
					clear {npc_tempActiveBuffs.lck.%citizen id of attacker%::%loop-index%}
				loop {npc_tempActiveBuffs.chr.%citizen id of attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"CHR",loop-value * -1,loop-index,1)
					clear {npc_tempActiveBuffs.chr.%citizen id of attacker%::%loop-index%}
				loop {npc_tempActiveBuffs.specialacceleration.%citizen id of attacker%::*}:
					set {_debug} to changeEntityStatBuff(attacker,"SpecialAcceleration",loop-value * -1,loop-index,1)
					clear {npc_tempActiveBuffs.specialacceleration.%citizen id of attacker%::%loop-index%}
			#Victim buff/debuff clearing
			#Monster Case
			if victim is monster:
				loop {t_tempActiveBuffs.str.%victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"STR",loop-value * -1,loop-index,1)
					clear {t_tempActiveBuffs.str.%victim%::%loop-index%}
				loop {t_tempActiveBuffs.mag.%victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"MAG",loop-value * -1,loop-index,1)
					clear {t_tempActiveBuffs.mag.%victim%::%loop-index%}			
				loop {t_tempActiveBuffs.spd.%victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"SPD",loop-value * -1,loop-index,1)
					clear {t_tempActiveBuffs.spd.%victim%::%loop-index%}
				loop {t_tempActiveBuffs.def.%victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"DEF",loop-value * -1,loop-index,1)
					clear {t_tempActiveBuffs.def.%victim%::%loop-index%}
				loop {t_tempActiveBuffs.res.%victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"RES",loop-value * -1,loop-index,1)
					clear {t_tempActiveBuffs.res.%victim%::%loop-index%}
				loop {t_tempActiveBuffs.lck.%victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"LCK",loop-value * -1,loop-index,1)
					clear {t_tempActiveBuffs.lck.%victim%::%loop-index%}
				loop {t_tempActiveBuffs.chr.%victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"CHR",loop-value * -1,loop-index,1)
					clear {t_tempActiveBuffs.chr.%victim%::%loop-index%}
				loop {t_tempActiveBuffs.specialacceleration.%victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"SpecialAcceleration",loop-value * -1,loop-index,1)
					clear {t_tempActiveBuffs.specialacceleration.%victim%::%loop-index%}
			#Player Case
			else if citizen id of the victim is not set:
				loop {tempActiveBuffs.str.%victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"STR",loop-value * -1,loop-index,1)
					clear {tempActiveBuffs.str.%victim%::%loop-index%}
				loop {tempActiveBuffs.mag.%victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"MAG",loop-value * -1,loop-index,1)
					clear {tempActiveBuffs.mag.%victim%::%loop-index%}			
				loop {tempActiveBuffs.spd.%victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"SPD",loop-value * -1,loop-index,1)
					clear {tempActiveBuffs.spd.%victim%::%loop-index%}
				loop {tempActiveBuffs.def.%victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"DEF",loop-value * -1,loop-index,1)
					clear {tempActiveBuffs.def.%victim%::%loop-index%}
				loop {tempActiveBuffs.res.%victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"RES",loop-value * -1,loop-index,1)
					clear {tempActiveBuffs.res.%victim%::%loop-index%}
				loop {tempActiveBuffs.lck.%victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"LCK",loop-value * -1,loop-index,1)
					clear {tempActiveBuffs.lck.%victim%::%loop-index%}
				loop {tempActiveBuffs.chr.%victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"CHR",loop-value * -1,loop-index,1)
					clear {tempActiveBuffs.chr.%victim%::%loop-index%}
				loop {tempActiveBuffs.specialacceleration.%victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"SpecialAcceleration",loop-value * -1,loop-index,1)
					clear {tempActiveBuffs.specialacceleration.%victim%::%loop-index%}
			#NPC Case
			else if citizen id of the victim is set:
				loop {npc_tempActiveBuffs.str.%citizen id of victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"STR",loop-value * -1,loop-index,1)
					clear {npc_tempActiveBuffs.str.%citizen id of victim%::%loop-index%}
				loop {npc_tempActiveBuffs.mag.%citizen id of victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"MAG",loop-value * -1,loop-index,1)
					clear {npc_tempActiveBuffs.mag.%citizen id of victim%::%loop-index%}			
				loop {npc_tempActiveBuffs.spd.%citizen id of victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"SPD",loop-value * -1,loop-index,1)
					clear {npc_tempActiveBuffs.spd.%citizen id of victim%::%loop-index%}
				loop {npc_tempActiveBuffs.def.%citizen id of victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"DEF",loop-value * -1,loop-index,1)
					clear {npc_tempActiveBuffs.def.%citizen id of victim%::%loop-index%}
				loop {npc_tempActiveBuffs.res.%citizen id of victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"RES",loop-value * -1,loop-index,1)
					clear {npc_tempActiveBuffs.res.%citizen id of victim%::%loop-index%}
				loop {npc_tempActiveBuffs.lck.%citizen id of victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"LCK",loop-value * -1,loop-index,1)
					clear {npc_tempActiveBuffs.lck.%citizen id of victim%::%loop-index%}
				loop {npc_tempActiveBuffs.chr.%citizen id of victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"CHR",loop-value * -1,loop-index,1)
					clear {npc_tempActiveBuffs.chr.%citizen id of victim%::%loop-index%}
				loop {npc_tempActiveBuffs.specialacceleration.%citizen id of victim%::*}:
					set {_debug} to changeEntityStatBuff(victim,"SpecialAcceleration",loop-value * -1,loop-index,1)
					clear {npc_tempActiveBuffs.specialacceleration.%citizen id of victim%::%loop-index%}			
			#
			#Debuffs
			#
			#The "Seal" skill family, debuffing a specific stat through the victim's next action
			#Attacker activation
			if getEntitySkillsInHand(attacker,"Seal STR",0,2) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"STR",-7,"Seal STR",1)
			else if getEntitySkillsInHand(attacker,"Seal MAG",0,2) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"MAG",-7,"Seal MAG",1)
			else if getEntitySkillsInHand(attacker,"Seal SPD",0,2) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"SPD",-7,"Seal SPD",1)
			else if getEntitySkillsInHand(attacker,"Seal DEF",0,2) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"DEF",-7,"Seal DEF",1)
			else if getEntitySkillsInHand(attacker,"Seal RES",0,2) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"RES",-7,"Seal RES",1)
			if checkSlots(attacker,"Seal ATK") is 1:
				set {_debug} to changeEntityStatBuff(victim,"STR",-7,"Seal ATK (Perk)",1)
				set {_debug} to changeEntityStatBuff(victim,"MAG",-7,"Seal ATK (Perk)",1)
			if checkSlots(attacker,"Seal DEF/RES") is 1:
				set {_debug} to changeEntityStatBuff(victim,"DEF",-7,"Seal DEF/RES (Perk)",1)
				set {_debug} to changeEntityStatBuff(victim,"RES",-7,"Seal DEF/RES (Perk)",1)
			if checkSlots(attacker,"Critical Snag") is 1:
				set {_debug} to changeEntityStatBuff(victim,"SPD",-4,"Critical Snag (Perk)",1)
				set {_debug} to changeEntityStatBuff(victim,"LCK",-4,"Critical Snag (Perk)",1)
				set {_debug} to changeEntityStatBuff(attacker,"SPD",4,"Critical Snag (Perk)",1)
				set {_debug} to changeEntityStatBuff(attacker,"LCK",4,"Critical Snag (Perk)",1)				
			#Victim activation
			if getEntitySkillsInHand(victim,"Seal STR",0,2) is more than 0:
				set {_debug} to changeEntityStatBuff(attacker,"STR",-7,"Seal STR",1)
			else if getEntitySkillsInHand(victim,"Seal MAG",0,2) is more than 0:
				set {_debug} to changeEntityStatBuff(attacker,"MAG",-7,"Seal MAG",1)
			else if getEntitySkillsInHand(victim,"Seal SPD",0,2) is more than 0:
				set {_debug} to changeEntityStatBuff(attacker,"SPD",-7,"Seal SPD",1)
			else if getEntitySkillsInHand(victim,"Seal DEF",0,2) is more than 0:
				set {_debug} to changeEntityStatBuff(attacker,"DEF",-7,"Seal DEF",1)
			else if getEntitySkillsInHand(victim,"Seal RES",0,2) is more than 0:
				set {_debug} to changeEntityStatBuff(attacker,"RES",-7,"Seal RES",1)
			if checkSlots(victim,"Seal ATK") is 1:
				set {_debug} to changeEntityStatBuff(attacker,"STR",-7,"Seal ATK (Perk)",1)
				set {_debug} to changeEntityStatBuff(attacker,"MAG",-7,"Seal ATK (Perk)",1)
			if checkSlots(victim,"Seal DEF/RES") is 1:
				set {_debug} to changeEntityStatBuff(attacker,"DEF",-7,"Seal DEF/RES (Perk)",1)
				set {_debug} to changeEntityStatBuff(attacker,"RES",-7,"Seal DEF/RES (Perk)",1)
			if checkSlots(victim,"Critical Snag") is 1:
				set {_debug} to changeEntityStatBuff(attacker,"SPD",-4,"Critical Snag (Perk)",1)
				set {_debug} to changeEntityStatBuff(attacker,"LCK",-4,"Critical Snag (Perk)",1)
				set {_debug} to changeEntityStatBuff(victim,"SPD",4,"Critical Snag (Perk)",1)
				set {_debug} to changeEntityStatBuff(victim,"LCK",4,"Critical Snag (Perk)",1)
			#Defensive X-Blow skills post-combat buff
			if getEntitySkillsInHand(attacker,"Armoured Blow",2,1) is more than 0:
				set {_dbActive.%attacker%} to changeEntityStatBuff(attacker,"DEF",6,"Armoured Blow",1)
			if getEntitySkillsInHand(attacker,"Warding Blow",2,1) is more than 0:
				set {_dbActive.%attacker%} to changeEntityStatBuff(attacker,"RES",6,"Warding Blow",1)
			if checkSlots(attacker,"Bracing Blow") is 1:
				set {_debug} to changeEntityStatBuff(attacker,"DEF",7,"Bracing Blow (Perk)",1)
				set {_debug} to changeEntityStatBuff(attacker,"RES",7,"Bracing Blow (Perk)",1)
			#Stance skills post-combat buff
			if getEntitySkillsInHand(victim,"Steady Stance",2,1) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"DEF",6,"Steady Stance",1)
				set {_debug} to changeEntityStatBuff(victim,"LCK",6,"Steady Stance",1)
			if getEntitySkillsInHand(victim,"Warding Stance",2,1) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"RES",6,"Warding Stance",1)
				set {_debug} to changeEntityStatBuff(victim,"LCK",6,"Warding Stance",1)
			if getEntitySkillsInHand(victim,"Bracing Stance",2,1) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"DEF",6,"Bracing Stance",1)
				set {_debug} to changeEntityStatBuff(victim,"RES",6,"Bracing Stance",1)
			if getEntitySkillsInHand(victim,"Fierce Stance",2,1) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"STR",6,"Fierce Stance",1)
				set {_debug} to changeEntityStatBuff(victim,"LCK",6,"Fierce Stance",1)
			if getEntitySkillsInHand(victim,"Hexing Stance",2,1) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"MAG",6,"Hexing Stance",1)
				set {_debug} to changeEntityStatBuff(victim,"LCK",6,"Hexing Stance",1)
			if getEntitySkillsInHand(victim,"Kestrel Stance",2,1) is more than 0:
				set {_debug} to changeEntityStatBuff(victim,"STR",5,"Kestrel Stance",1)
				set {_debug} to changeEntityStatBuff(victim,"MAG",5,"Kestrel Stance",1)
				set {_debug} to changeEntityStatBuff(victim,"SPD",5,"Kestrel Stance",1)
			#Form Skills
			if the name of the victim's tool contains "Form":
				loop all players in radius 20 of the victim:
					if {party.%loop-player%} is {party.%victim%}:
						add 1 to {_formAllies}
				if getEntitySkillsInHand(victim,"DEF/RES Form",2,1) is more than 0:
					changeEntityStatBuff(victim,"DEF",{_formAllies} * 3,"DEF/RES Form",1)
					changeEntityStatBuff(victim,"RES",{_formAllies} * 3,"DEF/RES Form",1)
				if getEntitySkillsInHand(victim,"ATK/DEF Form",2,1) is more than 0:
					changeEntityStatBuff(victim,"STR",{_formAllies} * 3,"ATK/DEF Form",1)
					changeEntityStatBuff(victim,"MAG",{_formAllies} * 3,"ATK/DEF Form",1)
					changeEntityStatBuff(victim,"DEF",{_formAllies} * 3,"ATK/DEF Form",1)
				if getEntitySkillsInHand(victim,"ATK/RES Form",2,1) is more than 0:
					changeEntityStatBuff(victim,"STR",{_formAllies} * 3,"ATK/DEF Form",1)
					changeEntityStatBuff(victim,"MAG",{_formAllies} * 3,"ATK/DEF Form",1)
					changeEntityStatBuff(victim,"RES",{_formAllies} * 3,"ATK/RES Form",1)
				if getEntitySkillsInHand(victim,"ATK/SPD Form",2,1) is more than 0:
					changeEntityStatBuff(victim,"STR",{_formAllies} * 3,"ATK/SPD Form",1)
					changeEntityStatBuff(victim,"MAG",{_formAllies} * 3,"ATK/SPD Form",1)
					changeEntityStatBuff(victim,"SPD",{_formAllies} * 3,"ATK/SPD Form",1)
			#Short/Tower Shield
			if getEntityRange(attacker) is 2 or 4:
				if getEntitySkillsInHand(victim,"Tower Shield",2,1) is more than 0:
					changeEntityStatBuff(victim,"DEF",9,"Tower Shield",1)
					changeEntityStatBuff(victim,"RES",9,"Tower Shield",1)
					changeEntityStatBuff(victim,"SpecialAcceleration",10,"Tower Shield",1)
			else:
				if getEntitySkillsInHand(victim,"Short Shield",2,1) is more than 0:
					changeEntityStatBuff(victim,"DEF",9,"Short Shield",1)
					changeEntityStatBuff(victim,"RES",9,"Short Shield",1)
					changeEntityStatBuff(victim,"SpecialAcceleration",10,"Short Shield",1)
			#Shield Session
			if {t_isCombatTagged.%victim%} is set:
				if getEntitySkillsInHand(victim,"Shield Session",2,1) is more than 0:
					changeEntityStatBuff(victim,"DEF",8,"Shield Session",1)
					changeEntityStatBuff(victim,"RES",8,"Shield Session",1)
					changeEntityStatBuff(victim,"LCK",8,"Shield Session",1)
			#Breath skills
			if victim's health is more than or equal to (victim's maximum health * 0.25):
				if getEntitySkillsInHand(victim,"Steady Breath",2,1) is more than 0:
					changeEntityStatBuff(victim,"DEF",6,"Steady Breath",1)
					changeEntityStatBuff(victim,"SpecialAcceleration",30,"Steady Breath",1)
				if getEntitySkillsInHand(victim,"Warding Breath",2,1) is more than 0:
					changeEntityStatBuff(victim,"RES",6,"Warding Breath",1)
					changeEntityStatBuff(victim,"SpecialAcceleration",30,"Warding Breath",1)
				if getEntitySkillsInHand(victim,"Darting Breath",2,1) is more than 0:
					changeEntityStatBuff(victim,"SPD",6,"Darting Breath",1)
					changeEntityStatBuff(victim,"SpecialAcceleration",30,"Darting Breath",1)
				if getEntitySkillsInHand(victim,"Fierce Breath",2,1) is more than 0:
					changeEntityStatBuff(victim,"STR",6,"Fierce Breath",1)
					changeEntityStatBuff(victim,"SpecialAcceleration",30,"Fierce Breath",1)
			#Hold the Line
			if victim's health is less than or equal to (victim's maximum health * 0.7):
				if getEntitySkillsInHand(victim,"Hold the Line",2,1) is more than 0:
					set damage to damage * 0.5
			#Tornado Blade post-combat buff
			if getEntitySacredTreasure(victim) is 6:
				changeEntityStatBuff(victim,"STR",7,"Tornado Blade",1)
				changeEntityStatBuff(victim,"SPD",7,"Tornado Blade",1)
			else if getEntitySacredTreasure(victim) is 11:
				changeEntityStatBuff(victim,"STR",7,"Tomahawk",1)
				changeEntityStatBuff(victim,"SPD",7,"Tomahawk",1)
			else if getEntitySacredTreasure(victim) is 20:
				changeEntityStatBuff(victim,"STR",7,"Javelin",1)
				changeEntityStatBuff(victim,"SPD",7,"Javelin",1)
			#Rex Hasta post-combat buff
			if {_rexHastaPostCombatBuff} is true:
				changeEntityStatBuff(attacker,"STR",7,"Rex Hasta",1)
				changeEntityStatBuff(attacker,"LCK",7,"Rex Hasta",1)	
			#arthur's dumb fucking axe effect
			if {_arthurAxeHitBuff} is true:
				changeEntityStatBuff(attacker,"DEF",7,"Arthur's Axe",1)
				changeEntityStatBuff(attacker,"RES",7,"Arthur's Axe",1)
			if {_arthurAxeDodgeBuff} is true:
				changeEntityStatBuff(victim,"STR",7,"Arthur's Axe",1)
				changeEntityStatBuff(victim,"SPD",7,"Arthur's Axe",1)
				changeEntityStatBuff(victim,"LCK",7,"Arthur's Axe",1)
			#Dagger native debuff effect
			if {_attackerHasDagger} is true:
				#dagtype 5 is Cutlaseer's throwing knives, which do not inflict dagger 7
				if {_DAGTYPE} is not 5:
					set {_debug} to changeEntityStatBuff(victim,"DEF",-7,"Dagger 7",1)
					set {_debug} to changeEntityStatBuff(victim,"RES",-7,"Dagger 7",1)		
			#Peshkatz
			if getEntitySacredTreasure(attacker) is 33:
				set {_debug} to changeEntityStatBuff(victim,"STR",-5,"Peshkatz",1)
				set {_debug} to changeEntityStatBuff(victim,"SPD",-5,"Peshkatz",1)
				loop all players in radius 15 of the attacker:
					if {party.%attacker%} is {party.%loop-player%}:
						if getEntityArrayValueByName(loop-player,"tempActiveBuffs.spd","Peshkatz") parsed as integer is not set:
							set {_debug} to changeEntityStatBuff(loop-entity,"DEF",5,"Peshkatz",1)
							set {_debug} to changeEntityStatBuff(loop-entity,"RES",5,"Peshkatz",1)
							set {_debug} to changeEntityStatBuff(loop-entity,"STR",5,"Peshkatz",1)
							set {_debug} to changeEntityStatBuff(loop-entity,"SPD",5,"Peshkatz",1)
							set {_debug} to changeEntityStatBuff(loop-entity,"LCK",5,"Peshkatz",1)
			#Smoke Dagger
			if getEntitySacredTreasure(attacker) is 34:
				set {_debug} to changeEntityStatBuff(victim,"DEF",-7,"Smoke Dagger",1)
				set {_debug} to changeEntityStatBuff(victim,"RES",-7,"Smoke Dagger",1)
				set {_debug} to changeEntityStatBuff(victim,"STR",-7,"Smoke Dagger",1)
				set {_debug} to changeEntityStatBuff(victim,"SPD",-7,"Smoke Dagger",1)
				set {_debug} to changeEntityStatBuff(victim,"LCK",-7,"Smoke Dagger",1)				
			#Poison Strike
			if getEntitySkillsInHand(attacker,"Poison Strike",0,2) is more than 0:
				set {_debug} to applyOOCStatusEffect(victim,"Poison",5)
				send formatted "<light red>POISONED! (5 sec)." to the victim
			#Flash and Clear (Perk)
			if checkSlots(attacker,"Flash and Clear") is 1:
				set {_odds} to floor((getEntityStatTotal(attacker,"LCK")) / 4)
				if {_odds} is more than 25:
					set {_odds} to 25
				chance of {_odds}%:
					set {_debug} to applyOOCStatusEffect(victim,"Planted Conc Grenade",3)
					send formatted "<orange>Planted a Conc. Grenade on the foe!" to the attacker
					send formatted "<light purple>Something strange was stuck to you..." to the victim
			#Boundless Stamina
			if checkSlots(attacker,"Boundless Stamina") is 1:
				if attacker is alive:
					heal the attacker by 3
					add 1 to the attacker's food bar
			#Boundless Stamina
			if checkSlots(victim,"Boundless Stamina") is 1:
				if victim is alive:
					heal the victim by 3
					add 1 to the victim's food bar
			#Smoke Skills
			#STR Smoke
			if getEntitySkillsInHand(attacker,"STR Smoke",0,3) is more than 0:
				loop all entities in radius 10 of the victim:
					if loop-entity is not the victim:
						if {party.%attacker%} is not {party.%loop-entity%}:
							if getEntityArrayValueByName(loop-entity,"tempActiveBuffs.str","STR Smoke") parsed as integer is not set:
								set {_debug} to changeEntityStatBuff(loop-entity,"STR",-7,"STR Smoke",1)
			#MAG Smoke
			else if getEntitySkillsInHand(attacker,"MAG Smoke",0,3) is more than 0:
				loop all entities in radius 10 of the victim:
					if loop-entity is not the victim:
						if {party.%attacker%} is not {party.%loop-entity%}:
							if getEntityArrayValueByName(loop-entity,"tempActiveBuffs.mag","MAG Smoke") parsed as integer is not set:
								set {_debug} to changeEntityStatBuff(loop-entity,"MAG",-7,"MAG Smoke",1)
			#SPD Smoke
			else if getEntitySkillsInHand(attacker,"SPD Smoke",0,3) is more than 0:
				loop all entities in radius 10 of the victim:
					if loop-entity is not the victim:
						if {party.%attacker%} is not {party.%loop-entity%}:
							if getEntityArrayValueByName(loop-entity,"tempActiveBuffs.spd","SPD Smoke") parsed as integer is not set:
								set {_debug} to changeEntityStatBuff(loop-entity,"SPD",-7,"SPD Smoke",1)
			#DEF Smoke
			else if getEntitySkillsInHand(attacker,"DEF Smoke",0,3) is more than 0:
				loop all entities in radius 10 of the victim:
					if loop-entity is not the victim:
						if {party.%attacker%} is not {party.%loop-entity%}:
							if getEntityArrayValueByName(loop-entity,"tempActiveBuffs.def","DEF Smoke") parsed as integer is not set:
								set {_debug} to changeEntityStatBuff(loop-entity,"DEF",-7,"DEF Smoke",1)
			#RES Smoke
			else if getEntitySkillsInHand(attacker,"RES Smoke",0,3) is more than 0:
				loop all entities in radius 10 of the victim:
					if loop-entity is not the victim:
						if {party.%attacker%} is not {party.%loop-entity%}:
							if getEntityArrayValueByName(loop-entity,"tempActiveBuffs.res","RES Smoke") parsed as integer is not set:
								set {_debug} to changeEntityStatBuff(loop-entity,"RES",-7,"RES Smoke",1)
			#Offense Smoke (Perk)
			if checkSlots(attacker,"Offense Smoke") is 1:
				loop all entities in radius 10 of the victim:
					if loop-entity is not the victim:
						if {party.%attacker%} is not {party.%loop-entity%}:
							if getEntityArrayValueByName(loop-entity,"tempActiveBuffs.str","Offense Smoke") parsed as integer is not set:
								set {_debug} to changeEntityStatBuff(loop-entity,"STR",-7,"Offense Smoke",1)
							if getEntityArrayValueByName(loop-entity,"tempActiveBuffs.spd","Offense Smoke") parsed as integer is not set:
								set {_debug} to changeEntityStatBuff(loop-entity,"SPD",-7,"Offense Smoke",1)
							if getEntityArrayValueByName(loop-entity,"tempActiveBuffs.mag","Offense") parsed as integer is not set:
								set {_debug} to changeEntityStatBuff(loop-entity,"MAG",-7,"Offense Smoke",1)
			#Rouse Skills
			#STR Rouse
			if getEntitySkillsInHand(attacker,"Rouse STR",0,3) is more than 0:
				loop all entities in radius 10 of the attacker:
					if loop-entity is not the victim:
						if loop-entity is not the attacker:
							if {party.%attacker%} is {party.%loop-entity%}:
								if getEntityArrayValueByName(loop-entity,"tempActiveBuffs.str","Rouse STR") parsed as integer is not set:
									set {_debug} to changeEntityStatBuff(loop-entity,"STR",6,"Rouse STR",1)
			#MAG Rouse
			if getEntitySkillsInHand(attacker,"Rouse MAG",0,3) is more than 0:
				loop all entities in radius 10 of the attacker:
					if loop-entity is not the victim:
						if loop-entity is not the attacker:
							if {party.%attacker%} is {party.%loop-entity%}:
								if getEntityArrayValueByName(loop-entity,"tempActiveBuffs.mag","Rouse MAG") parsed as integer is not set:
									set {_debug} to changeEntityStatBuff(loop-entity,"MAG",6,"Rouse MAG",1)
			#SPD Rouse
			if getEntitySkillsInHand(attacker,"Rouse SPD",0,3) is more than 0:
				loop all entities in radius 10 of the attacker:
					if loop-entity is not the victim:
						if loop-entity is not the attacker:
							if {party.%attacker%} is {party.%loop-entity%}:
								if getEntityArrayValueByName(loop-entity,"tempActiveBuffs.spd","Rouse SPD") parsed as integer is not set:
									set {_debug} to changeEntityStatBuff(loop-entity,"SPD",6,"Rouse SPD",1)
			#DEF Rouse
			if getEntitySkillsInHand(attacker,"Rouse DEF",0,3) is more than 0:
				loop all entities in radius 10 of the attacker:
					if loop-entity is not the victim:
						if loop-entity is not the attacker:
							if {party.%attacker%} is {party.%loop-entity%}:
								if getEntityArrayValueByName(loop-entity,"tempActiveBuffs.def","Rouse DEF") parsed as integer is not set:
									set {_debug} to changeEntityStatBuff(loop-entity,"DEF",6,"Rouse DEF",1)
			#RES Rouse
			if getEntitySkillsInHand(attacker,"Rouse RES",0,3) is more than 0:
				loop all entities in radius 10 of the attacker:
					if loop-entity is not the victim:
						if loop-entity is not the attacker:
							if {party.%attacker%} is {party.%loop-entity%}:
								if getEntityArrayValueByName(loop-entity,"tempActiveBuffs.res","Rouse RES") parsed as integer is not set:
									set {_debug} to changeEntityStatBuff(loop-entity,"RES",6,"Rouse RES",1)
			#Blaze Skills
			#Offence Blaze
			if getEntitySkillsInHand(attacker,"Offence Blaze",0,3) is more than 0:
				set {_debug} to changeEntityStatBuff(attacker,"STR",7,"Offence Blaze",1)
				set {_debug} to changeEntityStatBuff(attacker,"MAG",7,"Offence Blaze",1)
			#Defence Blaze
			if getEntitySkillsInHand(attacker,"Defence Blaze",0,3) is more than 0:
				set {_debug} to changeEntityStatBuff(attacker,"DEF",7,"Defence Blaze",1)
				set {_debug} to changeEntityStatBuff(attacker,"RES",7,"Defence Blaze",1)
			#Critical Blaze
			if getEntitySkillsInHand(attacker,"Critical Blaze",0,3) is more than 0:
				set {_debug} to changeEntityStatBuff(attacker,"SPD",7,"Critical Blaze",1)
				set {_debug} to changeEntityStatBuff(attacker,"LCK",7,"Critical Blaze",1)
			#Hit and Run (Perk)
			if checkSlots(attacker,"Hit and Run") is 1:
				apply swiftness 3 to the attacker for 2 seconds
				set {_debug} to changeEntityStatBuff(attacker,"SPD",5,"Hit and Run (Perk)",1)
			#Special Spiral
			if getEntitySkillsInHand(attacker,"Special Spiral",0,2) is more than 0:
				changeEntityStatBuff(attacker,"SpecialAcceleration",20,"Special Spiral",1)
			#Canto (Perk) (Base Effect)
			if checkSlots(attacker,"Canto") is 1:
				apply swiftness 5 to the attacker for 2 seconds
				apply resistance 5 to the attacker for 2 seconds
				loop all horses in radius 1 of the attacker:
					apply swiftness 5 to the loop-horse for 2 seconds
					apply resistance 5 to the loop-horse for 2 seconds
			#Scathing Blow (Perk) (Post-Combat Debuff)
			if checkSlots(attacker,"Scathing Blow") is 1:
				if attacker's health is attacker's maximum health:
					set {_debug} to changeEntityStatBuff(victim,"STR",-4,"Scathing Blow (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"MAG",-4,"Scathing Blow (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"DEF",-4,"Scathing Blow (Perk)",1)
					set {_debug} to changeEntityStatBuff(victim,"RES",-4,"Scathing Blow (Perk)",1)
			#Lockpicking ability steal behavior
			set {_odds} to (floor((getEntityArrayValueByName(attacker,"abilities","Lockpicking") parsed as integer) / 5)) - (getEntityArrayValueByName(victim,"abilities","Lockpicking") parsed as integer)
			if {_odds} is more than 10:
				set {_odds} to 10
			chance of {_odds}%:
				if victim's tool is not air:
					drop victim's tool at the victim
					remove 1 of victim's tool from victim's tool
					send formatted "<light red>%attacker% stole your weapon!" to the victim
					send formatted "<light green>Stole %victim%'s weapon via Lockpicking ability." to the attacker
			set {_odds} to (floor((getEntityArrayValueByName(attacker,"abilities","Lockpicking") parsed as integer) / 3.5)) - (getEntityArrayValueByName(victim,"abilities","Lockpicking") parsed as integer)
			if {_odds} is more than 12:
				set {_odds} to 12
			chance of {_odds}%:
				if victim's chestplate is not air:
					drop victim's chestplate at the victim
					remove 1 of victim's chestplate from victim's chestplate
					send formatted "<light red>%attacker% stole your chestplate!" to the victim
					send formatted "<light green>Stole %victim%'s chestplate via Lockpicking ability." to the attacker
			set {_odds} to (floor((getEntityArrayValueByName(attacker,"abilities","Lockpicking") parsed as integer) / 3.5)) - (getEntityArrayValueByName(victim,"abilities","Lockpicking") parsed as integer)
			if {_odds} is more than 12:
				set {_odds} to 12
			chance of {_odds}%:
				if victim's leggings is not air:
					drop victim's leggings at the victim
					remove 1 of victim's leggings from victim's leggings
					send formatted "<light red>%attacker% stole your leggings!" to the victim
					send formatted "<light green>Stole %victim%'s leggings via Lockpicking ability." to the attacker
			set {_odds} to (floor((getEntityArrayValueByName(attacker,"abilities","Lockpicking") parsed as integer) / 3)) - (getEntityArrayValueByName(victim,"abilities","Lockpicking") parsed as integer)
			if {_odds} is more than 15:
				set {_odds} to 15
			chance of {_odds}%:
				if victim's helmet is not air:
					drop victim's helmet at the victim
					remove 1 of victim's helmet from victim's helmet
					send formatted "<light red>%attacker% stole your helmet!" to the victim
					send formatted "<light green>Stole %victim%'s helmet via Lockpicking ability." to the attacker
			set {_odds} to (floor((getEntityArrayValueByName(attacker,"abilities","Lockpicking") parsed as integer) / 3)) - (getEntityArrayValueByName(victim,"abilities","Lockpicking") parsed as integer)
			if {_odds} is more than 15:
				set {_odds} to 15
			chance of {_odds}%:
				if victim's boots is not air:
					drop victim's boots at the victim
					remove 1 of victim's boots from victim's boots
					send formatted "<light red>%attacker% stole your boots!" to the victim
					send formatted "<light green>Stole %victim%'s boots via Lockpicking ability." to the attacker
			#Apply Combat Tags
			#Monster Whitelist (do not apply combat tags if they are involved in combat)
			if victim is cow:
				set {_blockCT} to true
			else if victim is sheep:
				set {_blockCT} to true
			else if victim is pig:
				set {_blockCT} to true
			else if victim is bat:
				set {_blockCT} to true
			else if victim is villager:
				set {_blockCT} to true
			else if victim is wolf:
				set {_blockCT} to true
			else if victim is ocelot:
				set {_blockCT} to true
			else if attacker's gamemode is creative:
				set {_blockCT} to true
			if {_blockCT} is not set:
				if event is not cancelled:
					#Victim combat tags
					if victim is alive:
						set {t_isCombatTagged.%victim%} to 5
						if {traits.%victim%::Honorable} is set:
							set {t_isCombatTagged.%victim%} to {t_isCombatTagged.%victim%} * 1.5
						if {traits.%attacker%::Honorable} is set:
							set {t_isCombatTagged.%victim%} to {t_isCombatTagged.%victim%} * 1.5
						if {traits.%attacker%::Good Natured} is set:
							set {t_isCombatTagged.%victim%} to {t_isCombatTagged.%victim%} * 0.5
						if {traits.%victim%::Good Natured} is set:
							set {t_isCombatTagged.%victim%} to {t_isCombatTagged.%victim%} * 0.5
					#Attacker combat tags
					if attacker is alive:
						set {t_isCombatTagged.%attacker%} to 5
						if {traits.%victim%::Honorable} is set:
							set {t_isCombatTagged.%attacker%} to {t_isCombatTagged.%attacker%} * 1.5
						if {traits.%attacker%::Honorable} is set:
							set {t_isCombatTagged.%attacker%} to {t_isCombatTagged.%attacker%} * 1.5
						if {traits.%attacker%::Good Natured} is set:
							set {t_isCombatTagged.%attacker%} to {t_isCombatTagged.%attacker%} * 0.5
						if {traits.%victim%::Good Natured} is set:
							set {t_isCombatTagged.%attacker%} to {t_isCombatTagged.%attacker%} * 0.5
			#Spell after-combat behavior
			if {_spelleffect1} is set:
				#Steadfast Casting (Perk)
				if checkSlots(attacker,"Steadfast Casting") is 1:
					if {buffsActive.mag.%attacker%::Steadfast Casting (Perk)} is less than 25:
						set {_debug} to changeEntityStatBuff(attacker,"MAG",5,"Steadfast Casting (Perk)",0)
				#More than Magic (Perk) (Sets up the weapon switch window)
				if checkSlots(attacker,"More than Magic") is 1:
					if getEntityWeaponType(attacker) is 1:
						set {t_MoreThanMagicWeaponSwitchWindow.%attacker%} to 2
				#Spell Cooldown calculations
				set {spellcooldown.%attacker%} to 1
				if checkSlots(attacker,"Focused Magic") is 1:
					set {_spellRecoil} to {_spellRecoil} / 2
				if checkSlots(attacker,"Magical Specialist") is 1:
					set {_spellRecoil} to {_spellRecoil} / 2
				if checkSlots(attacker,"Ancient Knowledge") is 1:
					set {_EK} to true
				if {_spellRecoil} is less than 0:
					set {_spellRecoil} to 0
				if getEntityWeaponClass(attacker's tool) is "Tomes":
					set {_spellRecoil} to ({_spellRecoil} / 2)
				set {_recoil2} to {_spellRecoil}
				if {_EK} is true:
					if attacker's health - {_spellRecoil} is less than or equal to 0:
						set attacker's health to 0.5
					else:
						applyRecoilDamage(attacker,{_spellRecoil})
					clear {spellCooldown.%attacker%}
				else:
					set {spellcooldown.%attacker%} to {_recoil2}
			
#Toggle Battle Forecast	
command /bf:
	trigger:
		send formatted "<gold>Dismissed the Battle Forecast."
		wipe the player's sidebar
		
#Projectile Collision
on projectile hit:
	#Gun Behavior
	if metadata value "gunType" of the projectile is set:
		#Rocket Launchers create explosions
		if metadata value "gunType" of the projectile is "8":
			set {t_AllowRocketJump.%shooter%} to true
			#Enable Rocket Jumping for a few ticks
			create safe explosion of force 1.5 at the projectile
			wait 5 ticks
			delete the projectile
			clear {t_AllowRocketJump.%shooter%}
		else if metadata value "gunType" of the projectile is "11":
			wait 5 ticks
			create safe explosion of force 1 at the projectile
			delete the projectile
		else:
			if {displayBulletHitArea.%shooter%} is true:
				wait 5 ticks
				set {_bulletLoc} to projectile's location
				delete the projectile
				loop 20 times:
					play (firework spark with speed 0) at {_bulletLoc}
					wait 5 tick
			else:
				wait 5 tick
				delete the projectile
	else if metadata value "SUPERSHOTGUN" of the projectile is set:
		wait 5 tick
		delete the projectile
	else if metadata value "JavType" of the projectile is set:
		wait 5 tick
		delete the projectile
	else if metadata value "DaggerType" of the projectile is set:
		wait 5 tick
		delete the projectile
	else if metadata value "isSummonedSword" of the projectile is set:
		wait 5 tick
		play 10 (cyan wool break with speed 1) at the projectile
		delete the projectile
	#Frag Grenade detonation
	else if metadata value "GrenadeType" of the projectile is 0:
		set {_loc} to event-location
		create safe explosion of force 5 at the event-location
		play 10 (smoke with speed 1) at {_loc}
		play 10 (lava pop with speed 1) at {_loc}
	#Conc Grenade Detonation
	else if metadata value "GrenadeType" of the projectile is 1:
		set {_loc} to event-location
		create safe explosion of force 1 at {_loc}
		play 15 (gold block break with speed 1) at {_loc}
		play 10 (smoke with speed 1) at {_loc}
		loop all entities in radius 15 of {_loc}:
			apply blindness 1 to loop-entity for 8 seconds
			apply slowness 3 to loop-entity for 10 seconds
			apply weakness 3 to loop-entity for 10 seconds
	#Smoke grenade detonation
	else if metadata value "GrenadeType" of the projectile is 2:
		set {_loc} to event-location
		create safe explosion of force 0.5 at {_loc}
		play 15 (iron block break with speed 1) at {_loc}
		play 10 (smoke with speed 1) at {_loc}
		wait 0.15 seconds
		loop 50 times:
			play 10 (white wool break with speed 1) at {_loc}
			play 10 (obsidian break with speed 1) at {_loc}
			loop all blocks in radius 6 of {_loc}:
				if loop-block is air:
					play 10 (white wool break with speed 1) at loop-block
					play 10 (obsidian break with speed 1) at loop-block
			loop all players in radius 7 of {_loc}:
				apply blindness 1 to loop-entity for 1 second
				apply slowness 1 to loop-entity for 1 second
				apply weakness 1 to loop-entity for 1 second
			wait 10 ticks
			play sound "entity.tnt.primed" with volume 0.5 and pitch 1 at {_loc}
	#Fujin Yumi Teleportation
	if nbt of shooter's tool contains "sacredTreasureID:24":
		if shooter is sneaking:
			play 10 (white wool break with speed 1) at the projectile
			play 10 (redstone block break with speed 1) at the projectile
			teleport the shooter to the projectile
			play 10 (white wool break with speed 1) at the projectile
			play 10 (redstone block break with speed 1) at the projectile

#Show bullet collision spots
command /toggleBulletHitDisplay:
	trigger:
		if {displayBulletHitArea.%player%} is not set:
			set {displayBulletHitArea.%player%} to true
			send "<light green>Now displaying bullet hit areas."
		else:
			clear {displayBulletHitArea.%player%}
			send "<light red>No longer displaying bullet hit areas."

on right click on an entity:
	#Shield Parry
	if player is blocking:
		if {t_canShieldParry.%player%} is not false:
			set {t_canShieldParry.%player%} to true
			wait 0.4 seconds
			if {t_canShieldParry.%player%} is set:
				set {t_canShieldParry.%player%} to false
				wait 0.4 seconds
				clear {t_canShieldParry.%player%}
	#Targeted Assist Skills
	#Swap
	if getEntitySkillsInHand(player,"Swap",0,4) is more than 0:
		set {_loc} to player's location
		apply resistance 5 to the player
		teleport the player to the target
		teleport the target to {_loc}
		if checkSlots(player,"Rough Shove") is 1:
			if {party.%player%} is not {party.%target%}:
				chance of 50%:
					drop the target's tool at the target
					set the target's tool to air
					send formatted "<light red>Disarmed by %player%'s Rough Shove!" to the target
					send formatted "<light green>Disarmed %target% via Rough Shove!" to the player
	#Shove
	else if getEntitySkillsInHand(player,"Shove",0,4) is more than 0:
		push the target upwards at speed 1
		push the target in horizontal direction of the player at speed 1
		if checkSlots(player,"Rough Shove") is 1:
			if {party.%player%} is not {party.%target%}:
				chance of 50%:
					drop the target's tool at the target
					set the target's tool to air
					send formatted "<light red>Disarmed by %player%'s Rough Shove!" to the target
					send formatted "<light green>Disarmed %target% via Rough Shove!" to the player
	#Smite
	else if getEntitySkillsInHand(player,"Smite",0,4) is more than 0:
		push the target upwards at speed 0.1
		push the target in horizontal direction of the player at speed 2
		if checkSlots(player,"Rough Shove") is 1:
			if {party.%player%} is not {party.%target%}:
				chance of 50%:
					drop the target's tool at the target
					set the target's tool to air
					send formatted "<light red>Disarmed by %player%'s Rough Shove!" to the target
					send formatted "<light green>Disarmed %target% via Rough Shove!" to the player
	#Liftoff
	else if getEntitySkillsInHand(player,"Liftoff",0,4) is more than 0:
		push the target upwards at speed 1.2
		if player is sneaking:
			push the player upwards at speed 1.15
		if checkSlots(player,"Rough Shove") is 1:
			if {party.%player%} is not {party.%target%}:
				chance of 50%:
					drop the target's tool at the target
					set the target's tool to air
					send formatted "<light red>Disarmed by %player%'s Rough Shove!" to the target
					send formatted "<light green>Disarmed %target% via Rough Shove!" to the player
	#Draw Back
	else if getEntitySkillsInHand(player,"Draw Back",0,4) is more than 0:
		apply resistance 5 to the player for 2 second
		push the target upwards at speed 0.1
		push the target in horizontal direction of the player at speed -1.5
		push the player upwards at speed 0.1
		push the player in horizontal direction of the player at speed -1.5
		if checkSlots(player,"Rough Shove") is 1:
			if {party.%player%} is not {party.%target%}:
				chance of 50%:
					drop the target's tool at the target
					set the target's tool to air
					send formatted "<light red>Disarmed by %player%'s Rough Shove!" to the target
					send formatted "<light green>Disarmed %target% via Rough Shove!" to the player
	#Pivot
	else if getEntitySkillsInHand(player,"Pivot",0,4) is more than 0:
		teleport the player to the target
		apply resistance 5 to the player for 2 second
		push the player in horizontal direction of the player at speed 0.75
		if checkSlots(player,"Rough Shove") is 1:
			if {party.%player%} is not {party.%target%}:
				chance of 50%:
					drop the target's tool at the target
					set the target's tool to air
					send formatted "<light red>Disarmed by %player%'s Rough Shove!" to the target
					send formatted "<light green>Disarmed %target% via Rough Shove!" to the player
	#Reposition
	else if getEntitySkillsInHand(player,"Reposition",0,4) is more than 0:
		teleport the target to the player
		apply resistance 5 to the player for 2 second
		push the target in horizontal direction of the player at speed -0.75
		if checkSlots(player,"Rough Shove") is 1:
			if {party.%player%} is not {party.%target%}:
				chance of 50%:
					drop the target's tool at the target
					set the target's tool to air
					send formatted "<light red>Disarmed by %player%'s Rough Shove!" to the target
					send formatted "<light green>Disarmed %target% via Rough Shove!" to the player
	#Power Bash
	else if getEntitySkillsInHand(player,"Power Bash",0,4) is more than 0:
		push the target upwards at speed 1
		push the target backwards at speed 2
		apply strength 3 to the player for 2 seconds
		make the player damage the target by 7
		wait 2 ticks
		apply weakness 4 to the player for 3 seconds
		if checkSlots(player,"Rough Shove") is 1:
			if {party.%player%} is not {party.%target%}:
				chance of 50%:
					drop the target's tool at the target
					set the target's tool to air
					send formatted "<light red>Disarmed by %player%'s Rough Shove!" to the target
					send formatted "<light green>Disarmed %target% via Rough Shove!" to the player
	#Finisher Plus
	else if getEntitySkillsInHand(player,"Finisher Plus",0,4) is more than 0:
		set {t_comboBuildup.%player%} to 1
		make the player damage the target by 9
	#Rally Attack
	else if getEntitySkillsInHand(player,"Rally Attack",0,4) is more than 0:
		remove strength from the target
		apply strength 3 to the target for 60 seconds
		if checkSlots(player,"Rally Up!") is 1:
			loop all players in radius 30 of the player:
				if {party.%loop-player%} is {party.%player%}:
					apply strength 3 to the loop-player for 60 seconds
	#Rally Swiftness
	else if getEntitySkillsInHand(player,"Rally Swiftness",0,4) is more than 0:
		remove swiftness from the target
		apply swiftness 3 to the target for 60 seconds
		if checkSlots(player,"Rally Up!") is 1:
			loop all players in radius 30 of the player:
				if {party.%loop-player%} is {party.%player%}:
					apply swiftness 3 to the loop-player for 60 seconds
	#Rally Resistance
	else if getEntitySkillsInHand(player,"Rally Resistance",0,4) is more than 0:
		remove resistance from the target
		apply resistance 3 to the target for 60 seconds
		if checkSlots(player,"Rally Up!") is 1:
			loop all players in radius 30 of the player:
				if {party.%loop-player%} is {party.%player%}:
					apply resistance 3 to the loop-player for 60 seconds
	#Fortify Health
	else if getEntitySkillsInHand(player,"Fortify Health",0,4) is more than 0:
		remove absorption from the target
		apply absorption 3 to the target for 60 seconds
		if checkSlots(player,"Rally Up!") is 1:
			loop all players in radius 30 of the player:
				if {party.%loop-player%} is {party.%player%}:
					apply resistance 3 to the loop-player for 60 seconds
	#Ardent Sacrifice
	else if getEntitySkillsInHand(player,"Ardent Sacrifice",0,4) is more than 0:
		if target's health is not target's maximum health:
			if player's health is more than 6:
				damage the player by 3 hearts
				heal the target by 3 hearts
				if checkSlots(player,"Rally Up!") is 1:
					loop all players in radius 30 of the player:
						if {party.%loop-player%} is {party.%player%}:
							if loop-player is not the player:
								if loop-player is not the target:
									heal the loop-player by 3 hearts
			else:
				send "<light red>Not enough health to use Ardent Sacrifice!" to the player
		else:
			send "<light red>Ardent Sacrifice would have no effect on this target." to the player
	#Healing Hands
	else if getEntitySkillsInHand(player,"Healing Hands",0,4) is more than 0:
		if target's health is not target's maximum health:
			if {t_healingHandsCooldown.%player%} is not set:
				set {_healingFactor} to floor(((getEntityStatTotal(player,"MAG")) + (getEntityStatTotal(player,"RES"))) * 0.1)
				if {_healingFactor} is more than 20:
					set {_healingFactor} to 20
				heal the player by {_healingFactor}
				set {t_healingHandsCooldown.%player%} to ({_healingFactor} * 0.5)
				loop {t_healingHandsCooldown.%player%} times:
					wait 1 second
				clear {t_healingHandsCooldown.%player%}
				if checkSlots(player,"Rally Up!") is 1:
					loop all players in radius 30 of the player:
						if {party.%loop-player%} is {party.%player%}:
							if loop-player is not the player:
								if loop-player is not the target:
									heal the loop-player by {_healingFactor} hearts
			else:
				send "<light red>Healing Hands is still on cooldown!" to the player
		else:
			send "<light red>Healing Hands would have no effect on this target." to the player
	#Perform (Perk)
	if checkSlots(player,"Perform") is 1:
		if player does not have weakness:
			if player does not have slowness:
				apply swiftness 4 to the target for 20 seconds
				apply strength 4 to the target for 20 seconds
				play sound "entity.villager.yes" with volume 1 and pitch 1 at the player
				play sound "block.anvil.place" with volume 0.5 and pitch 1.5 at the player
				apply weakness 2 to the player for 10 seconds
				apply slowness 2 to the player for 10 seconds
				if checkSlots(player,"Firestorm Song") is 1:
					play mob spawner flames at the target
					play mob spawner flames at the player
					set {_debug} to changeEntityStatBuff(player,"STR",6,"Firestorm Song (Perk)",1)
					set {_debug} to changeEntityStatBuff(player,"MAG",6,"Firestorm Song (Perk)",1)
					set {_debug} to changeEntityStatBuff(player,"SPD",6,"Firestorm Song (Perk)",1)
					heal the player by 5
					set {_debug} to changeEntityStatBuff(target,"STR",6,"Firestorm Song (Perk)",1)
					set {_debug} to changeEntityStatBuff(target,"MAG",6,"Firestorm Song (Perk)",1)
					set {_debug} to changeEntityStatBuff(target,"SPD",6,"Firestorm Song (Perk)",1)
					heal the target by 5
	#Buster Perk
	else if checkSlots(player,"Buster") is 1:
		if isEntityToolAir(player) is true:
			if {t_isInBuster.%player%} is not set:
				set {t_isInBuster.%player%} to true
				set {tangibilityState.%player%} to "GenericInvulnerable"
				#Buster "animation"
				create safe explosion of force 1 at the target
				play 20 (cyan wool break with speed 1) at the target
				wait 5 ticks
				push the target upwards at speed 0.75
				push the player upwards at speed 0.75
				apply levitation 1 to the player for 2 seconds
				apply levitation 1 to the target for 2 seconds
				wait 2 seconds
				push the target downwards at speed 3
				wait 5 ticks
				make player damage the target by 60
				wait 10 ticks
				clear {t_isInBuster.%player%}
				
	#Morale Boost
	if {t_morale.%target%} is less than 0:
		if target is a player:
			set {t_morale.%target%} to 0
			send formatted "<orange>%player% helped normalize your morale." to the target
			if checkSlots(player,"Helping Hand") is 1:
				heal the player by (player's maximum health * 0.5)
				heal the target by (target's maximum health * 0.5)
				apply regeneration 3 to the target for 10 seconds
				apply regeneration 3 to the player for 10 seconds
				apply resistance 3 to the target for 10 seconds
				apply resistance 3 to the player for 10 seconds
	#Bleedout revive
	if {bleedoutState.%target%} is 1:
		clear {bleedoutState.%target%}
		send formatted "<light blue>You saved %target% from death." to the player
		remove slowness from the target
		remove weakness from the target
		remove resistance from the target
		remove blindness from the target
		clear {tangibilityState.%target%}
		clear {laststandState.%target%}
		loop all monsters in radius 10 of the target:
			push the loop-monster backwards at speed 1
			push the loop-monster upwards at speed 1
		if checkSlots(player,"Helping Hand") is 1:
			heal the player by (player's maximum health * 0.5)
			heal the target by (target's maximum health * 0.5)
			apply regeneration 3 to the target for 10 seconds
			apply regeneration 3 to the player for 10 seconds
			apply resistance 3 to the target for 10 seconds
			apply resistance 3 to the player for 10 seconds

#Grenade throwing behavior
on shoot:
	#Broad Shot
	if getEntitySkillsInHand(shooter,"Broad Shot",2,1) is more than 0:
		if {t_BroadShot.%shooter%} is not set:
			set {t_BroadShot.%shooter%} to 0
			loop 4 times:
				if shooter has 2 arrows:
					add 1 to {t_BroadShot.%shooter%}
					remove 1 arrow from the shooter
					make the shooter shoot an arrow at speed 2.75
					if {_xRNG} is not set:
						set {_xRNG} to a random number from -0.3 to 0.3
						push the last shot projectile right at speed {_xRNG}
					else:
						set {_xRNG} to {_xRNG} * -1
						push the last shot projectile right at speed {_xRNG}
						clear {_xRNG}
			remove 1 arrow from the shooter
	if {t_BroadShot.%shooter%} is set:
		subtract 1 from {t_BroadShot.%shooter%}
		if {t_BroadShot.%shooter%} is less than or equal to 0:
			clear {t_BroadShot.%shooter%}
	#Frag Grenade (throwing)
	if the nbt of shooter's tool contains "GrenadeType:0":
		set metadata "GrenadeType" of the projectile to 0
		push the projectile up at speed 1
		push the projectile in horizontal direction of the projectile at speed 1
	#Conc grenade (throwing)
	else if the nbt of shooter's tool contains "GrenadeType:1":
		set metadata "GrenadeType" of the projectile to 1
		push the projectile up at speed 1
		push the projectile in horizontal direction of the projectile at speed 1
	#Smoke grenade (throwing)
	else if the nbt of shooter's tool contains "GrenadeType:2":
		push the projectile up at speed 1
		push the projectile in horizontal direction of the projectile at speed 1
		set metadata "GrenadeType" of the projectile to 2

on left click:
	#Embedded Swords Perk
	if checkSlots(player,"Embedded Swords") is 1:
		if isEntityToolAir(player) is true:
			if {t_embeddedSwordTarget.%player%} is set:
				if player is not sneaking:
					set {tangibilityState.%player%} to "GenericInvulnerable"
					set {_loc} to {t_embeddedSwordTarget.%player%}'s location
					push {t_embeddedSwordTarget.%player%} in horizontal direction of {t_embeddedSwordTarget.%player%} at speed -1
					teleport the player to {_loc}
					clear {tangibilityState.%player%}
				else:
					set {tangibilityState.%player%} to "GenericInvulnerable"
					set {_loc} to player's location
					push the player in horizontal direction of the player at speed -1
					teleport {t_embeddedSwordTarget.%player%} to {_loc}
					clear {tangibilityState.%player%}

function executeJudgementCut(ENT: entity,JCE: number):
	set {disableJudgementCut.%{_ENT}%} to true
	add 1 to {consecutiveJudgementCuts.%{_ENT}%}
	if {_JCE} is 0:
		play sound "entity.player.attack.sweep" with volume 1 and pitch 1 at {_ENT}
		loop all monsters in radius 8 of {_ENT}:
			make {_ENT} damage loop-monster by (((getEntityStatTotal({_ENT},"STR")) / 2) - ((getEntityStatTotal(loop-monster,"DEF")) / 2))
			play 10 (lapis block break with speed 1) at loop-monster
			play large explosion at the loop-entity
			exit 1 loop
	else:
		play sound "entity.generic.explode" with volume 0.7 and pitch 0.5 at {_ENT}
		play sound "entity.player.attack.sweep" with volume 1 and pitch 1 at {_ENT}
		loop all monsters in radius 15 of {_ENT}:
			make {_ENT} damage loop-monster by ((((getEntityStatTotal({_ENT},"STR")) / 2) - ((getEntityStatTotal(loop-monster,"DEF")) / 2)) * 1.25)
			play large explosion at the loop-entity
			play 10 (lapis block break with speed 1) at loop-monster
			play sound "entity.player.attack.sweep" with volume 1 and pitch 1 at loop-monster
		play sound "block.end_portal.spawn" with volume 1 and pitch 1 at {_ENT}
			

on right click:
	#Stinger
	if getEntitySkillsInHand(player,"Stinger",0,4) is more than 0:
		if {t_stingerDashCooldown.%player%} is not set:
			cancel event
			set {t_stingerDashCooldown.%player%} to true
			play 10 (smoke with speed 0) at player
			play 10 (red wool break with speed 1) at player
			play sound "entity.blaze.shoot" with volume 1 and pitch 1 at player
			push the player upwards at speed 0.1
			push the player forwards at speed 1.35
			wait 1.5 seconds
			clear {t_stingerDashCooldown.%player%}
			send "<light green>Stinger ready!" to the player
	#Magic Wall
	else if getEntitySkillsInHand(player,"Magic Wall",0,4) is more than 0:
		if {t_magicWallCooldown.%player%} is not set:
			set {t_magicWallCooldown.%player%} to true
			set {t_magicWallDamageReduction.%player%} to 1 - ((((getEntityStatTotal(player,"RES")) +(getEntityStatTotal(player,"MAG"))) * 0.5) / 100)
			if {t_magicWallDamageReduction.%player%} is less than 0.5:
				set {t_magicWallDamageReduction.%player%} to 0.5
			buffSFX(player)
			loop 30 times:
				play 10 diamond block break with speed 1 at the player
				play 10 firework spark with speed 0 at the player
				wait 0.5 seconds
			clear {t_magicWallDamageReduction.%player%}
			send formatted "<light red>Your Magic Wall dissipated!" to the player
			wait 20 seconds
			play sound "entity.experience_orb.pickup" with volume 1.2 and pitch 1 at the player
			send "<orange>Magic Wall is now ready." to the player
			clear {t_magicWallCooldown.%player%}
	#Fast Healing
	else if getEntitySkillsInHand(player,"Fast Healing",0,4) is more than 0:
		if player's health is not player's maximum health:
			if {t_fastHealingCooldown.%player%} is not set:
				set {_healingFactor} to floor(((getEntityStatTotal(player,"MAG")) + (getEntityStatTotal(player,"RES"))) * 0.1)
				if {_healingFactor} is more than 20:
					set {_healingFactor} to 20
				heal the player by {_healingFactor}
				set {t_fastHealingCooldown.%player%} to {_healingFactor}
				loop {t_fastHealingCooldown.%player%} times:
					wait 1 second
				clear {t_fastHealingCooldown.%player%}
				send formatted "<light blue>Fast Healing can be used again." to the player
			else:
				send formatted "<light red>Fast Healing is still recharging!" to the player
		else:
			send formatted "<light red>Fast Healing would have no effect!" to the player
	#Bolster ATK/SPD
	else if getEntitySkillsInHand(player,"Bolster ATK/SPD",0,4) is more than 0:
		if {t_bolsterATKSPDCooldown.%player%::*} is not set:
			set {_buffFactor} to floor(((getEntityStatTotal(player,"MAG")) + (getEntityStatTotal(player,"RES"))) * 0.2)
			if {_buffFactor} is more than 15:
				set {_buffFactor} to 15
			loop all players in radius 30 of the player:
				if {party.%loop-player%} is {party.%player%}:
					set {_debug} to changeEntityStatBuff(loop-player,"STR",{_buffFactor},"Bolster ATK/SPD",0)
					set {_debug} to changeEntityStatBuff(loop-player,"MAG",{_buffFactor},"Bolster ATK/SPD",0)
					set {_debug} to changeEntityStatBuff(loop-player,"SPD",{_buffFactor},"Bolster ATK/SPD",0)
					add loop-player to {t_bolsterATKSPDCooldown.%player%::*}
			wait 40 seconds
			set {_buffFactor} to {_buffFactor} * -1
			loop {t_bolsterATKSPDCooldown.%player%::*}:
				set {_debug} to changeEntityStatBuff(loop-value,"STR",{_buffFactor},"Bolster ATK/SPD",0)
				set {_debug} to changeEntityStatBuff(loop-value,"MAG",{_buffFactor},"Bolster ATK/SPD",0)
				set {_debug} to changeEntityStatBuff(loop-value,"SPD",{_buffFactor},"Bolster ATK/SPD",0)
			clear {t_bolsterATKSPDCooldown.%player%::*}
	#Bolster DEF/RES
	else if getEntitySkillsInHand(player,"Bolster DEF/RES",0,4) is more than 0:
		if {t_bolsterDEFRESCooldown.%player%::*} is not set:
			set {_buffFactor} to floor(((getEntityStatTotal(player,"MAG")) + (getEntityStatTotal(player,"RES"))) * 0.2)
			if {_buffFactor} is more than 15:
				set {_buffFactor} to 15
			loop all players in radius 30 of the player:
				if {party.%loop-player%} is {party.%player%}:
					set {_debug} to changeEntityStatBuff(loop-player,"DEF",{_buffFactor},"Bolster DEF/RES",0)
					set {_debug} to changeEntityStatBuff(loop-player,"RES",{_buffFactor},"Bolster DEF/RES",0)
					set {_debug} to changeEntityStatBuff(loop-player,"LCK",{_buffFactor},"Bolster DEF/RES",0)
					add loop-player to {t_bolsterDEFRESCooldown.%player%::*}
			wait 40 seconds
			loop {t_bolsterDEFRESCooldown.%player%::*}:
				set {_debug} to changeEntityStatBuff(loop-value,"DEF",{_buffFactor},"Bolster DEF/RES",0)
				set {_debug} to changeEntityStatBuff(loop-value,"RES",{_buffFactor},"Bolster DEF/RES",0)
				set {_debug} to changeEntityStatBuff(loop-value,"LCK",{_buffFactor},"Bolster DEF/RES",0)
			clear {t_bolsterDEFRESCooldown.%player%::*}
	#Bind ATK
	else if getEntitySkillsInHand(player,"Bind ATK",0,4) is more than 0:
		if {t_bindCooldown.%player%} is not set:
			set {t_bindCooldown.%player%} to true
			buffSFX(player)
			loop all monsters in radius 20 of the player:
				if getEntityStatTotal(player,"RES") is more than or equal to ((getEntityStatTotal(loop-monster,"RES")) - 3):
					set {_debug} to changeEntityStatBuff(loop-monster,"STR",-8,"Bind ATK",1)
					set {_debug} to changeEntityStatBuff(loop-monster,"MAG",-8,"Bind ATK",1)
					play 20 (lapis block break with speed 1) at the loop-monster
			wait 5 seconds
			clear {t_bindCooldown.%player%}
	#Bind DEF/RES
	else if getEntitySkillsInHand(player,"Bind DEF/RES",0,4) is more than 0:
		if {t_bindCooldown.%player%} is not set:
			set {t_bindCooldown.%player%} to true
			buffSFX(player)
			loop all monsters in radius 20 of the player:
				if getEntityStatTotal(player,"RES") is more than or equal to ((getEntityStatTotal(loop-monster,"RES")) - 3):
					set {_debug} to changeEntityStatBuff(loop-monster,"DEF",-8,"Bind DEF/RES",1)
					set {_debug} to changeEntityStatBuff(loop-monster,"RES",-8,"Bind DEF/RES",1)
					play 20 (lapis block break with speed 1) at the loop-monster
			wait 5 seconds
			clear {t_bindCooldown.%player%}
	#Bind SPD
	else if getEntitySkillsInHand(player,"Bind SPD",0,4) is more than 0:
		if {t_bindCooldown.%player%} is not set:
			set {t_bindCooldown.%player%} to true
			buffSFX(player)
			loop all monsters in radius 20 of the player:
				if getEntityStatTotal(player,"RES") is more than or equal to ((getEntityStatTotal(loop-monster,"RES")) - 3):
					set {_debug} to changeEntityStatBuff(loop-monster,"SPD",-12,"Bind SPD",1)
					set {_debug} to changeEntityStatBuff(loop-monster,"LCK",-12,"Bind SPD",1)
					apply slowness 2 to loop-monster for 5 seconds
					play 20 (lapis block break with speed 1) at the loop-monster
			wait 5 seconds
			clear {t_bindCooldown.%player%}
	#Summoned Swords perk
	else if checkSlots(player,"Summoned Swords") is 1:
		if player's tool is not air:
			if {t_summonedSwordsDelay.%player%} is not set:
				make the player shoot an arrow at speed 2
				set metadata value "isSummonedSword" of the last shot projectile to 1
				set {t_summonedSwordsDelay.%player%} to 10
				wait 10 ticks
				clear {t_summonedSwordsDelay.%player%}
	#Snatch Perk
	else if checkSlots(player,"Snatch") is 1:
		if player's tool is not air:
			if nbt of player's tool does not contain "FirearmType:":
				if player's tool is not any shovel:
					if the 4th line of the lore of the player's tool does not contain "<light green><bold>Assist":
						if {t_snatchDelay.%player%} is not set:
							make the player shoot an arrow at speed 3
							set metadata value "isSnatchProjectile" of the last shot projectile to 1
							set {t_snatchDelay.%player%} to 15
							wait 15 ticks
							clear {t_snatchDelay.%player%}
	#Monado - Monado Arts
	#Open Arts Wheel
	if the nbt of player's tool contains "SacredTreasureID:40":
		if {monadoArtsGauge.%player%} is 100:
			savePlayerHotbar(player,"monadoHotbarSave",1)
			set slot 0 of the player to 1 purple wool named "<light purple>Monado Enchant" with lore "<white>Grants STR/MAG +10 to party for 10 seconds."
			set slot 1 of the player to 1 red wool named "<light red>Monado Buster" with lore "<white>Grants STR/MAG +20 through your next action."
			set slot 2 of the player to 1 blue wool named "<light blue>Monado Speed" with lore "<white>Grants SPD/LCK +10 to party for 10 seconds."
			set slot 3 of the player to 1 yellow wool named "<light yellow>Monado Shield" with lore "<white>Grants DEF/RES +10 to party for 10 seconds."
			set slot 4 of the player to 1 green wool named "<light green>Monado Eater" with lore "<white>Inflicts STR/MAG/DEF/RES -10 on foes within 10 blocks through next action."
			set slot 8 of the player to 1 barrier named "<white>Cancel Monado Arts" with lore "<white>Exit the Monado Arts menu without casting an Art."
	#Monado - Art Activation
	else if the name of player's tool contains "Monado":
		set {monadoArtsGauge.%player%} to 0
		set bossbar "monadogauge.%player's uuid%" progress to 0
		if the name of the player's tool is "<light purple>Monado Enchant":
			loop all players in radius 30 of the player:
				if {party.%loop-player%} is {party.%player%}:
					set {_debug} to changeEntityStatBuff(loop-player,"STR",10,"Monado Enchant",0)
					set {_debug} to changeEntityStatBuff(loop-player,"MAG",10,"Monado Enchant",0)
					send formatted "<gold>%player% has cast Monado Enchant. STR/MAG +10 for 10 seconds." to loop-player
					add loop-player to {t_monadoBuffCooldown.%player%::*}
			play sound "entity.zombie_villager.cure" with volume 1 and pitch 1 at the player
			loadPlayerHotbar(player,"monadoHotbarSave")
			wait 10 seconds
			loop {t_monadoBuffCooldown.%player%::*}:
				set {_debug} to changeEntityStatBuff(loop-value,"STR",-10,"Monado Enchant",0)
				set {_debug} to changeEntityStatBuff(loop-value,"MAG",-10,"Monado Enchant",0)
			clear {t_monadoBuffCooldown.%player%::*}
		else if the name of the player's tool is "<light red>Monado Buster":
			set {_debug} to changeEntityStatBuff(player,"STR",20,"Monado Buster",1)
			set {_debug} to changeEntityStatBuff(player,"MAG",20,"Monado Buster",1)
			play sound "entity.zombie_villager.cure" with volume 1 and pitch 1 at the player
			loadPlayerHotbar(player,"monadoHotbarSave")
		else if the name of the player's tool is "<light blue>Monado Speed":
			loop all players in radius 30 of the player:
				if {party.%loop-player%} is {party.%player%}:
					set {_debug} to changeEntityStatBuff(loop-player,"SPD",10,"Monado Speed",0)
					set {_debug} to changeEntityStatBuff(loop-player,"LCK",10,"Monado Speed",0)
					send formatted "<gold>%player% has cast Monado Speed. SPD/LCK +10 for 10 seconds." to loop-player
					add loop-player to {t_monadoBuffCooldown.%player%::*}
			play sound "entity.zombie_villager.cure" with volume 1 and pitch 1 at the player
			loadPlayerHotbar(player,"monadoHotbarSave")
			wait 10 seconds
			loop {t_monadoBuffCooldown.%player%::*}:
				set {_debug} to changeEntityStatBuff(loop-value,"SPD",-10,"Monado Speed",0)
				set {_debug} to changeEntityStatBuff(loop-value,"LCK",-10,"Monado Speed",0)
			clear {t_monadoBuffCooldown.%player%::*}
		else if the name of the player's tool is "<light yellow>Monado Shield":
			loop all players in radius 30 of the player:
				if {party.%loop-player%} is {party.%player%}:
					set {_debug} to changeEntityStatBuff(loop-player,"DEF",10,"Monado Shield",0)
					set {_debug} to changeEntityStatBuff(loop-player,"RES",10,"Monado Shield",0)
					send formatted "<gold>%player% has cast Monado Shield. DEF/RES +10 for 10 seconds." to loop-player
					add loop-player to {t_monadoBuffCooldown.%player%::*}
			play sound "entity.zombie_villager.cure" with volume 1 and pitch 1 at the player
			loadPlayerHotbar(player,"monadoHotbarSave")
			wait 10 seconds
			loop {t_monadoBuffCooldown.%player%::*}:
				set {_debug} to changeEntityStatBuff(loop-value,"DEF",-10,"Monado Shield",0)
				set {_debug} to changeEntityStatBuff(loop-value,"RES",-10,"Monado Shield",0)
			clear {t_monadoBuffCooldown.%player%::*}
		else if the name of the player's tool is "<light green>Monado Eater":
			loop all monsters in radius 30 of the player:
				set {_debug} to changeEntityStatBuff(loop-monster,"STR",-10,"Monado Eater",1)
				set {_debug} to changeEntityStatBuff(loop-monster,"MAG",-10,"Monado Eater",1)
				set {_debug} to changeEntityStatBuff(loop-monster,"DEF",-10,"Monado Eater",1)
				set {_debug} to changeEntityStatBuff(loop-monster,"RES",-10,"Monado Eater",1)
			play sound "entity.zombie_villager.cure" with volume 1 and pitch 1 at the player
			loadPlayerHotbar(player,"monadoHotbarSave")
		else if the name of the player's tool is "<white>Cancel Monado Arts":
			set {monadoArtsGauge.%player%} to 100
			set bossbar "monadogauge.%player's uuid%" progress to 100
			loadPlayerHotbar(player,"monadoHotbarSave")
	#Yamato - Judgement Cut
	if the nbt of player's tool contains "SacredTreasureID:41":
		if {consecutiveJudgementCuts.%player%} is not set:
			set {consecutiveJudgementCuts.%player%} to 1
		if {disableJudgementCut.%player%} is not set:
			if {consecutiveJudgementCuts.%player%} is less than or equal to 4:
				set {_currentConscJCs} to {consecutiveJudgementCuts.%player%} + 1
				if player is not on ground:
					push the player upwards at speed 0.2
					executeJudgementCut(player,0)
					wait 0.3 seconds
					clear {disableJudgementCut.%player%}
					send "debug: JC ok" to the player
					wait 0.25 seconds
					if {_currentConscJCs} is {consecutiveJudgementCuts.%player%}:
						send "debug: JC not ok" to the player
						set {disableJudgementCut.%player%} to true
						wait 0.75 seconds
						clear {consecutiveJudgementCuts.%player%}
						clear {disableJudgementCut.%player%}
						send formatted "<light blue>Judgement Cut recharged." to the player
				else:
					#Judgement Cut End
					if {dtActive.%player%} is set:
						play sound "ui.button.click" with volume 0.7 and pitch 1 at the player
						apply slowness 20 to the player for 7 seconds
						apply resistance 5 to the player for 7 seconds
						apply blindness 1 to the player for 3 seconds
						loop 16 times:
							loop all blocks in radius 15 of the player:
								play 5 (lapis block break with speed 1) at loop-block
							play sound "entity.minecart.ride" with volume 0.5 and pitch 0.5 at the player
							wait 0.25 seconds
						executeJudgementCut(player,1)
						wait 2 seconds
						clear {disableJudgementCut.%player%}
						clear {consecutiveJudgementCuts.%player%}
						#Halve player's DT gauge after JC is performed
						set {dtMeter.%player%} to floor({dtMeter.%player%} / 2)
					#Grounded Judgement Cut
					#Skip windup if doing consecutive JC's
					if {consecutiveJudgementCuts.%player%} is 1:
						play sound "ui.button.click" with volume 1 and pitch 1.5 at the player
						wait 0.15 seconds
					executeJudgementCut(player,0)
					wait 0.3 seconds
					clear {disableJudgementCut.%player%}
					send "debug: JC ok" to the player
					wait 0.35 seconds
					if {_currentConscJCs} is {consecutiveJudgementCuts.%player%}:
						send "debug: JC not ok" to the player
						set {disableJudgementCut.%player%} to true
						wait 0.65 seconds
						clear {consecutiveJudgementCuts.%player%}
						clear {disableJudgementCut.%player%}
						send formatted "<light blue>Judgement Cut recharged." to the player
			else:
				clear {consecutiveJudgementCuts.%player%}
	#Lance throw behavior
	if player is not sneaking:
		#Wooden Lance (Throwing)
		if the nbt of player's tool contains "LanceType:0":
			make the player shoot an arrow with speed 2
			set metadata value "JavType" of the last shot projectile to 1
			set {_sklcheck} to checkSlots(player,"Lance Specialist")
			if {_sklcheck} is not 1:
				damage the player's tool by 2
			else:
				damage the player's tool by 1
			if the durability of the player's tool is less than or equal to 0:
				set the player's tool to air
				play sound "entity.item.break" with volume 1 and pitch 1 at the player
		#Stone Lance (Throwing)
		else if the nbt of player's tool contains "LanceType:1":
			make the player shoot an arrow with speed 2
			set metadata value "JavType" of the last shot projectile to 2
			set {_sklcheck} to checkSlots(player,"Lance Specialist")
			if {_sklcheck} is not 1:
				damage the player's tool by 3
			else:
				damage the player's tool by 1
			if the durability of the player's tool is less than or equal to 0:
				set the player's tool to air
				play sound "entity.item.break" with volume 1 and pitch 1 at the player
		#Iron Lance (Throwing)
		else if the nbt of player's tool contains "LanceType:2":
			make the player shoot an arrow with speed 2
			set metadata value "JavType" of the last shot projectile to 3
			set {_sklcheck} to checkSlots(player,"Lance Specialist")
			if {_sklcheck} is not 1:
				damage the player's tool by 4
			else:
				damage the player's tool by 2
			if the durability of the player's tool is less than or equal to 0:
				set the player's tool to air
				play sound "entity.item.break" with volume 1 and pitch 1 at the player
		#Golden Lance (Throwing)
		else if the nbt of player's tool contains "LanceType:3":
			make the player shoot an arrow with speed 2
			set metadata value "JavType" of the last shot projectile to 4
			set {_sklcheck} to checkSlots(player,"Lance Specialist")
			if {_sklcheck} is not 1:
				damage the player's tool by 1
			else:
				chance of 50%:
					damage the player's tool by 1
			if the durability of the player's tool is less than or equal to 0:
				set the player's tool to air
				play sound "entity.item.break" with volume 1 and pitch 1 at the player
		#Diamond Lance (Throwing)
		else if the nbt of player's tool contains "LanceType:4":
			make the player shoot an arrow with speed 2
			set metadata value "JavType" of the last shot projectile to 5
			set {_sklcheck} to checkSlots(player,"Lance Specialist")
			if {_sklcheck} is not 1:
				damage the player's tool by 5
			else:
				damage the player's tool by 2
			if the durability of the player's tool is less than or equal to 0:
				set the player's tool to air
				play sound "entity.item.break" with volume 1 and pitch 1 at the player
		#Crusader's Lance (Throwing) [UNUSED]
		else if the name of the player's tool contains "Crusader's Lance":
			make the player shoot an arrow with speed 2
			set metadata value "JavType" of the last shot projectile to 6
			set {_sklcheck} to checkSlots(player,"Lance Specialist")
			if {_sklcheck} is not 1:
				damage the player's tool by 1
			else:
				chance of 20%:
					damage the player's tool by 1
		set {_daggerDurabilityBonus} to 0
		add checkSlots(player,"Dagger Specialist") to {_daggerDurabilityBonus}
		if {traits.%player%::Always Prepared} is set:
			add 1 to {_daggerDurabilityBonus}
		#Wooden Dagger (Throwing)
		else if the nbt of player's tool contains "DaggerType:0":
			make the player shoot an arrow with speed 2
			set metadata value "DaggerType" of the last shot projectile to 0
			if {_daggerDurabilityBonus} is more than 0:
				chance of (100 - (50 * {_daggerDurabilityBonus}))%:
					remove 1 of tool from tool
			else:
				remove 1 of tool from tool
		#Stone Dagger (Throwing)
		else if the nbt of player's tool contains "DaggerType:1":
			make the player shoot an arrow with speed 2
			set metadata value "DaggerType" of the last shot projectile to 1
			if {_daggerDurabilityBonus} is more than 0:
				chance of (100 - (50 * {_daggerDurabilityBonus}))%:
					remove 1 of tool from tool
			else:
				remove 1 of tool from tool
		#Iron Dagger (Throwing)
		else if the nbt of player's tool contains "DaggerType:2":
			make the player shoot an arrow with speed 2
			set metadata value "DaggerType" of the last shot projectile to 2
			if {_daggerDurabilityBonus} is more than 0:
				chance of (100 - (50 * {_daggerDurabilityBonus}))%:
					remove 1 of tool from tool
			else:
				remove 1 of tool from tool
		#Golden Dagger (Throwing)
		else if the nbt of player's tool contains "DaggerType:3":
			make the player shoot an arrow with speed 2
			set metadata value "DaggerType" of the last shot projectile to 3
			if {_daggerDurabilityBonus} is more than 0:
				chance of (100 - (50 * {_daggerDurabilityBonus}))%:
					remove 1 of tool from tool
			else:
				remove 1 of tool from tool
		#Diamond Dagger & Dagger Sacred Treasures (Throwing)
		else if the nbt of player's tool contains "DaggerType:4":
			make the player shoot an arrow with speed 2
			set metadata value "DaggerType" of the last shot projectile to 4
			if {_daggerDurabilityBonus} is more than 0:
				chance of (100 - (50 * {_daggerDurabilityBonus}))%:
					remove 1 of tool from tool
			else:
				remove 1 of tool from tool
		#Cutlaseer (Throwing)
		else if the nbt of player's tool contains "DaggerType:5":
			make the player shoot an arrow with speed 2
			set metadata value "DaggerType" of the last shot projectile to 5
		#En Vouge (Perk)
		if checkSlots(player,"En Vouge") is 1:
			if player's tool is any axe:
				damage the player's tool by 4
				make the player shoot an arrow at speed 1.33
				set metadata value "JavType" of the last shot projectile to 2
				if the durability of the player's tool is less than or equal to 0:
					set the player's tool to air
					play sound "entity.item.break" with volume 1 and pitch 1 at the player

#Players can stall themselves in the air by attacking.
on left click:
	if player is not on ground:
		if player's tool is not air:
			if player's game mode is not creative:
				if player is not sneaking:
					if player's tool is any sword:
						set {_HangOK} to true
					else if player's tool is any axe:
						set {_HangOK} to true
					else if player's tool is any shovel:
						set {_HangOK} to true
					else if player's tool is a bow:
						set {_HangOK} to true
					else if the name of the player's tool contains "Magic Wand":
						set {_HangOK} to true
					else if the player's tool is a book:
						set {_HangOK} to true
					else if nbt of player's tool contains "GauntletType":
						set {_HangOK} to true
					else if nbt of player's tool contains "DaggerType":
						set {_HangOK} to true
					if {airHangToggle.%player%} is not set:
						set {_HangOK} to false
					if {_HangOK} is true:
						if {attackHangtimeCount.%player%} is more than 0:
							if {inHangtime.%player%} is not true:
								subtract 1 from {attackHangtimeCount.%player%}
								send formatted "<bold><italics>Air Hang: %{attackHangtimeCount.%player%}%"
								set {_magnitude} to sqrt((x of player's velocity ^ 2) + (z of player's velocity ^ 2)) + 0.15
								set {_magnitude} to {_magnitude} / (5 - {attackHangtimeCount.%player%})
								push the player in horizontal direction of the player at speed {_magnitude}
								loop 4 times:
									set {_magnitude} to (y of player's velocity)
									#Cap hangtime boost if it exceeds a specific amount, and take absolute value.
									if {_magnitude} is less than 0:
										set {_magnitude} to {_magnitude} * -1.05
									else:
										set {_magnitude} to 0.05
									push the player upwards at speed {_magnitude}
									wait 1 tick
									set {inHangtime.%player%} to true
								clear {inHangtime.%player%}
	#Electro Heart range extension
	if checkSlots(player,"Electro Heart") is 1:
		if {dtActive.%player%} is set:
			make player shoot an arrow with speed 2
			set {_electroheartRangeBuff} to the last shot projectile
			set metadata value "SPELL" of the last shot projectile to 1
			wait 6 ticks
			kill {_electroheartRangeBuff}
			delete {_electroheartRangeBuff}
			
#Projectile Particles and Battle Forecast	
every 2 ticks:
	loop all players:
		loop all entities in radius 20 of the loop-player:
			if loop-value-2 is not a monster:
				if metadata value "gunType" of the loop-value-2 is "RocketLauncher":
					play 5 (smoke with speed 0) at the loop-value-2
					play 5 (cloud with speed 0) at the loop-value-2
				else if metadata value "gunType" of the loop-value-2 is set:
					play 5 (smoke with speed 0) at the loop-value-2
					play 5 (gold block break with speed 1) at the loop-value-2
				else if metadata value "TomeEff" of the loop-value-2 is set:
					play 5 (firework spark with speed 0) at the loop-value-2
				else if metadata value "SPELL" of the loop-value-2 is 1:
					play 5 (firework spark with speed 0) at the loop-value-2
		#Battle Forecast
		if getEntityStatTotal(loop-player's target,"STR") is more than or equal to 1:
			if loop-player's target is monster:
				set {_showBF} to true
			else if loop-player's target is player:
				set {_showBF} to true
			if {_showBF} is true:
				wipe the loop-player's sidebar
				clear {t_showBattleForecast.%loop-player%}
				set {t_showBattleForecast.%loop-player%} to 1
				set name of sidebar of the loop-player to "<gold>-=Battle Forecast=-"
				set score "STR:" in sidebar of the loop-player to (getEntityStatTotal(loop-player's target,"STR"))
				set score "DEF:" in sidebar of the loop-player to (getEntityStatTotal(loop-player's target,"DEF"))
				set score "SPD:" in sidebar of the loop-player to (getEntityStatTotal(loop-player's target,"SPD"))
				set score "LCK:" in sidebar of the loop-player to (getEntityStatTotal(loop-player's target,"LCK"))
				set score "MAG:" in sidebar of the loop-player to (getEntityStatTotal(loop-player's target,"MAG"))
				set score "RES:" in sidebar of the loop-player to (getEntityStatTotal(loop-player's target,"RES"))
				set score "CHR:" in sidebar of the loop-player to (getEntityStatTotal(loop-player's target,"CHR"))
				set score "Level:" in sidebar of the loop-player to (getEntityStat(loop-player's target,"lvl"))
				while {t_showBattleForecast.%loop-player%} is less than 7:
					add 1 to {t_showBattleForecast.%loop-player%}
					wait 1 second
				wipe the loop-player's sidebar
				clear {t_showBattleForecast.%loop-player%}
		
#Deny breaking blocks while a combat tag is active		
on mine:
	if {t_isCombatTagged.%player%} is set:
		cancel event
		send "<light red>You are combat tagged and cannot break blocks."
		send "<light red>Time left on tag: %{t_isCombatTagged.%player%}%s"

#Deny block placing while a combat tag is active
on place:
	if {t_isCombatTagged.%player%} is set:
		cancel event
		send "<light red>You are combat tagged and cannot place blocks."
		send "<light red>Time left on tag: %{t_isCombatTagged.%player%}%s"
			
#Power Within
every second:
	loop all players:
		if getEntitySkillsInHand(loop-player,"Power Within",2,1) is more than 0:
			applyRecoilDamage(loop-player,1)
			if {activeBuffs.str.%loop-player%::Power Within} is not set:
				set {_debug} to changeEntityStatBuff(loop-player,"STR",7,"Power Within",0)
				set {_debug} to changeEntityStatBuff(loop-player,"SPD",7,"Power Within",0)
				set {_debug} to changeEntityStatBuff(loop-player,"LCK",7,"Power Within",0)
				set {_debug} to changeEntityStatBuff(loop-player,"DEF",7,"Power Within",0)
				set {_debug} to changeEntityStatBuff(loop-player,"RES",7,"Power Within",0)
				set {_debug} to changeEntityStatBuff(loop-player,"MAG",7,"Power Within",0)
		else if {activeBuffs.str.%loop-player%::Power Within} is set:
			set {_debug} to changeEntityStatBuff(loop-player,"STR",-7,"Power Within",0)
			set {_debug} to changeEntityStatBuff(loop-player,"SPD",-7,"Power Within",0)
			set {_debug} to changeEntityStatBuff(loop-player,"LCK",-7,"Power Within",0)
			set {_debug} to changeEntityStatBuff(loop-player,"DEF",-7,"Power Within",0)
			set {_debug} to changeEntityStatBuff(loop-player,"RES",-7,"Power Within",0)
			set {_debug} to changeEntityStatBuff(loop-player,"MAG",-7,"Power Within",0)
		if {t_galeforceCooldown.%loop-player%} is set:
			if {t_galeforceCooldown.%loop-player%} is more than 0:
				subtract 1 from {t_galeforceCooldown.%loop-player%}
			else:
				clear {t_galeforceCooldown.%loop-player%}
				send "<light purple>Galeforce is now ready." to loop-player
		if {t_njorunsZealCooldown.%loop-player%} is set:
			if {t_njorunsZealCooldown.%loop-player%} is more than 0:
				subtract 1 from {t_njorunsZealCooldown.%loop-player%}
			else:
				clear {t_njorunsZealCooldown.%loop-player%}
				send "<light purple>Galeforce is now ready." to loop-player
				
#Leggings potion effects
every 2 seconds:
	loop all players:
		if the 1st line of the lore of the loop-player's leggings contains "Strength":
			apply strength 2 to loop-player for 2 seconds
		else if the 1st line of the lore of the loop-player's leggings contains "Swiftness":
			apply swiftness 2 to loop-player for 2 seconds
		else if the 1st line of the lore of the loop-player's leggings contains "Resistance":
			apply resistance 2 to loop-player for 2 seconds
		else if the 1st line of the lore of the loop-player's leggings contains "Regeneration":
			apply regeneration 2 to loop-player for 2 seconds
		if the 2nd line of the lore of the loop-player's tool contains "Pass":
			loop all entities in radius 6 of the loop-player:
				if loop-entity-2 is not loop-player:
					if {party.%loop-entity-2%} is not {party.%loop-player%}:
						apply swiftness 2 to loop-player for 2 seconds
						exit 1 loop
		else if the 2nd line of the lore of the loop-player's tool contains "Obstruct":
			loop all entities in radius 6 of the loop-player:
				if loop-entity-2 is not loop-player:
					if {party.%loop-entity-2%} is not {party.%loop-player%}:
						apply slowness 2 to loop-entity-2 for 2 seconds

#Combat Tag decay, morale decay, and spell cooldowns
every 0.25 seconds:
	loop all players:
		if {t_isCombatTagged.%loop-player%} is set:
			play 5 (obsidian break with speed 1) at loop-player
			subtract 0.25 from {t_isCombatTagged.%loop-player%}
			if {t_isCombatTagged.%loop-player%} is less than or equal to 0:
				clear {t_isCombatTagged.%loop-player%}
				send "<light green>You are no longer combat tagged." to loop-player
		else if {t_morale.%loop-player%} is not 0:
			if {t_morale.%loop-player%} is less than 0:
				add 0.25 to {t_morale.%loop-player%}
			else:
				subtract 0.125 from {t_morale.%loop-player%}
		else if {t_moraleNeutralMessage.%loop-player%} is not true:
			set {t_moraleNeutralMessage.%loop-player%} to true
			send "<light yellow>Your Morale has returned to normal." to loop-player
			play mob spawner flames at the loop-player
		if {t_embeddedSwordTimer.%loop-player%} is set:
			subtract 0.25 from {t_embeddedSwordTimer.%loop-player%}
			play 10 (lapis block break with speed 1) at {t_embeddedSwordTarget.%loop-player%}
			play 10 (light blue wool break with speed 1) at {t_embeddedSwordTarget.%loop-player%}
			if {t_embeddedSwordTimer.%loop-player%} is less than or equal to 0:
				clear {t_embeddedSwordTimer.%loop-player%}
				clear {t_embeddedSwordTarget.%loop-player%}
				send "<light red>Embedded Sword has dissipated." to loop-player
		#Last Stand cooldown
		if {laststandState.%loop-player%} is set:
			subtract 0.25 from {laststandState.%loop-player%}
			if {laststandState.%loop-player%} is less than or equal to 0:
				clear {laststandState.%loop-player%}
				send "<orange>Last Stand is now ready." to loop-player
		#Spell Cooldowns
		if {spellcooldown.%loop-player%} is more than 0:
			subtract 0.25 from {spellcooldown.%loop-player%}
			if {spellcooldown.%loop-player%} is less than or equal to 0:
				clear {spellcooldown.%loop-player%}
				send "<light green>Wand recharged!" to loop-player
			else:
				send "<light yellow>Wand Cooldown: %{spellcooldown.%loop-player%}% seconds left" to loop-player
		#More than Magic (Perk) (Weapon Switch window decay)
		if {t_MoreThanMagicWeaponSwitchWindow.%loop-player%} is more than 0:
			subtract 0.25 from {t_MoreThanMagicWeaponSwitchWindow.%loop-player%}
			if {t_MoreThanMagicWeaponSwitchWindow.%loop-player%} is less than or equal to 0:
				clear {t_MoreThanMagicWeaponSwitchWindow.%loop-player%}
		#More than Magic (Perk) (Bonus Decay)
		if {t_MoreThanMagicBonusActive.%loop-player%} is more than 0:
			subtract 0.25 from {t_MoreThanMagicBonusActive.%loop-player%}
			if {t_MoreThanMagicBonusActive.%loop-player%} is less than or equal to 0:
				clear {t_MoreThanMagicBonusActive.%loop-player%}
				
#Experience Points & Gold handler
on death of a monster:
	#Prevents players from farming in training mode
	if victim's world is not "Salindrum":
		if {lvl.%attacker%} is set:
			if attacker is player:
				add 1 to {kills.%attacker%}
			clear {abilities.%victim%::*}
			#Bloody Mess [Trait, on-kill]
			if {traits.%attacker%::Bloody Mess} is set:
				play 20 (redstone block break with speed 1) at the victim
				play 10 (quartz block break with speed 1) at the victim
			#Initialize reward vars
			set {_cash} to 1
			set {_xp} to 1
			#Boss Bonuses
			if {t_isBoss.%victim%} is set:
				loop (10 + {t_lvl.%victim%}) times:
					chance of 1%:
						chance of 25%:
							drop 1 diamond block at the victim
					chance of 15%:
						drop 1 diamond at the victim
					chance of 25%:
						drop 1 emerald at the victim
						chance of 10%:
							drop 1 emerald block at the victim
					chance of 50%:
						drop 1 gold ingot at the victim
						chance of 10%:
							drop 1 gold block at the victim
					drop 1 iron ingot at the victim
					chance of 10%:
						drop 1 iron block at the victim
					chance of 1%:
						chance of 10%:
							set {_item} to getRareLoot()
							drop {_item} at the victim
					chance of 1%:
						chance of 1%:
							set {_item} to getUltraRareLoot()
							drop {_item} at the victim
					chance of 1%:
						set {_item} to getCommonLoot(attacker)
						drop {_item} at the victim
					chance of 1%:
						chance of 1%:
							set {_item} to getPerkManual(attacker)
							drop {_item} at the victim
				add ceil(2 * getEntityStat(victim,"lvl")) to {_cash}
				add ceil(getEntityStat(attacker,"lvl") * 2) to {_xp}
				clear {isBoss.%victim%}
			#Treasure mob bonus
			if the name of the victim contains "<gold>Treasure":
				loop (10 + {t_lvl.%victim%}) times:
					chance of 1%:
						chance of 1%:
							drop 1 diamond block at the victim
					chance of 5%:
						drop 1 diamond at the victim
					chance of 14%:
						drop 1 emerald at the victim
						chance of 5%:
							drop 1 emerald block at the victim
					chance of 25%:
						drop 1 gold ingot at the victim
						chance of 5%:
							drop 1 gold block at the victim
					drop 1 iron ingot at the victim
					chance of 5%:
						drop 1 iron block at the victim
					chance of 1%:
						chance of 1%:
							set {_item} to getRareLoot()
							drop {_item} at the victim
					chance of 1%:
						chance of 1%:
							chance of 10%:
								set {_item} to getUltraRareLoot()
								drop {_item} at the victim
					chance of 3%:
						set {_item} to getCommonLoot(attacker)
						drop {_item} at the victim
					chance of 1%:
						chance of 1%:
							set {_item} to getPerkManual(attacker)
							drop {_item} at the victim
				add ceil(3 * getEntityStat(victim,"lvl")) to {_cash}
				add ceil(getEntityStat(attacker,"lvl")) to {_xp}
			#Special mobs always drop their weapon
			if the name of the victim contains "<light red>":
				send formatted "<gold>Fallen Hero %victim's name%<reset><gold> defeated! The special weapon %name of the victim's tool%<reset><gold> was obtained." to the attacker
				drop the victim's tool at the victim
			else if the name of the victim contains "Treasure":
				send formatted "<gold>To the victor go the spoils! The %name of the victim's tool% was obtained!" to the attacker
				drop the victim's tool at the victim				
			#Give players more cash/xp for defeating a monster that has a higher level than them
			if (((getEntityStat(attacker,"lvl")) + (((getEntityStat(attacker,"promoted")) - 1) * 10)) - (getEntityStat(victim,"lvl"))) is less than 0:
				add ((getEntityStat(victim,"lvl")) - ((getEntityStat(attacker,"lvl")) + (((getEntityStat(attacker,"promoted")) - 1) * 10))) to {_cash}
				add ((getEntityStat(victim,"lvl")) - ((getEntityStat(attacker,"lvl")) + (((getEntityStat(attacker,"promoted")) - 1) * 10))) to {_XP}
			#Base money & xp
			add ceil((getEntityStat(victim,"lvl")) / (4.1 - ({playerDifficulty.%attacker%} / 9))) to {_cash}
			add ceil((getEntityStat(victim,"lvl")) / (2.1 - ({playerDifficulty.%attacker%} / 10))) to {_xp}
			#Way of the Warrior [Trait]
			if {traits.%attacker%::Way of the Warrior} is set:
				heal the attacker by floor(attacker's maximum health * 0.2)
				if {verboseCombatLogging.%attacker%} is set:
					send formatted "<gold>Dead on!! Way of the Warrior restored %floor(attacker's maximum health * 0.2)% HP." to the attacker
			#Elite Ring
			if attacker's health is more than or equal to (attacker's maximum health * 0.7):
				loop all items in the attacker's inventory:
					if the name of the loop-item is "<light blue><bold>Elite Ring":
						set {_xp} to floor({_xp} * 1.5)
						exit 1 loop
			#Theif Ring
			if attacker's health is more than or equal to (attacker's maximum health * 0.1):
				loop all items in the attacker's inventory:
					if the name of the loop-item is "<yellow><bold>Thief Ring":
						set {_odds} to ((getEntityStatTotal(attacker,"MAG")) / 1)
						if {_odds} is more than or equal to 90:
							set {_odds} to 90
						chance of {_odds}%:
							drop 1 paper named "<light green>Bullion (S)" with lore "<white>A small lump of gold.", "<white>Right-click to gain 50G." at the victim
						set {_odds} to floor((getEntityStatTotal(attacker,"MAG")) / 2)
						if {_odds} is more than or equal to 50:
							set {_odds} to 50
						chance of {_odds}%:
							drop 1 paper named "<light green>Bullion (M)" with lore "<white>A respectable stash of gold.", "<white>Right-click to gain 75G." at the victim
						set {_odds} to floor((getEntityStatTotal(attacker,"MAG")) / 4)
						if {_odds} is more than or equal to 25:
							set {_odds} to 25
						chance of {_odds}%:
							drop 1 paper named "<light green>Bullion (L)" with lore "<white>A large sack of gold.", "<white>Right-click to gain 100G." at the victim
						set {_odds} to floor((getEntityStatTotal(attacker,"MAG")) / 8)
						if {_odds} is more than or equal to 10:
							set {_odds} to 10
						chance of {_odds}%:
							drop 1 paper named "<light green>Bullion (XL)" with lore "<white>A massive stash of gold. It's your lucky day!", "<white>Right-click to gain 200G." at the victim
						set {_odds} to ((getEntityStatTotal(attacker,"MAG")) * 2)
						if {_odds} is more than or equal to 100:
							set {_odds} to 100
						chance of {_odds}%:
							drop 1 bread at the victim
						set {_odds} to floor((getEntityStatTotal(attacker,"MAG")) / 2)
						if {_odds} is more than or equal to 50:
							set {_odds} to 50
						chance of {_odds}%:
							drop 1 steak at the victim		
						set {_odds} to floor((getEntityStatTotal(attacker,"MAG")) / 4)
						if {_odds} is more than or equal to 20:
							set {_odds} to 20
						chance of {_odds}%:
							drop 1 cake at the victim
						exit 1 loop
			#Foretold Demise
			if checkSlots(attacker,"Foretold Demise") is 1:
				if attacker's health is less than or equal to attacker's maximum health * 0.5:
					heal the attacker by (attacker's maximum health * 0.25)
					set {_debug} to changeEntityStatBuff(attacker,"STR",6,"Foretold Demise (Perk)",1)
					set {_debug} to changeEntityStatBuff(attacker,"MAG",6,"Foretold Demise (Perk)",1)
			#Finishing Touch
			if checkSlots(attacker,"Finishing Touch") is 1:
				if changeOOCStatusTime(victim,"Finishing Touch",0) is more than 0:
					heal the attacker by (attacker's maximum health * 0.3)
					set {_cash} to {_cash} * 2
					set {_xp} to {_xp} * 2
			#Blood Thirst (Bonus)
			if checkSlots(attacker,"Blood Thirst") is 1:
				set {_debug} to changeEntityStatBuff(attacker,"STR",15,"Blood Thirst (Perk)",1)
				set {_debug} to changeEntityStatBuff(attacker,"SPD",15,"Blood Thirst (Perk)",1)
			#Guns Specialist
			if checkSlots(attacker,"Guns Specialist") is 1:
				if getEntityWeaponType(attacker) is 2:
					drop 1 iron nugget at the victim
					drop 1 gold nugget at the victim
					drop 1 gunpowder at the victim
					chance of 10%:
						drop 1 iron ingot at the victim
					chance of 10%:
						drop 1 gold ingot at the victim
			#Experience Sapper - 1.5x XP bonus
			if the 2nd line of the lore of the attacker's tool contains "Experience Sapper":
				set {_xp} to floor({_xp} * 1.5)
			#Veteran XP Penalty
			if {traits.%attacker%::Veteran} is true:
				set {_xp} to floor({_xp} * 0.65)
			if checkSlots(attacker,"Paragon") is 1:
				set {_xp} to floor({_xp} * 1.5)
			#Racial XP Curve adjustments
			if {race.%attacker%} is "Human":
				set {_xp} to floor({_xp} * 1.2)
			else if {race.%attacker%} is "Orc":
				set {_xp} to floor({_xp} * 0.8)
			else if {race.%attacker%} is "Dragonborn":
				set {_xp} to floor({_xp} * 0.8)
			#Small XP tweaks to make the XP curve a little nicer
			if {lvl.%attacker%} is less than 12:
				set {_xp} to floor({_xp} * 0.8)
			else if {lvl.%attacker%} is more than 30:
				set {_xp} to floor({_xp} * 1.2)
			set {_cash} to floor({_cash} * 0.75)
			#Grant total bonuses
			if {_xp} is more than 0:
				set {_xp} to floor({_xp})
				addClassXP(attacker,{_XP})
				make console execute command "/xp give %attacker% %{_xp}%"
				send formatted "<light yellow>+%{_xp}% EXP earned." to the attacker
				set {_playerLVL} to getPromotionCompensatedClassLevel(attacker)
				set bossbar "classxpbar.%attacker's UUID%" progress to ({classXP.%attacker%} / (ceil((({_playerLVL} + (({_playerLVL} - 1) ^ 2)) / 2) + 1))) * 100
			if {_cash} is more than 0:
				if {traits.%attacker%::Arrgh!} is true:
					set {_cash} to {_cash} * 2
					chance of 25%:
						drop 1 gunpowder at the victim
				set {_cash} to ceil({_cash} / 1.5)
				add {_cash} to attacker's balance
				send formatted "<light yellow>+%{_cash}% gold earned." to the attacker
			remove the attacker from {t_lastInvolvedCombatTargets.%victim%::*}
			#Award partial XP to players who participated in combat but did not land the killing blow
			#Set partial XP to 1/4
			set {_partialXP} to floor({_xp} / 4)
			set {_xp} to floor({_XP} * 0.5)
			set {_cash} to floor({_cash} * 0.5)
			loop {t_lastInvolvedCombatTargets.%victim%::*}:
				if loop-value is not the attacker:
					if {_xp} is more than 0:
						addClassXP(loop-value,{_XP})
						if getEntitySkillsInHand(loop-value,"EXP Share",2,4) is more than 0:
							addClassXP(loop-value,{_partialXP})
						make console execute command "/xp %loop-value% %{_xp}%"
						send formatted "<light yellow>[Kill Assist] +%{_xp}% EXP earned." to loop-value
						set {_playerLVL} to getPromotionCompensatedClassLevel(loop-value)
						set bossbar "classxpbar.%loop-value's UUID%" progress to ({classXP.%loop-value%} / (ceil((({_playerLVL} + (({_playerLVL} - 1) ^ 2)) / 2) + 1))) * 100
					if {_cash} is more than 0:
						if {traits.%loop-value%::Arrgh!} is true:
							set {_cash} to {_cash} * 2
						add {_cash} to loop-value's balance
						if getEntitySkillsInHand(loop-value,"EXP Share",2,4) is more than 0:
							add {_cash} to loop-value's balance
						send formatted "<light yellow>+$%{_cash}% gold earned." to the loop-value
			clear {t_lastInvolvedCombatTargets.%victim%::*}
			#Party XP Share
			if {%{party.%attacker%}%.settings::allowXPShare} is true:
				loop {%{party.%attacker%}%.members::*}:
					if loop-value is not the attacker:
						if loop-value is online:
							if {_xp} is more than 0:
								addClassXP(loop-value,{_partialXP})
								make console execute command "/xp %loop-value% %{_partialXP}%"
								send formatted "<light yellow>+%{_partialXP}% EXP earned [Party Share]." to loop-value
								set {_playerLVL} to getPromotionCompensatedClassLevel(loop-value)
								set bossbar "classxpbar.%loop-value's UUID%" progress to ({classXP.%loop-value%} / (ceil((({_playerLVL} + (({_playerLVL} - 1) ^ 2)) / 2) + 1))) * 100
							if {_cash} is more than 0:
								if {traits.%loop-value%::Arrgh!} is true:
									set {_cash} to {_cash} * 2
								add {_cash} to loop-value's balance
								send formatted "<light yellow>+$%{_cash}% gold earned." to the loop-value
			#Party BEX
			if {party.%attacker%} is set:
				add floor({_xp} * 0.2) to {%{party.%attacker%}%::Bonus XP Bank}
				add floor({lvl.%attacker%} / 2) to {%{party.%attacker%}%::Bonus XP Bank} 
			#Followers XP Share
			if {hasFollowerActive.%attacker%} is true:
				loop {followerList.%attacker%::*}:
					addClassXP(loop-value,{_XP})
			#Item drop loot
			#Common loot
			set {_lootOdds} to floor({t_lvl.%victim%} / 2)
			if {_lootOdds} is more than 20:
				set {_lootOdds} to 20
			chance of {_lootOdds}%:
				send "<orange>Common loot obtained!" to the attacker
				set {_item} to getCommonLoot(attacker)
				drop {_item} at the victim
			#Rare loot
			set {_lootOdds} to floor({t_lvl.%victim%} / 5)
			if {_lootOdds} is more than 10:
				set {_lootOdds} to 10
			chance of {_lootOdds}%:
				chance of 90%:
					send "<yellow>Rare loot obtained!" to the attacker
					set {_item} to getRareLoot()
					drop {_item} at the victim
			#Ultra-Rare Loot
			set {_lootOdds} to floor({t_lvl.%victim%} / 10)
			if {_lootOdds} is more than 5:
				set {_lootOdds} to 5
			chance of {_lootOdds}%:
				chance of 50%:
					send "<gold>Legendary loot obtained!" to the attacker
					set {_item} to getUltraRareLoot()
					drop {_item} at the victim
			#Perk Manual
			set {_lootOdds} to floor({t_lvl.%victim%} / 5)
			if {_lootOdds} is more than 10:
				set {_lootOdds} to 10
			chance of {_lootOdds}%:
				chance of 50%:
					send "<orange>Perk Manual obtained!" to the attacker
					set {_item} to getPerkManual(attacker)
					drop {_item} at the victim
			#Glory Kills (Perk)
			if checkSlots(attacker,"Glory Kill") is 1:
				if isEntityToolAir(attacker) is true:
					heal the attacker by (attacker's maximum health * 0.5)
					loop 2 times:
						chance of 50%:
							give 1 iron nugget to the attacker
						chance of 70%:
							give 1 gunpowder to the attacker
						chance of 30%:
							give 1 gold nugget to the attacker
					chance of 20%:
						give 1 firework to the attacker
					chance of 9%:
						give 1 iron ingot to the attacker
			#Despoil (Skill)
			if getEntitySkillsInHand(attacker,"Despoil",0,2) is more than 0:
				set {_odds} to ((getEntityStatTotal(attacker,"MAG")) / 2)
				if {_odds} is more than or equal to 50:
					set {_odds} to 50
				chance of {_odds}%:
					drop 1 paper named "<light green>Bullion (S)" with lore "<white>A small lump of gold.", "<white>Right-click to gain 50G." at the victim
				set {_odds} to floor((getEntityStatTotal(attacker,"MAG")) / 3)
				if {_odds} is more than or equal to 50:
					set {_odds} to 50
				chance of {_odds}%:
					drop 1 paper named "<light green>Bullion (M)" with lore "<white>A respectable stash of gold.", "<white>Right-click to gain 75G." at the victim
				set {_odds} to floor((getEntityStatTotal(attacker,"MAG")) / 4)
				if {_odds} is more than or equal to 25:
					set {_odds} to 25
				chance of {_odds}%:
					drop 1 paper named "<light green>Bullion (L)" with lore "<white>A large sack of gold.", "<white>Right-click to gain 100G." at the victim
				set {_odds} to floor((getEntityStatTotal(attacker,"MAG")) / 8)
				if {_odds} is more than or equal to 10:
					set {_odds} to 10
				chance of {_odds}%:
					drop 1 paper named "<light green>Bullion (XL)" with lore "<white>A massive stash of gold. It's your lucky day!", "<white>Right-click to gain 200G." at the victim
				set {_odds} to ((getEntityStatTotal(attacker,"MAG")) * 2)
				if {_odds} is more than or equal to 100:
					set {_odds} to 100
				chance of {_odds}%:
					drop 1 bread at the victim
				set {_odds} to floor((getEntityStatTotal(attacker,"MAG")) / 2)
				if {_odds} is more than or equal to 50:
					set {_odds} to 50
				chance of {_odds}%:
					drop 1 steak at the victim		
				set {_odds} to floor((getEntityStatTotal(attacker,"MAG")) / 4)
				if {_odds} is more than or equal to 20:
					set {_odds} to 20
				chance of {_odds}%:
					drop 1 cake at the victim
			#Add 1 to the attacker's number of mobs killed if they are in bleedout
			if {bleedoutState.%attacker%} is 1:
				add 1 to {bleedoutMobKillRevive.%attacker%::Kills}
				if {bleedoutMobKillRevive.%attacker%::Kills} is more than or equal to {bleedoutMobKillRevive.%attacker%::Target}:
					#Revive the player from bleedout if they kill mobs >= number of times sent to bleedout
					set {bleedoutState.%attacker%} to 3
					remove slowness from the attacker
					remove weakness from the attacker
					remove resistance from the attacker
					remove blindness from the attacker
					clear {tangibilityState.%attacker%}
					clear {laststandState.%attacker%}
				else:
					send formatted "<yellow>%{bleedoutMobKillRevive.%attacker%::Kills} - {bleedoutMobKillRevive.%attacker%::Target}% mobs left before self revive!" to the attacker
			#Small chance of Green/Gold Herbs being dropped on mob death.
			#Fudge the random chance a bit by making herbs drop more frequently if the player is low on health
			set {_herbDropChance} to 30
			#Herbivore (Perk)
			if checkSlots(attacker,"Herbivore") is 1:
				add 50 to {_herbDropChance}
				#Red Herbs can only drop if the Herbivore perk is equipped
				chance of ({_herbDropChance} - 49)%:
					play 30 (redstone block break with speed 1) at the victim
					drop 1 red dye named "<light red><bold>Red Herb" with lore "<white>Extremely rare herb said to have been created by the gods.","<white>Automatically consumed on death or entering bleedout.","<white>Immediately revives you from death when used." at the victim
			if attacker's health is less than (attacker's maximum health * 0.7):
				add floor((attacker's health / attacker's maximum health) * 50) to {_herbDropChance}
			chance of ({_herbDropChance})%:
				play 30 (light green wool break with speed 1) at the victim
				drop 1 green dye named "<light green><bold>Sacred Herb" with lore "<white>A medicinal herb used to heal wounds.","<white>Right-click to restore 6 hearts.","<white>Can also be picked up off the ground to restore 3 hearts if wounded." at the victim
			chance of ({_herbDropChance} - 17)%:
				play 30 (gold block break with speed 1) at the victim
				drop 1 yellow dye named "<light yellow><bold>Golden Herb" with lore "<white>Powerful medicinal herb with extreme healing power.","<white>Right-click to restore 12 hearts.","<white>Can also be picked up off the ground to restore 6 hearts if wounded." at the victim		
			#Canto (Perk) (Foe's Death condition)
			if checkSlots(attacker,"Canto") is 1:
				apply swiftness 8 to the attacker for 5 seconds
				apply resistance 8 to the attacker for 5 seconds
				loop all horses in radius 4 of the attacker:
					apply swiftness 8 to the loop-horse for 5 seconds
					apply resistance 8 to the loop-horse for 5 seconds
					
#Gold/Green Herb Pickup Behavior
on pick up:
	if the name of the event-item is "<light green><bold>Sacred Herb":
		if player's health is less than player's maximum health:
			#cancel event
			wait 1 tick
			remove 1 of event-item from the player's inventory
			play sound "entity.player.swim" with volume 2 and pitch 1.5 at the player for the player
			play sound "item.bucket.fill" with volume 2 and pitch 1.3 at the player for the player
			play 30 (light green wool break with speed 1) at the player
			heal the player by 3 + ceil({abilities.%player%::Medicine} * 0.01)
			send formatted "<light green>Consumed a Sacred Herb and restored 3 HP."
	else if the name of the event-item is "<light yellow><bold>Golden Herb":
		if player's health is less than player's maximum health:
			#cancel event
			wait 1 tick
			remove 1 of event-item from the player's inventory
			play sound "block.enchantment_table.use" with volume 3 and pitch 2 at the player for the player
			play sound "entity.player.swim" with volume 1 and pitch 1.5 at the player for the player
			play 30 (gold block break with speed 1) at the player
			heal the player by 6 + ceil({abilities.%player%::Medicine} * 0.01)
			send formatted "<light yellow>Consumed a Golden Herb and restored 6 HP."
			
#Bleedout variable states:
#Not set: Can be sent into Bleedout
#1: Is downed
#2: Dead, man.

#Last stand state tracks the time left on the Last Stand cooldown.
#If it's set, don't let the player trigger Last Stand.
			
#Player death penalties & damage assist behavior
on death of a player:
	if citizen id of the victim is set:
		if {npc_summonOwner.%citizen id of victim%} is set:
			create safe explosion of force 1 at the victim
			play 40 (purple wool break with speed 1) at the victim
			play 40 (smoke with speed 1) at the victim
			send formatted "<light red>%victim's name% was slain!" to {npc_summonOwner.%citizen id of victim%}
			subtract 1 from {activeSummonCount.%{npc_summonOwner.%citizen id of victim%}%}
			make console execute command "/npc sel %citizen id of victim%"
			make console execute command "/npc remove"
			set {_summonType} to the name of the victim
			clear {npc_str.%citizen id of victim%}
			clear {npc_spd.%citizen id of victim%}
			clear {npc_mag.%citizen id of victim%}
			clear {npc_def.%citizen id of victim%}
			clear {npc_res.%citizen id of victim%}
			clear {npc_lck.%citizen id of victim%}
			clear {npc_hp.%citizen id of victim%}
			clear {NPCsFor.%{npc_summonOwner.%citizen id of victim%}%::C_%{_summonType}%}
			clear {npc_party.%citizen id of victim%}
			clear {npc_summonOwner.%citizen id of victim%}
	else:
		#initialize on-death penalties so I don't have to re-type them
		set {_XPLoss} to floor(victim's level * 0.25)
		set {_GoldLoss} to floor(victim's money * 0.5)
		if {traits.%victim%::Arrgh!} is true:
			set {_GoldLoss} to {_GoldLoss} * 2
		if citizen id of the victim is not set:
			if {damageAssistToggle.%victim%} is set:
				#Remove poison status effect if player gets sent into Last Stand
				changeOOCStatusTime(victim,"Poison",-1)
				set {_lastStandOK} to false
				if {laststandState.%victim%} is not set:
					set {_lastStandOK} to true
					#broadcast "test"
				if {_lastStandOK} is true:
					cancel event
					set {laststandState.%victim%} to 15
					set the victim's health to 0.5
					send "<orange>You're hanging on by a thread..." to the victim
					#if {quotesToggle.%victim%} is true:
					#	make victim say {playerQuotes.%victim%::LowHealth}
					clear {bleedoutState.%victim%}
					lowHPSFX(victim)
				#Bleedout
				else if {bleedoutState.%victim%} is not set:
					if {bleedoutState.%victim%} is not 2:
						if {itemCooldowns.%victim%::Red Herb} is not set:
							loop all items in the victim's inventory:
								if the name of the loop-item contains "<light red><bold>Red Herb":
									#Remove poison status effect when a Red Herb is used
									changeOOCStatusTime(victim,"Poison",-1)
									cancel event
									remove 1 of loop-item from loop-item
									strike lightning effect at the victim
									set {itemCooldowns.%victim%::Red Herb} to (260 - ({abilities.%victim%::Medicine} * 2))
									send "<gold><bold>Red Herb was used. <white><bold>[Cooldown: %{itemCooldowns.%victim%::Red Herb}%s]" to the victim
									heal the victim by 999
									loop all monsters in radius 10 of the victim:
										push the loop-monster upwards at speed 1
										push the loop-monster backwards at speed 1
									apply resistance 4 to the victim for 5 seconds
									play sound "item.totem.use" with volume 0.8 and pitch 1 at victim
								if the name of the loop-item contains "<red><bold>Red Herb":
									#Remove poison status effect when a Red Herb is used
									changeOOCStatusTime(victim,"Poison",-1)
									cancel event
									remove 1 of loop-item from loop-item
									strike lightning effect at the victim
									set {itemCooldowns.%victim%::Red Herb} to (260 - ({abilities.%victim%::Medicine} * 2))
									send "<gold><bold>Red Herb was used. <white><bold>[Cooldown: %{itemCooldowns.%victim%::Red Herb}%s]" to the victim
									heal the victim by 999
									loop all monsters in radius 10 of the victim:
										push the loop-monster upwards at speed 1
										push the loop-monster backwards at speed 1
									apply resistance 4 to the victim for 5 seconds
									play sound "item.totem.use" with volume 0.8 and pitch 1 at victim
							if {itemCooldowns.%victim%::Red Herb} is not set:
								set {_forceBleedout} to true
						else:
							set {_forceBleedout} to true
						if {_forceBleedout} is true:
							cancel event
							#Remove poison status effect if player is sent into bleedout (prevents dying through bleedout invuln
							changeOOCStatusTime(victim,"Poison",-1)
							set {tangibilityState.%victim%} to "GenericInvulnerable"
							apply weakness 1 to the victim for 26 seconds
							apply slowness 1 to the victim for 26 seconds
							apply resistance 99 to the victim for 26 seconds
							set {bleedoutState.%victim%} to 1
							set the victim's health to 0.5
							loop {%{party.%victim%}%.members::*}:
								send formatted "<red><bold>%victim's tablist name% <red><bold>has been downed!" to loop-value
							if {quotesToggle.%victim%} is true:
								make victim say {playerQuotes.%victim%::Downed}
							#Increment the number of mobs to kill to self-revive
							if {bleedoutMobKillRevive.%victim%::Target} is not set:
								set {bleedoutMobKillRevive.%victim%::Target} to 1
							else:
								set {bleedoutMobKillRevive.%victim%::Target} to {bleedoutMobKillRevive.%victim%::Target} * 2
							set {bleedoutMobKillRevive.%victim%::Kills} to 0
							send formatted "<red><bold>You have been critically wounded. Kill %{bleedoutMobKillRevive.%victim%::Target}% mobs or be assisted by another player to be revived." to the victim
							#Initialize bleedout HUD element
							create bossbar titled "Bleeding out!" and id "bleedoutGUIBar.%victim's UUID%" for victim with progress 100 with colors red
							display bossbar "bleedoutGUIBar.%victim's UUID%"
							set {_bleedoutTimer} to (100 * ((checkSlots(victim,"D.B.N.O")) + 1))
							if {traits.%victim%::Blade Sponge} is set:
								set {_bleedoutTimer} to {_bleedoutTimer} / 2
							set {laststandState.%victim%} to 60
							#Bleedout countdown loop
							while {bleedoutState.%victim%} is 1:
								subtract 1 from {_bleedoutTimer}
								if {_bleedoutTimer} is less than or equal to 0:
									clear {tangibilityState.%victim%}
									set {bleedoutState.%victim%} to 2
									exit 1 loop
								else:
									play 3 (redstone block break with speed 1) at the victim
									set bossbar "bleedoutGUIBar.%victim's UUID%" progress to floor({_bleedoutTimer})
								if {bleedoutState.%victim%} is not 1:
									exit 1 loop
								wait 0.25 seconds
							if {bleedoutState.%victim%} is not 2:
								if {bleedoutState.%victim%} is 3:
									play sound "item.totem.use" with volume 1 and pitch 1 at the attacker
									clear {bleedoutMobKillRevive.%victim%::Kills}
									loop all monsters in radius 10 of the victim:
										push the loop-monster upwards at speed 1
										push the loop-monster backwards at speed 1
									send formatted "<gold>Saved yourself from bleedout!" to the victim
								else:
									send formatted "<light blue><bold>Another player saved you from imminent death." to the victim
									buffSFX(victim)
								if {quotesToggle.%victim%} is true:
									make victim say {playerQuotes.%victim%::Revived}
								heal the victim by 5 hearts
								apply regeneration 3 to the victim for 5 seconds
								remove blindness from the victim
								remove slowness from the victim
								remove weakness from the victim
								remove resistance from the victim
								remove mining fatigue from the victim
								clear {bleedoutState.%victim%}
								hide bossbar "bleedoutGUIBar.%victim's UUID%"
								destroy bossbar "bleedoutGUIBar.%victim's UUID%"
							else if {bleedoutState.%victim%} is 2:
								remove resistance from the victim
								remove slowness from the victim
								remove blindness from the victim
								remove mining fatigue from the victim
								remove weakness from the victim
								clear {bleedoutMobKillRevive.%victim%::*}
								send "<red><bold>You were unable to be saved..." to the victim
								hide bossbar "bleedoutGUIBar.%victim's UUID%"
								destroy bossbar "bleedoutGUIBar.%victim's UUID%"
								kill the victim
				else if {bleedoutState.%victim%} is 2:
					clear {bleedoutState.%victim%}
					clear {tangibilityState.%victim%}
					make victim execute command "/xp %victim% -%{_XPLoss}%l"
					subtract {_GoldLoss} from the victim's money
					send "<light red>Lost %{_XPLoss}% enchanting XP levels..." to the victim
					send "<light red>Lost %{_GoldLoss}% gold..." to the victim
					add 1 to {deaths.%victim%}
					#If difficulty > HARD, forfeit all level-up progress
					if {playerDifficulty.%victim%} is more than or equal to 4:
						set {classXP.%victim%} to 0
					if {traits.%victim%::Hoarder} is set:
						loop all items in the victim's inventory:
							chance of 5%:
								set loop-item to air						
					if {permadeath.%victim%} is true:
						#Permadeath drops all items on the ground
						loop all items in the victim's inventory:
							drop loop-item at the victim
							set loop-item to air
						strike lightning effect at the victim
						broadcast "<light red>%victim's tablist name% has died permanently!"
						set victim's gamemode to spectator
						send "<light red>You have died! This character has been permanently lost due to Permadeath mode. Start a new game with /char new." to the victim
						if {quotesToggle.%victim%} is true:
							make victim say {playerQuotes.%victim%::HardcoreDeath}
						loop all players in radius 50 of the victim:
							if {quotesToggle.%loop-player%} is true:
								if {party.%loop-player%} is {party.%victim%}:
									make loop-player say {playerQuotes.%loop-player%::AllyHardcoreDeath}
					else:
						if {quotesToggle.%victim%} is true:
							make victim say {playerQuotes.%victim%::Death}
						loop all players in radius 50 of the victim:
							if {quotesToggle.%loop-player%} is true:
								make loop-player say {playerQuotes.%loop-player%::AllyDeath}
			else:
				clear {tangibilityState.%victim%}
				make victim execute command "/xp %victim% -%{_XPLoss}%l"
				subtract {_GoldLoss} from the victim's money
				send "<light red>Lost %{_XPLoss}% enchanting XP levels..." to the victim
				send "<light red>Lost %{_GoldLoss}% gold..." to the victim
				if {permadeath.%victim%} is true:
					#Permadeath drops all items on the ground
					loop all items in the victim's inventory:
						drop loop-item at the victim
						set loop-item to air
					set victim's gamemode to spectator
					send "<light red>You have died! This character has been permanently lost due to Permadeath mode. Start a new game with /char new." to the victim
					if {quotesToggle.%victim%} is true:
						make victim say {playerQuotes.%victim%::HardcoreDeath}
					loop all players in radius 50 of the victim:
						if {quotesToggle.%loop-player%} is true:
							if {party.%loop-player%} is {party.%victim%}:
								make loop-player say {playerQuotes.%loop-player%::AllyHardcoreDeath}
				else:
					if {quotesToggle.%victim%} is true:
						make victim say {playerQuotes.%victim%::Death}
					loop all players in radius 50 of the victim:
						if {quotesToggle.%loop-player%} is true:
							make loop-player say {playerQuotes.%loop-player%::AllyDeath}
				
every 0.5 seconds:
	loop {t_statusEffectEntities::*}:
		if loop-value's health is less than or equal to 0.01:
			kill loop-value
			continue
		else:
			#CoS Poison DoT
			if changeOOCStatusTime(loop-value,"Poison",0) is more than 0:
				changeOOCStatusTime(loop-value,"Poison",0.5)
				send "%changeOOCStatusTime(loop-value,"Poison",0)%" to loop-value
				#if loop-value is player:
				#	if bossbar "poisonBar.%loop-value's uuid%" is not set:
				#		create bossbar titled "<light red>Poisoned!" and id "poisonBar.%loop-value's uuid%" for loop-value with progress 1 with colors red
				#		display bossbar "poisonBar.%loop-value's uuid%"
				#	#set bossbar "poisonBar.%loop-value's uuid%" progress to ((changeOOCStatusTime(loop-value,"Poison",0)) / 500)
				play 10 (green wool break with speed 1) at loop-value
				#Do not damage target if they are granted invincibility
				if {tangibilityState.%loop-value%} is not "GenericInvulnerable":
					applyRecoilDamage(loop-value,1)
					#add 0.5 to loop-value's health
			else if changeOOCStatusTime(loop-value,"Poison",0) is 0:
				changeOOCStatusTime(loop-value,"Poison",-1)
				#send "%loop-index%" to loop-value
				#send "%loop-value%" to loop-value
				clear {t_statusEffectEntities::%loop-index%}
				#if loop-value is player:
				#	hide bossbar "poisonBar.%loop-value's uuid%"
				#	destroy bossbar "poisonBar.%loop-value's uuid%"
			#Dazed
			if changeOOCStatusTime(loop-value,"Dazed",0) is more than 0:
				changeOOCStatusTime(loop-value,"Dazed",0.5)
				play 10 (gold block break with speed 1) at loop-value
				apply slowness 5 to the loop-value for 1 second
				apply weakness 5 to the loop-value for 1 second
			#Finishing Touch
			if changeOOCStatusTime(loop-value,"Finishing Touch",0) is more than 0:
				changeOOCStatusTime(loop-value,"Finishing Touch",0.5)
				play 10 (firework spark with speed 0) at loop-value
				play 10 (purple wool break with speed 1) at loop-value
			else if changeOOCStatusTime(loop-value,"Finishing Touch",0) is less than or equal to 0:
				play 10 (happy villager with speed 1) at loop-value
				heal loop-value by (loop-value's maximum health * 0.5)
				changeOOCStatusTime(loop-value,"Finishing Touch",-1)
				clear {t_statusEffectEntities::%loop-index%}
			#Planted Conc Grenade
			if changeOOCStatusTime(loop-value,"Planted Conc Grenade",0) is more than 0:
				changeOOCStatusTime(loop-value,"Planted Conc Grenade",0.5)
			else if changeOOCStatusTime(loop-value,"Planted Conc Grenade",0) is 0:
				set {_loc} to loop-value's location
				create safe explosion of force 1 at {_loc}
				play 15 (gold block break with speed 1) at {_loc}
				play 10 (smoke with speed 1) at {_loc}
				changeOOCStatusTime(loop-value,"Planted Conc Grenade",-1)
				clear {t_statusEffectEntities::%loop-index%}
				loop all entities in radius 10 of {_loc}:
					apply blindness 1 to loop-entity for 8 seconds
					apply slowness 3 to loop-entity for 10 seconds
					apply weakness 3 to loop-entity for 10 seconds			
		