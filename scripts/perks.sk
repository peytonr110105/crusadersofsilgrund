command /admin_setPerkTreeHonorXPRequirement <number> <number>:
	trigger:
		if arg 1 is 1:
			set {perksFirstHonorXPRequirement} to arg 2
		else if arg 1 is 2:
			set {perksSecondHonorXPRequirement} to arg 2
		else if arg 1 is 3:
			set {perksThirdHonorXPRequirement} to arg 2


command /grantskill <number> <text>:
	description: Grants a skill.
	usage: This should not be displayed
	trigger:
		if arg 1 is 1:
			if arg 2 is "unequipall":
				set {skillstotal.%player%} to 0
				set {skillslot1.%player%} to "Empty"
				set {skillslot2.%player%} to "Empty"
				set {skillslot3.%player%} to "Empty"
				set {skillslot4.%player%} to "Empty"
				set {skillslot5.%player%} to "Empty"
				set {skillslot6.%player%} to "Empty"
				set {skillslot7.%player%} to "Empty"
				set {skillslot8.%player%} to "Empty"
				set {skillslot9.%player%} to "Empty"
				set {skillslot10.%player%} to "Empty"
				send formatted "<bold>Unequipped all perks."
			else:
				clear {%arg 2%.%player%}
				send formatted "<bold>Cleared perk %arg 2%."
		else:
			set {perks.%player%::%arg 2%} to 1
			add 1 to {totalUnlockedPerks.%player%}
			send formatted "<bold>Learned Perk: %arg 2%."
			play sound "entity.player.levelup" with volume 1 and pitch 1.5 at player for player
			spawn a firework at the player
			show large smoke on the player
			show firework's spark on the player
			
command /grantspell <number> <text>:
	description: Grants a spell.
	usage: This should not be displayed
	trigger:
		if arg 1 is 1:
			if arg 2 is "resetall":
				clear {spells.%player%::*}
			else:
				clear {spells.%player%::%arg 2%}
				send formatted "<bold>Cleared spell %arg 2%."
		else:
			set {spells.%player%::%arg 2%} to 1
			set {spellsTotal.%player%} to 0
			loop {spells.%player%::*}:
				if {spells.%player%::%loop-index%} is 1:
					add 1 to {spellsTotal.%player%}
			send formatted "<bold>Learned Spell: %arg 2%."
			play sound "entity.player.levelup" with volume 1 and pitch 1.5 at player for player
			spawn a firework at the player
			show large smoke on the player
			show firework's spark on the player
			
command /mount:
	description: Summons a mount.
	usage: /mount
	aliases: /dismount
	trigger:
		set {_slot} to checkSlots(player,"Mount")
		if {_slot} is 1:
			spawn a horse at the player
			tame last spawned entity to the player
			make the last spawned entity wear a saddle
			wait 1 tick
			apply speed 3 to the last spawned entity for 999 days
			make the player ride the last spawned entity
			#Deep Bond
			set {_slot} to checkSlots(player,"Deep Bond")
			if {_slot} is 1:
				apply speed 5 to the last spawned entity for 999 days
				apply resistance 5 to the last spawned entity for 999 days
				set the last spawned entity's max health to the last spawned entity's maximum health * 3
				wait a tick
				heal the last spawned entity by last spawned entity's maximum health
		
command /perk [<number=0>] <text>:
	description: Equip perks.
	usage: /perk (slot) (perk name)
	aliases: /eqperk, /equipperk, /setperk
	executable by: players
	trigger:
		if arg 2 is not "DEBUG_POKE_PERKS":
			set {_slotCheck.%player%} to checkSlots(player,arg 2)
			if {_slotCheck.%player%} is 0:
				set {skillslot%arg 1%.%player%} to arg 2
				send formatted "Equipped %arg 2% in slot %arg 1%."
			else:
				send formatted "<red>You cannot equip the same perk in multiple slots."
		else if arg 2 is "Clear":
			set {skillslot%arg 1%.%player%} to "Empty"
			send formatted "Cleared slot %arg 1%."
		else if arg 1 is 0:
			send formatted "<bold>Your equipped perks:"
			send formatted "Perks Unlocked: %{skillstotal.%player%}%"
			send formatted "Perk Slot 1: %{skillslot1.%player%}%"
			send formatted "Perk Slot 2: %{skillslot2.%player%}%"
			send formatted "Perk Slot 3: %{skillslot3.%player%}%"
			send formatted "Perk Slot 4: %{skillslot4.%player%}%"
			send formatted "Perk Slot 5: %{skillslot5.%player%}%"
			send formatted "Perk Slot 6: %{skillslot6.%player%}%"
			send formatted "Perk Slot 7: %{skillslot7.%player%}%"
			send formatted "Perk Slot 8: %{skillslot8.%player%}%"
			send formatted "Perk Slot 9: %{skillslot9.%player%}%"
			send formatted "Perk Slot 10: %{skillslot10.%player%}%"
		#Devil Trigger Gauge
		#set {_LCKcheck} to checkSlots(player,Devil Trigger)
		#if {_LCKcheck} is 1:
		#	create bossbar titled "<light red>Devil Trigger" and id "dt.%player's uuid%" for player with progress 0 with colors red
		#	display bossbar "dt.%player's uuid%"
		#else:
		#	hide bossbar "dt.%player's uuid%"
		#	destroy bossbar "dt.%player's uuid%"
		#Dragon Soul Gauges
		#Gale Soul
		#set {_LCKcheck} to checkSlots(player,"Gale Soul")
		#if {_LCKcheck} is 1:
		#	create bossbar titled "<light green>Gale Soul" and id "dsoul.%player's uuid%" for player with progress 0 with colors green
		#	display bossbar "dsoul.%player's uuid%"
		#else:
		#	#Flame Soul
		#	set {_LCKcheck} to checkSlots(player,"Flame Soul")
		#	if {_LCKcheck} is 1:
		#		create bossbar titled "<orange>Flame Soul" and id "dsoul.%player's uuid%" for player with progress 0 with colors red
		#		display bossbar "dsoul.%player's uuid%"
		#	else:
		#		#Aqua Soul
		#		set {_LCKcheck} to checkSlots(player,"Aqua Soul")
		#		if {_LCKcheck} is 1:
		#			create bossbar titled "<light blue>Aqua Soul" and id "dsoul.%player's uuid%" for player with progress 0 with colors blue
		#			display bossbar "dsoul.%player's uuid%"
		#		else:
		#			hide bossbar "dsoul.%player's uuid%"
		#			destroy bossbar "dsoul.%player's uuid%"
		#HP +5
		if checkSlots(player,"HP +5") is 1:
			if {activeBuffs.hp.%player%::HP +5 (Perk)} is not set:
				set {_debug} to changeEntityStatBuff(player,"HP",5,"HP +5 (Perk)",0)
		else if {activeBuffs.hp.%player%::HP +5 (Perk)} is set:
			set {_debug} to changeEntityStatBuff(player,"HP",-5,"HP +5 (Perk)",0)
		#STR +3
		if checkSlots(player,"STR +3") is 1:
			if {activeBuffs.str.%player%::STR +3 (Perk)} is not set:
				set {_debug} to changeEntityStatBuff(player,"STR",3,"STR +3 (Perk)",0)
		else if {activeBuffs.str.%player%::STR +3 (Perk)} is set:
			set {_debug} to changeEntityStatBuff(player,"STR",-3,"STR +3 (Perk)",0)
		#DEF +3
		if checkSlots(player,"DEF +3") is 1:
			if {activeBuffs.def.%player%::DEF +3 (Perk)} is not set:
				set {_debug} to changeEntityStatBuff(player,"DEF",3,"DEF +3 (Perk)",0)
		else if {activeBuffs.def.%player%::DEF +3 (Perk)} is set:
			set {_debug} to changeEntityStatBuff(player,"DEF",-3,"DEF +3 (Perk)",0)
		#RES +3
		if checkSlots(player,"RES +3") is 1:
			if {activeBuffs.RES.%player%::RES +3 (Perk)} is not set:
				set {_debug} to changeEntityStatBuff(player,"RES",3,"RES +3 (Perk)",0)
		else if {activeBuffs.RES.%player%::RES +3 (Perk)} is set:
			set {_debug} to changeEntityStatBuff(player,"RES",-3,"RES +3 (Perk)",0)
		#LCK +3
		if checkSlots(player,"LCK +3") is 1:
			if {activeBuffs.LCK.%player%::LCK +3 (Perk)} is not set:
				set {_debug} to changeEntityStatBuff(player,"LCK",3,"LCK +3 (Perk)",0)
		else if {activeBuffs.LCK.%player%::LCK +3 (Perk)} is set:
			set {_debug} to changeEntityStatBuff(player,"LCK",-3,"LCK +3 (Perk)",0)
		#SPD +3
		if checkSlots(player,"SPD +3") is 1:
			if {activeBuffs.SPD.%player%::SPD +3 (Perk)} is not set:
				set {_debug} to changeEntityStatBuff(player,"SPD",3,"SPD +3 (Perk)",0)
		else if {activeBuffs.SPD.%player%::SPD +3 (Perk)} is set:
			set {_debug} to changeEntityStatBuff(player,"SPD",-3,"SPD +3 (Perk)",0)
		#MAG +3
		if checkSlots(player,"MAG +3") is 1:
			if {activeBuffs.MAG.%player%::MAG +3 (Perk)} is not set:
				set {_debug} to changeEntityStatBuff(player,"MAG",3,"MAG +3 (Perk)",0)
		else if {activeBuffs.MAG.%player%::MAG +3 (Perk)} is set:
			set {_debug} to changeEntityStatBuff(player,"MAG",-3,"MAG +3 (Perk)",0)
		#CHR +7
		if checkSlots(player,"CHR +7") is 1:
			if {activeBuffs.CHR.%player%::CHR +7 (Perk)} is not set:
				set {_debug} to changeEntityStatBuff(player,"CHR",7,"CHR +7 (Perk)",0)
		else if {activeBuffs.CHR.%player%::CHR +7 (Perk)} is set:
			set {_debug} to changeEntityStatBuff(player,"CHR",-7,"CHR +7 (Perk)",0)
		#Renown
		if checkSlots(player,"Renown") is 1:
			if {activeBuffs.CHR.%player%::Renown (Perk)} is not set:
				set {_debug} to changeEntityStatBuff(player,"CHR",20,"Renown (Perk)",0)
		else if {activeBuffs.CHR.%player%::Renown (Perk)} is set:
			set {_debug} to changeEntityStatBuff(player,"CHR",-20,"Renown (Perk)",0)
		#Fierce Posture
		if checkSlots(player,"Fierce Posture") is 1:
			if {activeBuffs.str.%player%::Fierce Posture (Perk)} is not set:
				set {_debug} to changeEntityStatBuff(player,"STR",6,"Fierce Posture (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"SPD",6,"Fierce Posture (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"MAG",6,"Fierce Posture (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"DEF",-6,"Fierce Posture (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"RES",-6,"Fierce Posture (Perk)",0)
		else if {activeBuffs.str.%player%::Fierce Posture (Perk)} is set:
			set {_debug} to changeEntityStatBuff(player,"STR",-6,"Fierce Posture (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"SPD",-6,"Fierce Posture (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"MAG",-6,"Fierce Posture (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"DEF",6,"Fierce Posture (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"RES",6,"Fierce Posture (Perk)",0)
		#Steady Posture
		if checkSlots(player,"Steady Posture") is 1:
			if {activeBuffs.def.%player%::Steady Posture (Perk)} is not set:
				set {_debug} to changeEntityStatBuff(player,"STR",-6,"Steady Posture (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"SPD",-6,"Steady Posture (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"MAG",-6,"Steady Posture (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"DEF",6,"Steady Posture (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"RES",6,"Steady Posture (Perk)",0)
		else if {activeBuffs.def.%player%::Steady Posture (Perk)} is set:
			set {_debug} to changeEntityStatBuff(player,"STR",6,"Steady Posture (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"SPD",6,"Steady Posture (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"MAG",6,"Steady Posture (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"DEF",-6,"Steady Posture (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"RES",-6,"Steady Posture (Perk)",0)
		#Life or Death
		if checkSlots(player,"Life or Death") is 1:
			if {activeBuffs.str.%player%::Life or Death (Perk)} is not set:
				set {_debug} to changeEntityStatBuff(player,"STR",7,"Life or Death (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"SPD",7,"Life or Death (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"LCK",7,"Life or Death (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"DEF",-5,"Life or Death (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"RES",-5,"Life or Death (Perk)",0)
		else if {activeBuffs.str.%player%::Life or Death (Perk)} is set:
			set {_debug} to changeEntityStatBuff(player,"STR",-7,"Life or Death (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"SPD",-7,"Life or Death (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"LCK",-7,"Life or Death (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"DEF",5,"Life or Death (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"RES",5,"Life or Death (Perk)",0)
		#Gamble
		if checkSlots(player,"Gamble") is 1:
			if {activeBuffs.str.%player%::Gamble (Perk)} is not set:
				set {_debug} to changeEntityStatBuff(player,"STR",12,"Gamble (Perk)",0)
		else if {activeBuffs.str.%player%::Gamble (Perk)} is set:
			set {_debug} to changeEntityStatBuff(player,"STR",-12,"Gamble (Perk)",0)
		#Ascended Magic
		if checkSlots(player,"Ascended Magic") is 1:
			if {activeBuffs.mag.%player%::Ascended Magic (Perk)} is not set:
				set {_debug} to changeEntityStatBuff(player,"MAG",9,"Ascended Magic (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"RES",6,"Ascended Magic (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"LCK",6,"Ascended Magic (Perk)",0)
				add 100 to {abilities.%player%::Magical Weapons}
		else if {activeBuffs.mag.%player%::Ascended Magic (Perk)} is set:
			set {_debug} to changeEntityStatBuff(player,"MAG",-9,"Ascended Magic (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"RES",-6,"Ascended Magic (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"LCK",-6,"Ascended Magic (Perk)",0)
			subtract 100 from {abilities.%player%::Magical Weapons}
		#Lord's Blood
		if checkSlots(player,"Lord's Blood") is 1:
			if {activeBuffs.hp.%player%::Lord's Blood (Perk)} is not set:
				set {_debug} to changeEntityStatBuff(player,"HP",10,"Lord's Blood (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"STR",5,"Lord's Blood (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"LCK",5,"Lord's Blood (Perk)",0)
				add 100 to {abilities.%player%::Traditional Weapons}
		else if {activeBuffs.hp.%player%::Lord's Blood (Perk)} is set:
			set {_debug} to changeEntityStatBuff(player,"HP",-10,"Lord's Blood (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"STR",-5,"Lord's Blood (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"LCK",-5,"Lord's Blood (Perk)",0)
			subtract 100 from {abilities.%player%::Traditional Weapons}
		#Skim the Books
		if checkSlots(player,"Skim the Books") is 1:
			if {activeBuffs.traditional_weapons.%player%::Skim the Books (Perk)} is not set:
				add 20 to {abilities.%player%::Traditional Weapons}
				set {activeBuffs.traditional_weapons.%player%::Skim the Books (Perk)} to 20
		else if {activeBuffs.traditional_weapons.%player%::Skim the Books (Perk)} is set:
			subtract 20 from {abilities.%player%::Traditional Weapons}
			clear {activeBuffs.traditional_weapons.%player%::Skim the Books (Perk)}
		#Locktouch
		if checkSlots(player,"Locktouch") is 1:
			if {activeBuffs.lockpicking.%player%::Locktouch (Perk)} is not set:
				add 35 to {abilities.%player%::Lockpicking}
				set {activeBuffs.lockpicking.%player%::Locktouch (Perk)} to 35
		else if {activeBuffs.traditional_weapons.%player%::Locktouch (Perk)} is set:
			subtract 35 from {abilities.%player%::Lockpicking}
			clear {activeBuffs.lockpicking.%player%::Locktouch (Perk)}
		#Secret Training
		if checkSlots(player,"Secret Training") is 1:
			if {activeBuffs.traditional_weapons.%player%::Secret Training (Perk)} is not set:
				add 20 to {abilities.%player%::Traditional Weapons}
				add 20 to {abilities.%player%::Magical Weapons}
				add 20 to {abilities.%player%::Guns}
				set {activeBuffs.traditional_weapons.%player%::Secret Training (Perk)} to 13
		else if {activeBuffs.traditional_weapons.%player%::Secret Training (Perk)} is set:
			subtract 20 from {abilities.%player%::Traditional Weapons}
			subtract 20 from {abilities.%player%::Magical Weapons}
			subtract 20 from {abilities.%player%::Guns}
			clear {activeBuffs.traditional_weapons.%player%::Secret Training (Perk)}
		#Under This Banner
		if checkSlots(player,"Under This Banner") is 1:
			if {activeBuffs.CHR.%player%::Under This Banner (Perk)} is not set:
				set {_debug} to changeEntityStatBuff(player,"CHR",7,"Under This Banner (Perk)",0)
		else if {activeBuffs.CHR.%player%::Under This Banner (Perk)} is set:
			set {_debug} to changeEntityStatBuff(player,"CHR",-7,"Under This Banner (Perk)",0)
		#Spectrum +4
		if checkSlots(player,"Spectrum +4") is 1:
			if {activeBuffs.STR.%player%::Spectrum +4 (Perk)} is not set:
				set {_debug} to changeEntityStatBuff(player,"STR",4,"Spectrum +4 (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"MAG",4,"Spectrum +4 (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"SPD",4,"Spectrum +4 (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"LCK",4,"Spectrum +4 (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"CHR",4,"Spectrum +4 (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"DEF",4,"Spectrum +4 (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"RES",4,"Spectrum +4 (Perk)",0)
		else if {activeBuffs.STR.%player%::Spectrum +4 (Perk)} is set:
			set {_debug} to changeEntityStatBuff(player,"STR",-4,"Spectrum +4 (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"MAG",-4,"Spectrum +4 (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"SPD",-4,"Spectrum +4 (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"LCK",-4,"Spectrum +4 (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"CHR",-4,"Spectrum +4 (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"DEF",-4,"Spectrum +4 (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"RES",-4,"Spectrum +4 (Perk)",0)
		#Optimism
		if checkSlots(player,"Optimism") is 1:
			if {activeBuffs.lck.%player%::Optimism (Perk)} is not set:
				set {_debug} to changeEntityStatBuff(player,"LCK",6,"Optimism (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"SpecialAcceleration",10,"Optimism (Perk)",0)
				changeEntityStatBuff(player,"STR",-4,"Optimism (Perk)",0)
				changeEntityStatBuff(player,"MAG",-4,"Optimism (Perk)",0)
		else if {activeBuffs.lck.%player%::Optimism (Perk)} is set:
			set {_debug} to changeEntityStatBuff(player,"LCK",-6,"Optimism (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"SpecialAcceleration",-10,"Optimism (Perk)",0)
			changeEntityStatBuff(player,"STR",4,"Optimism (Perk)",0)
			changeEntityStatBuff(player,"MAG",4,"Optimism (Perk)",0)
		#Pessimism
		if checkSlots(player,"Pessimism") is 1:
			if {activeBuffs.lck.%player%::Pessimism (Perk)} is not set:
				set {_debug} to changeEntityStatBuff(player,"STR",6,"Pessimism (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"MAG",6,"Pessimism (Perk)",0)
				set {_debug} to changeEntityStatBuff(player,"LCK",-12,"Pessimism (Perk)",0)
		else if {activeBuffs.lck.%player%::Pessimism (Perk)} is set:
			set {_debug} to changeEntityStatBuff(player,"STR",-6,"Pessimism (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"MAG",-6,"Pessimism (Perk)",0)
			set {_debug} to changeEntityStatBuff(player,"LCK",12,"Pessimism (Perk)",0)	
		#Combo System - maybe bring this back to let other classes access the combo system?
		#set {_LCKcheck} to checkSlots(player,"Combo System")
		#if {_LCKcheck} is 1:
		#	if {combosenabled.%player%} is not 1:
		#		make player execute command "/combo enable"
		#else:
		#	if {combosenabled.%player%} is 1:
		#		make player execute command "/combo disable"
		#Dragon Soul gagues
		set {_LCKcheck} to checkSlots(player,"Gale Soul")
		if {_LCKcheck} is 1:
			create bossbar titled "<light green>Gale Soul" and id "dsoul.%player's uuid%" for player with progress 0 with colors green
			display bossbar "dsoul.%player's uuid%"
			set {dragonSoulMeter.%player%} to 0
			set {dragonSoulMeterCap} to {lvl.%player%} * 15
			set bossbar "dsoul.%player's uuid%" progress to {dragonSoulMeter.%player%} / {dragonSoulMeterCap.%player%} * 100
		else:
			#Flame Soul
			set {_LCKcheck} to checkSlots(player,"Flame Soul")
			if {_LCKcheck} is 1:
				create bossbar titled "<orange>Flame Soul" and id "dsoul.%player's uuid%" for player with progress 0 with colors red
				display bossbar "dsoul.%player's uuid%"
				set {dragonSoulMeter.%player%} to 0
				set {dragonSoulMeterCap} to {lvl.%player%} * 15
				set bossbar "dsoul.%player's uuid%" progress to {dragonSoulMeter.%player%} / {dragonSoulMeterCap.%player%} * 100
			else:
				#Aqua Soul
				set {_LCKcheck} to checkSlots(player,"Aqua Soul")
				if {_LCKcheck} is 1:
					create bossbar titled "<light blue>Aqua Soul" and id "dsoul.%player's uuid%" for player with progress 0 with colors blue
					display bossbar "dsoul.%player's uuid%"
					set {dragonSoulMeter.%player%} to 0
					set {dragonSoulMeterCap} to {lvl.%player%} * 15
					set bossbar "dsoul.%player's uuid%" progress to {dragonSoulMeter.%player%} / {dragonSoulMeterCap.%player%} * 100
				else:
					hide bossbar "dsoul.%player's uuid%"
					destroy bossbar "dsoul.%player's uuid%"

#Perk Effects Start Here

on mine:
	#Scavenger
	add 1 to {blocksmined.%player%}
	set {_perk} to checkSlots(player,"Oretouch")
	if {_perk} is 1:
		if event-block is any ore:
			chance of (({lck.%player%} + {lckbuff.%player%} + 10) / 2)%:
				drop event-block at the player
			chance of (({lck.%player%} + {lckbuff.%player%} + 10) / 2)%:
				set {_abilityBonus} to (10 + (floor({abilities.%player%::Fabrication} * 0.25)))
				if {_abilityBonus} is more than 50:
					set {_abilityBonus} to 50
				wait 1 tick
				set {_drops::*} to dropped items in radius 1.25 of the event-block
				loop {_drops::*}:
					set {_itemtype} to "%loop-value%"
					set {_dropParsing::*} to {_itemtype} split at "dropped "
					set {_item} to "1 %{_dropParsing::2}%" parsed as item type
					drop {_item} at event-location
					chance of {_abilityBonus}%:
						drop {_item} at event-location
	#Gold Digger
	set {_perk} to checkSlots(player,"Gold Digger")
	if {_perk} is 1:
		if event-block is any ore:
			set {_abilityBonus} to (10 + (floor({abilities.%player%::Fabrication} * 0.25)))
			if {_abilityBonus} is more than 50:
				set {_abilityBonus} to 50
			wait 1 tick
			set {_drops::*} to dropped items in radius 1.25 of the event-block
			loop {_drops::*}:
				set {_itemtype} to "%loop-value%"
				set {_dropParsing::*} to {_itemtype} split at "dropped "
				set {_item} to "1 %{_dropParsing::2}%" parsed as item type
				drop {_item} at event-location
				chance of {_abilityBonus}%:
					drop {_item} at event-location
	#Haste
	if {perks.%player%::Haste} is not 1:
		if {blocksmined.%player%} is more than 749:
			make player execute command "/grantskill 0 Haste"
		
#Odd Recovery
every 3 seconds:
	loop all players:
		if checkSlots(loop-player,"Odd Recovery") is 1:
			loop all players in radius 30 of the loop-player:
				if {party.%loop-player-2%} is {party.%loop-player-1%}:
					heal loop-player-2 by 1.5 hearts
					remove weakness from the loop-player-2
					remove slowness from the loop-player-2
					remove poison from the loop-player-2
					remove wither from the loop-player-2
		if checkSlots(loop-player,"Dancing Blade") is 1:
			loop all players in radius 30 of the loop-player:
				if {party.%loop-player-2%} is {party.%loop-player-1%}:
					apply strength 2 to the loop-player-2 for 3 seconds
					apply swiftness 2 to the loop-player-2 for 3 seconds
					apply strength 2 to the loop-player-1 for 3 seconds
					apply swiftness 2 to the loop-player-1 for 3 seconds
		if checkSlots(loop-player,"Live to Serve") is 1:
			loop all players in radius 30 of the loop-player:
				if {party.%loop-player-2%} is {party.%loop-player-1%}:
					heal loop-player-2 by 0.5 hearts
		if checkSlots(loop-player,"Concentration") is 1:
			if {t_concentration.%loop-player%} is less than 1.3:
				add 0.05 to {t_concentration.%loop-player%}
				if {t_concentration.%loop-player%} is more than or equal to 1.3:
					send "<light blue>You're fully focused." to loop-player
					play 20 (diamond block break with speed 1) at loop-player
					play sound "entity.zombie_villager.cure" with volume 0.25 and pitch 1.5 at loop-player
		if loop-player is alive:
			#Haste:
			set {_LCKcheck.%loop-player%} to checkSlots(loop-player,"Haste")
			if {_LCKcheck.%loop-player%} is 1:
				apply haste 2 to loop-player for 3 seconds
			#High Jumper:
			set {_LCKcheck.%loop-player%} to checkSlots(loop-player,"High Jumper")
			if {_LCKcheck.%loop-player%} is 1:
				apply jump boost 2 to loop-player for 3 seconds
			#Efficiency
			set {_LCKcheck} to checkSlots(loop-player,"Efficiency")
			if {_LCKcheck} is 1:
				apply swiftness 2 to loop-player for 3 seconds
				apply haste 2 to loop-player for 3 seconds
			#Built to Destroy Trait
			if {traits.%loop-player%::Built to Destroy} is true:
				apply strength 2 to loop-player for 3 seconds
				apply haste 2 to loop-player for 3 seconds
			#Blade Sponge [Trait]
			if {traits.%loop-player%::Blade Sponge} is true:
				apply regeneration 2 to loop-player for 3 seconds

#Craftsmanship
on craft:
	#Very, VERY tiny XP bonus for crafting
	addClassXP(player,1 + {lvl.%player%})
	send formatted "<light yellow>[Crafting] +%1 + {lvl.%player%}% EXP" to the player
	set {_perk} to checkSlots(player,"Craftsmanship")
	if {_perk} is 1:
		set {_xp} to ceil(player's level ^ 0.25)
		make console execute command "/xp %{_xp}% %player%"
		send formatted "<light green>Gained a bonus %{_xp}% experience from Craftsmanship!" to the player
	#Super Smelter
	if event-item is furnace:
		if checkSlots(player,"Super Smelter") is 1:
			give 1 furnace of efficiency 5, unbreaking 3, fortune 3 named "<gold>Super Smelter" to the player
		
#Bottomless Stomache
on food bar change:
	if checkSlots(player,"Bottomless Stomache") is 1:
		chance of 50%:
			add 0.5 to the player's food level
		set {t_currentFoodLevel.%player%} to the player's food level
	
#Bottomless Stomache healing	
on consume:
	if checkSlots(player,"Bottomless Stomache") is 1:
		set {_regenAmount} to the player's food level - {t_currentFoodLevel.%player%}
		heal the player by {_regenAmount}
	if checkSlots(player,"Flask of Madness") is 1:
		if event-item is potion:
			chance of 25%:
				apply strength 3 to the player for 30 seconds
			else:
				chance of 25%:
					apply swiftness 3 to the player for 30 seconds
				else:
					chance of 25%:
						apply resistance 3 to the player for 30 seconds
					else:
						apply regeneration 3 to the player for 30 seconds
		
#Shadow Walker disable
on sneak toggle:
	if {ShadowWalkerArmourStorage.%player%::Helmet} is set:
		remove invisibility from the player
		set the player's helmet to {ShadowWalkerArmourStorage.%player%::Helmet}
		set the player's chestplate to {ShadowWalkerArmourStorage.%player%::Chestplate}
		set the player's leggings to {ShadowWalkerArmourStorage.%player%::Leggings}
		set the player's boots to {ShadowWalkerArmourStorage.%player%::Boots}
		send formatted "<purple><italics>Returning to the light..." to the player
		clear {ShadowWalkerArmourStorage.%player%::*}
		
on right click:
	#Dragon Soul Perks
	if player is sneaking:
		if isEntityToolAir(player) is true:
			if {dragonSoulActive.%player%} is not set:
				if {dragonSoulMeter.%player%} is more than 10:
					#Gale Soul
					set {_LCKcheck} to checkSlots(player,"Gale Soul")
					if {_LCKcheck} is 1:
						play sound "entity.enderdragon.flap" with volume 0.6 and pitch 0.6 at the player
						play 20 (emerald block break with speed 1) at the player
						set {_soulType} to 0
					else:
						#Flame Soul
						set {_LCKcheck} to checkSlots(player,"Flame Soul")
						if {_LCKcheck} is 1:
							play sound "block.fire.ambient" with volume 1 and pitch 0.6 at the player
							play mob spawner flames at the player
							set {_soulType} to 1
						else:
							#Aqua Soul
							set {_LCKcheck} to checkSlots(player,"Aqua Soul")
							if {_LCKcheck} is 1:
								play sound "entity.generic.splash" with volume 1 and pitch 0.6 at the player
								play 10 (water splash with speed 1) at the player
								set {_soulType} to 2
					if {_soulType} is set:
						set {dragonSoulActive.%player%} to true
						play sound "entity.enderdragon.growl" with volume 0.5 and pitch 1 at the player
						clear {t_blockMeterAnnoyance.%player%}
						play large explosion at the player
						if {_soulType} is 0:
							set {_debug} to changeEntityStatBuff(player,"STR",6,"Gale Soul (Perk)",0)
							set {_debug} to changeEntityStatBuff(player,"MAG",6,"Gale Soul (Perk)",0)
							set {_debug} to changeEntityStatBuff(player,"SPD",14,"Gale Soul (Perk)",0)
							set {_debug} to changeEntityStatBuff(player,"LCK",14,"Gale Soul (Perk)",0)
							send "<light red>You spread your wings and transform into your Wind Dragon form."
						else if {_soulType} is 1:
							set {_debug} to changeEntityStatBuff(player,"STR",14,"Flame Soul (Perk)",0)
							set {_debug} to changeEntityStatBuff(player,"MAG",14,"Flame Soul (Perk)",0)
							set {_debug} to changeEntityStatBuff(player,"SPD",6,"Flame Soul (Perk)",0)
							set {_debug} to changeEntityStatBuff(player,"LCK",6,"Flame Soul (Perk)",0)
							send "<light red>You kindle your flame and transform into your Flame Dragon form."							
						else if {_soulType} is 2:
							set {_debug} to changeEntityStatBuff(player,"DEF",14,"Aqua Soul (Perk)",0)
							set {_debug} to changeEntityStatBuff(player,"RES",14,"Aqua Soul (Perk)",0)
							set {_debug} to changeEntityStatBuff(player,"SPD",6,"Aqua Soul (Perk)",0)
							set {_debug} to changeEntityStatBuff(player,"LCK",6,"Aqua Soul (Perk)",0)
							send "<light red>You calm your heart and transform into your Water Dragon form."
						#DSoul Meter Depletion
						while {dragonSoulMeter.%player%} is more than 0:
							if {_soulType} is 0:
								play 10 (emerald block break with speed 1) at the player
							else if {_soulType} is 1:					
								play mob spawner flames at the player
							else if {_soulType} is 2:
								play 10 (water splash with speed 1) at the player
							heal the player by 0.5
							set player's flight state to true
							wait 0.5 seconds
							subtract 5 from {dragonSoulMeter.%player%}
							set {_dtMeterDisplay} to {dtMeter.%player%} / {dtMeterCap.%player%} * 100
							set bossbar "dt.%player's uuid%" progress to {_dtMeterDisplay}
							if {dragonSoulActive.%player%} is not set:
								exit 1 loop
						if {_soulType} is 0:
							set {_debug} to changeEntityStatBuff(player,"STR",-6,"Gale Soul (Perk)",0)
							set {_debug} to changeEntityStatBuff(player,"MAG",-6,"Gale Soul (Perk)",0)
							set {_debug} to changeEntityStatBuff(player,"SPD",-14,"Gale Soul (Perk)",0)
							set {_debug} to changeEntityStatBuff(player,"LCK",-14,"Gale Soul (Perk)",0)
							play 20 (emerald block break with speed 1) at the player
						else if {_soulType} is 1:
							set {_debug} to changeEntityStatBuff(player,"STR",-14,"Flame Soul (Perk)",0)
							set {_debug} to changeEntityStatBuff(player,"MAG",-14,"Flame Soul (Perk)",0)
							set {_debug} to changeEntityStatBuff(player,"SPD",-6,"Flame Soul (Perk)",0)
							set {_debug} to changeEntityStatBuff(player,"LCK",-6,"Flame Soul (Perk)",0)
							play mob spawner flames at the player							
						else if {_soulType} is 2:
							set {_debug} to changeEntityStatBuff(player,"DEF",-14,"Aqua Soul (Perk)",0)
							set {_debug} to changeEntityStatBuff(player,"RES",-14,"Aqua Soul (Perk)",0)
							set {_debug} to changeEntityStatBuff(player,"SPD",-6,"Aqua Soul (Perk)",0)
							set {_debug} to changeEntityStatBuff(player,"LCK",-6,"Aqua Soul (Perk)",0)
							play 10 (water splash with speed 1) at the player
						play sound "entity.generic.explode" with volume 1 and pitch 1 at the player
						play sound "entity.enderdragon.growl" with volume 0.5 and pitch 0.2 at the player
						play large explosion at the player
						clear {dragonSoulActive.%player%}
						set player's flight state to false
						send "<light red>You revert back to human form."
				else:
					clear {dtActive.%player%}
					play 20 (redstone block break with speed 1) at the player
	#Shadow Walker
	if checkSlots(player,"Shadow Walker") is 1:
		if player is sneaking:
			apply invisibility 1 to the player for 1 day
			set {ShadowWalkerArmourStorage.%player%::Helmet} to the player's helmet
			set {ShadowWalkerArmourStorage.%player%::Chestplate} to the player's chestplate
			set {ShadowWalkerArmourStorage.%player%::Leggings} to the player's leggings
			set {ShadowWalkerArmourStorage.%player%::Boots} to the player's boots
			wait 1 tick
			set the player's helmet to air
			set the player's chestplate to air
			set the player's leggings to air
			set the player's boots to air
			play sound "entity.blaze.shoot" with volume 1 and pitch 0.5 at the player for the player
			play 30 (black wool break with speed 1) at the player
			send formatted "<purple><italics>Going dark..." to the player
	#Royal Fork
	if checkSlots(player,"Royal Fork") is 1:
		if player is sneaking:
			if player is not on ground:
				if isEntityToolAir(player) is true:
					if {t_royalForkCD.%player%} is not set:
						loop all monsters in radius 10 of the player:
							set {t_royalForkCD.%player%} to 10
							make the player shoot an arrow with speed 2
							push the last shot projectile in direction of the loop-monster at speed 2
							set metadata value "isMirageBolt" of the last shot projectile to 1
	#Block whitelist
	set {_targetBlock} to "%clicked block%"
	if {_targetBlock} contains "wheat plant":
		set {_toolOK} to 1
	else if {_targetBlock} contains "pumpkin stem":
		set {_toolOK} to 1
	else if {_targetBlock} contains "beetroot plant":
		set {_toolOK} to 1
	else if {_targetBlock} contains "potato plant":
		set {_toolOK} to 1
	else if {_targetBlock} contains "melon stem":
		set {_toolOK} to 1
	else if {_targetBlock} contains "carrot plant":
		set {_toolOK} to 1
	if {_toolOK} is 1:
		#Super Fertilizer
		if checkSlots(player,"Super Fertilizer") is 1:
			if player's tool is bone meal:
				if {_targetBlock} contains "wheat plant":
					set the clicked block to fully grown wheat plant
				else if {_targetBlock} contains "pumpkin stem":
					set the clicked block to fully grown pumpkin stem
				else if {_targetBlock} contains "beetroot plant":
					set the clicked block to fully grown beetroot plant
				else if {_targetBlock} contains "potato plant":
					set the clicked block to fully grown potato plant
				else if {_targetBlock} contains "melon stem":
					set the clicked block to fully grown melon stem
				else if {_targetBlock} contains "carrot plant":
					set the clicked block to fully grown carrot plant
		#Lush Farming
		if checkSlots(player,"Lush Farming") is 1:
			if player's tool is bone meal:
				loop all blocks in radius 5 of the clicked block:
					set {_toolOK} to 0
					set {_targetBlock} to "%loop-block%"
					#Block whitelist (again, fuck skript's aliases dude)
					if {_targetBlock} contains "wheat plant":
						set {_toolOK} to 1
					else if {_targetBlock} contains "pumpkin stem":
						set {_toolOK} to 1
					else if {_targetBlock} contains "beetroot plant":
						set {_toolOK} to 1
					else if {_targetBlock} contains "potato plant":
						set {_toolOK} to 1
					else if {_targetBlock} contains "melon stem":
						set {_toolOK} to 1
					else if {_targetBlock} contains "carrot plant":
						set {_toolOK} to 1
					if {_toolOK} is 1:
						if checkSlots(player,"Super Fertilizer") is 1:
							if {_targetBlock} contains "wheat plant":
								set the loop-block to fully grown wheat plant
							else if {_targetBlock} contains "pumpkin stem":
								set the loop-block to fully grown pumpkin stem
							else if {_targetBlock} contains "beetroot plant":
								set the loop-block to fully grown beetroot plant
							else if {_targetBlock} contains "potato plant":
								set the loop-block to fully grown potato plant
							else if {_targetBlock} contains "melon stem":
								set the loop-block to fully grown melon stem
							else if {_targetBlock} contains "carrot plant":
								set the loop-block to fully grown carrot plant
						else:
							if data value of loop-block is not 7:
								if data value of loop-block is less than 5:
									set {_rng} to a random integer from 1 to 3
									add {_rng} to data value of loop-block
								else:
									add 1 to data value of loop-block
	if clicked block is not air:
		if the 4th line of the lore of the player's tool is "<light green><bold>Assist - Acrobatics":
			set {_ledgeGrab} to 1
		else:
			set {_ledgeGrab} to checkSlots(player,"Acrobatics")
		if {_ledgeGrab} is 1:
			if player's tool is a block:
				set {_ledgeGrab} to 0
			if isEntityToolAir(player) is true:
				set {_ledgeGrab} to 1
			else:
				set {_ledgeGrab} to 0
			if clicked block is coal block:
				set {_ledgeGrab} to 0
			if player's tool is any horse armor:
				set {_ledgeGrab} to 0
		if {_ledgeGrab} is 1:
			set {_loc} to event-block's location
			#send "%{_loc}%" to the player
			#send "%y location of event-block%" to the player
			if y location of the player is less than or equal to y location of event-block + 0.5:
				#send "ledge grab?" to the player
				if distance between player and event-block is less than or equal to 3.75:
					#send "distance check passed" to the player
					if block at location at x location of the player, y location of the player + 2, z location of the player is air:
						#send "first ledge check passed"
						if block at location at x location of the player, y location of the player + 3, z location of the player is air:
							#send "second ledge check passed"
							if block at location at x location of the player, y location of the player + 4, z location of the player is air:
								#send "third ledge check passed"
								if block at location at (x-coordinate of event-block, y-coordinate of event-block + 1, z-coordinate of event-block) is air:
									if block at location at (x-coordinate of event-block, y-coordinate of event-block + 2, z-coordinate of event-block) is air:
										teleport the player to location at (x-coordinate of event-block, y-coordinate of event-block + 1, z-coordinate of event-block)
								else if isEntityToolAir(player) is true:
									push the player upwards at speed 0.3
									push the player in horizontal direction of the player at speed 0.5
	#Wings of Mercy (Perk)
	if checkSlots(player,"Wings of Mercy") is 1:
		if player is sneaking:
			loop {%{party.%player%}%.members::*}:
				if loop-value is online:
					if loop-value's health is less than or equal to (loop-value's maximum health * 0.5):
						if loop-value is not the player:
							teleport the player to loop-value
							send formatted "<light blue>%player% has arrived via Wings of Mercy!" to the loop-value
							send formatted "<light blue>Warped to %loop-value% via Wings of Mercy!" to the player
							exit 1 loop
					else if {bleedoutState.%loop-value%} is 1:
						if loop-value is not the player:
							teleport the player to loop-value
							send formatted "<light blue>%player% has arrived via Wings of Mercy!" to the loop-value
							send formatted "<light blue>Warped to %loop-value% via Wings of Mercy!" to the player					
							exit 1 loop
	#Acrobatics wall cling
	if clicked block is set:
		if the 4th line of the lore of the player's tool is "<light green><bold>Assist - Acrobatics":
			set {_isStylish} to 1
		else:
			set {_isStylish} to checkSlots(player,"Acrobatics")
		if {_isStylish} is 1:
			if player is not on ground:
				if player is sneaking:
					if {WallClingActive.%player%} is not set:
						if clicked block is not coal block:
							if player's tool is not any horse armor:
								play 20 (stone block break with speed 1) at the target
								play sound "block.stone.break" with volume 1 and pitch 1 at the player
								#Halt vertical momentum
								set y of player's velocity to 0
								set {WallKickReady.%player%} to true
								set {WallClingActive.%player%} to true
								while player is sneaking:
									apply levitation 256 to the player for 1 second
									wait 1 tick
									if distance between player and event-block is more than or equal to 3.75:
										set player's velocity to vector(0,0,0)
										exit 1 loop
									if player is on ground:
										exit 1 loop
									if y of player's velocity is more than 0:
										set y of player's velocity to 0
								remove levitation from the player
								set player's velocity to vector(0,0,0)
								clear {WallKickReady.%player%}
								clear {WallClingActive.%player%}
	#True Block
	if checkSlots(player,"True Block") is 1:
		if player's tool is any sword:
			if player's offhand tool is air:
				set player's offhand tool to 1 shield named "<light yellow>Sword Block"
	#Rallies
	if target is a player:
		set {_perk} to checkSlots(player,"Rally Strength")
		if {_perk} is 1:
			remove strength from the target
			apply strength 2 to the target for 10 seconds
			if checkSlots(player,"Rally Up!") is 1:
				loop all players in radius 10 of the player:
					if {party.%loop-player%} is {party.%player%}:
						apply strength 2 to the loop-player for 10 seconds
		set {_perk} to checkSlots(player,"Rally Speed")
		if {_perk} is 1:
			remove swiftness from the target
			apply swiftness 2 to the target for 10 seconds
			if checkSlots(player,"Rally Up!") is 1:
				loop all players in radius 10 of the player:
					if {party.%loop-player%} is {party.%player%}:
						apply swiftness 2 to the target for 10 seconds
		set {_perk} to checkSlots(player,"Rally Resistance")
		if {_perk} is 1:
			remove resistance from the target
			apply resistance 2 to the target for 10 seconds
			if checkSlots(player,"Rally Up!") is 1:
				loop all players in radius 10 of the player:
					if {party.%loop-player%} is {party.%player%}:
						apply resistance 2 to the loop-player for 10 seconds
		set {_perk} to checkSlots(player,"Rally Spectrum")
		if {_perk} is 1:
			remove resistance from the target
			remove strength from the target
			remove swiftness from the target
			apply resistance 2 to the target for 10 seconds
			apply strength 2 to the target for 10 seconds
			apply swiftness 2 to the target for 10 seconds
			if checkSlots(player,"Rally Up!") is 1:
				loop all players in radius 10 of the player:
					if {party.%loop-player%} is {party.%player%}:
						apply resistance 2 to the loop-player for 10 seconds
						apply strength 2 to the loop-player for 10 seconds
						apply swiftness 2 to the loop-player for 10 seconds
	#Lush Farming
	if clicked block is soil:
		if checkSlots(player,"Lush Farming") is 1:
			if player's tool is seeds:
				set {_toolOK} to 1
			else if player's tool is pumpkin seeds:
				set {_toolOK} to 1
			else if player's tool is beetroot seeds:
				set {_toolOK} to 1
			else if player's tool is potato:
				set {_toolOK} to 1
			else if player's tool is melon seeds:
				set {_toolOK} to 1
			else if player's tool is carrot:
				set {_toolOK} to 1
			if {_toolOK} is 1:
				loop all blocks in radius 5 of the clicked block:
					if loop-block is soil:
						if block above loop-block is air:
							#Figure out what crop they actually planted
							if player's tool is seeds:
								set block above loop-block to freshly planted wheat plant
							else if player's tool is pumpkin seeds:
								set block above loop-block to freshly planted pumpkin stem
							else if player's tool is beetroot seeds:
								set block above loop-block to freshly planted beetroot plant
							else if player's tool is potato:
								set block above loop-block to freshly planted potato plant
							else if player's tool is melon seeds:
								set block above loop-block to freshly planted melon stem
							else if player's tool is carrot:
								set block above loop-block to freshly planted carrot plant
	else if clicked block is sapling:
		if checkSlots(player,"Super Fertilizer") is 1:
			if player's tool is bone meal:
				give 1 bone meal to the player
				
#True Block shield removal checks
on tool change:
	if the name of the player's offhand tool is "<light yellow>Sword Block":
		set the player's offhand tool to air

on inventory open:
	if the name of the player's offhand tool is "<light yellow>Sword Block":
		set the player's offhand tool to air

#Quick Revive
#on death:
#	set {_LCK} to checkSlots(victim,"Quick Revive")
#	if {_LCK} is 1:
#		if {qrevivecd.%victim%} is not set:
#			cancel event
#			set the victim's health to 10
#			play 100 (heart with speed 1) at the victim
#			apply regeneration 5 to the victim for 5 seconds
#			send formatted "<light cyan>Quick Revive was used." to the victim
#			set {qrevivecd.%victim%} to true
#			wait 3 minutes
#			clear {qrevivecd.%victim%}
#		else:
#			clear {qrevivecd.%victim%}

#Renewal/Restock
every 10 seconds:
	loop all players:
		if loop-player is alive:
			#Renewal
			set {_LCKcheck.%loop-player%} to checkSlots(loop-player,"Renewal")
			if {_LCKcheck.%loop-player%} is 1:
				heal loop-player by (loop-player's maximum health * 0.1) hearts
			clear {_LCKcheck.%loop-player%}
			#Restock:
			set {_LCKcheck.%loop-player%} to checkSlots(loop-player,"Restock")
			if {_LCKcheck.%loop-player%} is 1:
				increase the loop-player's food level by 2
			
on damage:
	#Riccochet
	if projectile exists:
		if metadata value "canRiccochet" of the projectile is 1:
			set {_riccoHorizontal} to random number from -0.75 to 0.75
			make the victim shoot an arrow at speed -2
			push the last shot projectile left at speed {_riccoHorizontal}
			set metadata value "canRiccochet" of the last shot projectile to 1
	#Smooth Landing
	if victim is player:
		if damage cause is fall:
			add damage to {slfalltotal.%victim%}
			if {slfalltotal.%victim%} is more than 100:
				if {perks.%victim%::Smooth Landing} is not set:
					make victim execute command "/grantskill 0 Smooth Landing"
			set {_LCKcheck.%victim%} to checkSlots(victim,"Smooth Landing")
			if {_LCKcheck.%victim%} is 1:
				cancel event
			else if {t_isRappeling.%victim%} is "Rappeling":
				cancel event
	#Dragon Soul perks
	#Gale Soul
	set {_LCKcheck} to checkSlots(attacker,"Gale Soul")
	if {_LCKcheck} is 1:
		set {dragonSoulMeterCap.%attacker%} to ({lvl.%attacker%} * 15)
		add (final damage / 4) to {dragonSoulMeter.%attacker%}
		if {dragonSoulMeter.%attacker%} is more than {dragonSoulMeterCap.%attacker%}:
			set {dragonSoulMeter.%attacker%} to {dragonSoulMeterCap.%attacker%}
		set {_dtMeterDisplay} to ceil(({dragonSoulMeter.%attacker%} / {dragonSoulMeterCap.%attacker%}) * 100)
		if {_dtMeterDisplay} is more than 100:
			if {t_blockMeterAnnoyance.%attacker%} is not set:
				set {_dtMeterDisplay} to 100
				play sound "block.end_portal.spawn" with volume 1 and pitch 1 at the attacker
				send "<gold>Gale Soul meter full! Sneak + Right click with an empty hand to transform." to the attacker
		set bossbar "dsoul.%attacker's uuid%" progress to {_dtMeterDisplay}
		send "<green>Gale Soul Meter: %{dragonSoulMeter.%attacker%}% | Max Meter: %{dragonSoulMeterCap.%attacker%}%" to the attacker
	else:
		#Flame Soul
		set {_LCKcheck} to checkSlots(attacker,"Flame Soul")
		if {_LCKcheck} is 1:
			set {dragonSoulMeterCap.%attacker%} to ({lvl.%attacker%} * 15)
			add (final damage / 4) to {dragonSoulMeter.%attacker%}
			if {dragonSoulMeter.%attacker%} is more than {dragonSoulMeterCap.%attacker%}:
				set {dragonSoulMeter.%attacker%} to {dragonSoulMeterCap.%attacker%}
			set {_dtMeterDisplay} to ceil(({dragonSoulMeter.%attacker%} / {dragonSoulMeterCap.%attacker%}) * 100)
			if {_dtMeterDisplay} is more than 100:
				if {t_blockMeterAnnoyance.%attacker%} is not set:
					set {_dtMeterDisplay} to 100
					play sound "block.end_portal.spawn" with volume 1 and pitch 1 at the attacker
					send "<gold>Flame Soul meter full! Sneak + Right click with an empty hand to transform." to the attacker
			set bossbar "dsoul.%attacker's uuid%" progress to {_dtMeterDisplay}
			send "<orange>Flame Soul Meter: %{dragonSoulMeter.%attacker%}% | Max Meter: %{dragonSoulMeterCap.%attacker%}%" to the attacker
		else:
			#Aqua Soul
			set {_LCKcheck} to checkSlots(attacker,"Aqua Soul")
			if {_LCKcheck} is 1:
				set {dragonSoulMeterCap.%attacker%} to ({lvl.%attacker%} * 15)
				add (final damage / 4) to {dragonSoulMeter.%attacker%}
				if {dragonSoulMeter.%attacker%} is more than {dragonSoulMeterCap.%attacker%}:
					set {dragonSoulMeter.%attacker%} to {dragonSoulMeterCap.%attacker%}
				set {_dtMeterDisplay} to ceil(({dragonSoulMeter.%attacker%} / {dragonSoulMeterCap.%attacker%}) * 100)
				if {_dtMeterDisplay} is more than 100:
					if {t_blockMeterAnnoyance.%attacker%} is not set:
						set {_dtMeterDisplay} to 100
						play sound "block.end_portal.spawn" with volume 1 and pitch 1 at the attacker
						send "<gold>Aqua Soul meter full! Sneak + Right click with an empty hand to transform." to the attacker
				set bossbar "dsoul.%attacker's uuid%" progress to {_dtMeterDisplay}
				send "<blue>Aqua Soul Meter: %{dragonSoulMeter.%attacker%}% | Max Meter: %{dragonSoulMeterCap.%attacker%}%" to the attacker
				
#Quick Draw
on right click with bow:
	set {_checkslots} to checkSlots(player,"Quick Draw")
	if {_checkslots} is 1:
		if the player has an arrow:
			if {QDCooldown.%player%} is not set:
				cancel event
				set {QDCooldown.%player%} to true
				make the player shoot an arrow at speed 3
				if the player's tool is not enchanted with infinity:
					remove 1 arrow from the player
				damage the player's tool by 1
				play sound "block.dispenser.launch" with volume 1 and pitch 1 at the player
				wait 0.33 seconds
				clear {QDCooldown.%player%}
		else:
			cancel event
	else if checkSlots(player,"Electro Heart") is 1:
		if {dtActive.%player%} is true:
			if the player has an arrow:
				if {QDCooldown.%player%} is not set:
					cancel event
					set {QDCooldown.%player%} to true
					make the player shoot an arrow at speed 3
					if the player's tool is not enchanted with infinity:
						remove 1 arrow from the player
					damage the player's tool by 1
					play sound "block.dispenser.launch" with volume 1 and pitch 1 at the player
					wait 0.33 seconds
					clear {QDCooldown.%player%}
			else:
				cancel event
			
#Riccochet - apply NBT
on shoot:
	if shooter's tool is bow:
		if checkSlots(shooter,"Riccochet") is 1:
			set metadata value "canRiccochet" of the last shot projectile to 1

#Air Hike/Smooth Landing
on flight toggle:
	if the player's gamemode is not creative:
		#Half-Breed native flight
		if {traits.%player%::Half-Breed} is true:
			if player is not flying:
				if player's food level is more than 9:
					while player's food level is more than or equal to 4:
						reduce the player's food level by 1
						play sound "entity.enderdragon.flap" with volume 0.5 and pitch 1.2 at the player
						wait 1 second
						if player's food level is less than 4:
							send "<light red>Your wings grow tired..." to the player
							force player to stop flying
							exit 1 loop
						if player is on ground:
							send "<italics>You rest your wings." to the player
							force player to stop flying
							exit 1 loop
						if player is not flying:
							set gliding of player to on
							exit 1 loop
					force player to stop flying
					play sound "entity.enderdragon.flap" with volume 0.5 and pitch 0.8 at the player
				else:
					cancel event
					send "<light red>You are too exhausted to take flight." to the player
		if {dragonSoulActive.%player%} is true:
			if player is flying:
				set gliding of player to on
		set {_ak} to checkSlots(player,"Air Hike")
		if {_ak} is 1:
			cancel event
			if {AirHikeReady.%player%} is true:
				play sound "entity.painting.place" with volume 1.5 and pitch 0.6 at the player for the player
				wait 1 tick
				set {AirHikeReady.%player%} to false
				set {_magnitude} to (y of player's velocity)
				if {_magnitude} is less than 0:
					set {_magnitude} to {_magnitude} * -1.05
				else:
					set {_magnitude} to {_magnitude} / 4
				play 60 (redstone block break with speed 1) at the player
				push the player upwards at speed ({_magnitude} + 1.05)
				set {_m2} to sqrt(((x of player's velocity) ^ 2) + ((z of player's velocity) ^ 2))
				#add (z of player's velocity) to {_m2}
				#broadcast "%{_m2}%"
				push the player in horizontal direction of the player at speed {_m2}
				play sound "entity.blaze.shoot" with volume 0.75 and pitch 0.7 at the player for the player
				loop 10 times:
					play 2 (redstone block break with speed 1) at the player
					play 2 (cloud with speed 0) at the player
					wait 1 tick
			else:
				loop all monsters in radius 1 of the player:
					if loop-monster is alive:
						if loop-monster is not player:
							set {_allowEnemyStep} to true
				if {_allowEnemyStep} is true:
					play sound "entity.painting.place" with volume 1.5 and pitch 0.6 at the player for the player
					wait 1 tick
					set {AirHikeReady.%player%} to false
					set {_magnitude} to (y of player's velocity)
					if {_magnitude} is less than 0:
						set {_magnitude} to {_magnitude} * -1.05
					else:
						set {_magnitude} to {_magnitude} / 4
					play 60 (redstone block break with speed 1) at the player
					push the player upwards at speed ({_magnitude} + 1.05)
					set {_m2} to sqrt(((x of player's velocity) ^ 2) + ((z of player's velocity) ^ 2))
					#add (z of player's velocity) to {_m2}
					#broadcast "%{_m2}%"
					push the player in horizontal direction of the player at speed {_m2}
					play sound "entity.blaze.shoot" with volume 0.75 and pitch 0.7 at the player for the player
					loop 10 times:
						play 2 (redstone block break with speed 1) at the player
						play 2 (cloud with speed 0) at the player
						wait 1 tick
				else:
					push the player downwards at speed 0.05
		set {_sl} to checkSlots(player,"Smooth Landing")
		if {_sl} is 1:
			cancel event
			push the player downwards at speed 0.05
		if checkSlots(player,"Air Raid") is 1:
			if {dtActive.%player%} is true:
				while player is flying:
					if checkSlots(player,"Trigger Heart") is 1:
						wait 1 tick
						subtract 1 from {dtMeter.%player%}
					else:
						wait 2 tick
						subtract 1 from {dtMeter.%player%}
					if {dtActive.%player%} is not true:
						exit 1 loop
						set player's flight state to false

#Air Hike refresh
every 0.1 seconds:
	loop all players:
		if citizen id of loop-player is not set:
			#Air Hike
			set {_ak} to checkSlots(loop-player,"Air Hike")
			if {_ak} is 1:
				if loop-player is on ground:
					set {AirHikeReady.%loop-player%} to true
			#Well-Trained
			if checkSlots(loop-player,"Well-Trained") is 1:
				if loop-player is riding a horse:
					if {activeBuffs.traditional_weapons.%loop-player%::Well-Trained (Perk)} is not set:
						add 20 to {abilities.%loop-player%::Traditional Weapons}
						add 20 to {abilities.%loop-player%::Magical Weapons}
						set {_debug} to changeEntityStatBuff(loop-player,"STR",4,"Well-Trained (Perk)",0)
						set {_debug} to changeEntityStatBuff(loop-player,"MAG",4,"Well-Trained (Perk)",0)
						set {_debug} to changeEntityStatBuff(loop-player,"LCK",4,"Well-Trained (Perk)",0)
						set {activeBuffs.traditional_weapons.%loop-player%::Well-Trained (Perk)} to true
				else if {activeBuffs.traditional_weapons.%loop-player%::Well-Trained (Perk)} is true:
					subtract 20 from {abilities.%loop-player%::Traditional Weapons}
					subtract 20 from {abilities.%loop-player%::Magical Weapons}
					clear {activeBuffs.traditional_weapons.%loop-player%::Well-Trained (Perk)}
			#Precision gun lockout clear
			if {t_precisionTimeout.%loop-player%} is set:
				subtract 0.1 from {t_precisionTimeout.%loop-player%}
				if {t_precisionTimeout.%loop-player%} is less than or equal to 0:
					clear {t_precisionTimeout.%loop-player%}
					play sound "entity.experience_orb.pickup" with volume 1 and pitch 0.6 at loop-player for loop-player
					wait 5 ticks
					play sound "entity.experience_orb.pickup" with volume 1 and pitch 0.8 at loop-player for loop-player
			if {t_royalForkCD.%loop-player%} is set:
				if {t_royalForkCD.%loop-player%} is more than 0:
					subtract 0.1 from {t_royalForkCD.%loop-player%}
				else:
					clear {t_royalForkCD.%loop-player%}
					send "<light purple>Royal Fork available." to loop-player
					play sound "entity.experience_orb.pickup" with volume 2 and pitch 1 at loop-player for loop-player
	
#Air Hike/Smooth Landing
on jump:
	player's gamemode is not creative:
		if block below player is not air or water:
			set {_ak} to checkSlots(player,"Air Hike")
			set {_sl} to checkSlots(player,"Smooth Landing")
			set {_airraid} to checkSlots(player,"Air Raid")
			if {_ak} is 1:
				set player's flight state to true
				set {AirHikeReady.%player%} to true
			else if {_sl} is 1:
				set player's flight state to true
			if {_airraid} is 1:
				if {dtActive.%player%} is true:
					set player's flight state to true
				else:
					set player's flight state to false
			if {traits.%player%::Half-Breed} is true:
				set player's flight state to true

on tame:
	#Deep Bond
	set {_slot} to checkSlots(player,"Deep Bond")
	if {_slot} is 1:
		apply speed 5 to the entity for 999 days
		apply resistance 5 to the entity for 999 days
		if entity is any horse:
			make the entity wear a saddle
		set the entity's max health to the entity's maximum health * 3
		wait a tick
		heal the entity by entity's maximum health

#Precision on-equip penalties
on tool change:
	if checkSlots(player,"Precision") is 1:
		set {t_precisionTimeout.%player%} to 0.5
		#Pistols have no speed penalty so nothing is defined for them
		#Shotguns/Rifles inflict Slowness 1
		#Heavy Weapons inflict Slowness 2 (things like Launchers, Snipers, and the Minigun)
		#Iron Musket
		if nbt of the player's tool contains "FirearmType:1":
			apply slowness 1 to the player for 1 day
			set {t_hasPrecisionDebuff.%player%} to true
		#Redstone Repeater
		else if nbt of the player's tool contains "FirearmType:3":
			apply slowness 1 to the player for 1 day
			set {t_hasPrecisionDebuff.%player%} to true
		#Redgrave Coyote-Alpha
		else if nbt of the player's tool contains "FirearmType:5":
			apply slowness 1 to the player for 1 day
			set {t_hasPrecisionDebuff.%player%} to true
			set {t_precisionTimeout.%player%} to 1
		#Teufort Two-Timer
		else if nbt of the player's tool contains "FirearmType:6":
			apply slowness 1 to the player for 1 day
			set {t_hasPrecisionDebuff.%player%} to true
		#Rocket Launcher
		else if nbt of the player's tool contains "FirearmType:7":
			apply slowness 2 to the player for 1 day
			set {t_hasPrecisionDebuff.%player%} to true
			set {t_precisionTimeout.%player%} to 1.5
		#Home-Made Heater (treated as rifle for balancing)
		else if nbt of the player's tool contains "FirearmType:8":
			apply slowness 1 to the player for 1 day
			set {t_hasPrecisionDebuff.%player%} to true
			set {t_precisionTimeout.%player%} to 1.25
		#Minigun
		else if nbt of the player's tool contains "FirearmType:9":
			apply slowness 2 to the player for 1 day
			set {t_hasPrecisionDebuff.%player%} to true
			set {t_precisionTimeout.%player%} to 2
		#Grenade Launcher
		else if nbt of the player's tool contains "FirearmType:10":
			apply slowness 2 to the player for 1 day
			set {t_hasPrecisionDebuff.%player%} to true
			set {t_precisionTimeout.%player%} to 1
		#Vettik S-25
		else if nbt of the player's tool contains "FirearmType:11":
			apply slowness 1 to the player for 1 day
			set {t_hasPrecisionDebuff.%player%} to true
			set {t_precisionTimeout.%player%} to 1.25
		#Vettik B-30AS
		else if nbt of the player's tool contains "FirearmType:12":
			apply slowness 1 to the player for 1 day
			set {t_hasPrecisionDebuff.%player%} to true
			set {t_precisionTimeout.%player%} to 1
		#Vettik A-10 Enforcer
		else if nbt of the player's tool contains "FirearmType:13":
			apply slowness 2 to the player for 1 day
			set {t_hasPrecisionDebuff.%player%} to true
			set {t_precisionTimeout.%player%} to 1.5
		#Redgrave Kalina
		else if nbt of the player's tool contains "FirearmType:14":
			apply slowness 2 to the player for 1 day
			set {t_hasPrecisionDebuff.%player%} to true
			set {t_precisionTimeout.%player%} to 1.25
		else:
			clear {t_hasPrecisionDebuff.%player%}
			remove slowness from the player
			
#Acrobatics Wall Kick
on block damage:
	if the 4th line of the lore of the player's tool is "<light green><bold>Assist - Acrobatics":
		set {_isStylish} to 1
	else:
		set {_isStylish} to checkSlots(player,"Acrobatics")
	if {_isStylish} is 1:
		if player is not on ground:
			if player is sneaking:
				set {_canJump} to true
			else if isEntityToolAir(player) is true:
				set {_canJump} to true
			if {_canJump} is true:
				if {WallKickReady.%player%} is not set:
					if event-block is not coal block:
						set {AirHikeReady.%player%} to true
						push the player backwards at speed 0.5
						if {combograde.%player%} is more than 0:
							add (1.15 * (7 - {combograde.%player%})) to {comboscore.%player%}
						push the player upwards at speed 0.6
						remove resistance from the player
						apply resistance 5 to the player for 2 seconds
						#send formatted "<light red>Air hike!" to the player
						set {WallKickReady.%player%} to 1
						wait 0.35 seconds
						clear {WallKickReady.%player%}