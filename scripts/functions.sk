#Check Element Type On Spells Function
function checkElement(TYPE: number) :: number:
	if {_TYPE} is 1:
		return 1
	else if {_TYPE} is 2:
		return 2
	else if {_TYPE} is 3:
		return 3
	else if {_TYPE} is 4:
		return 4
	else if {_TYPE} is 5:
		return 1
	else if {_TYPE} is 6:
		return 2
	else if {_TYPE} is 7:
		return 3
	else if {_TYPE} is 8:
		return 4
	else if {_TYPE} is 9:
		return 1
	else if {_TYPE} is 10:
		return 2
	else if {_TYPE} is 11:
		return 3
	else if {_TYPE} is 12:
		return 4
	else if {_TYPE} is 13:
		return 1
	else if {_TYPE} is 14:
		return 2
	else:
		return 0

#Check if the player's class is any variation of the Devil Hunter
function isStylish(PLR: player) :: number:
	if {class.%{_PLR}%} is "Devil Hunter":
		return 1
	else if {class.%{_PLR}%} is "Angel Slayer":
		return 1
	else if {class.%{_PLR}%} is "Platinum Star":
		return 1
	else:
		return 0
		
#Check if the player is a particular class.
function checkPlayerClass(PLR: entity,CLS: text) :: number:
	#Find citizen id of entity for compare checks
	set {_CID} to citizen id of {_PLR}
	if {_CID} is not set:
		if {_CLS} is "Cavalier":
			if {class.%{_PLR}%} is "Cavalier":
				return 1
			else if {class.%{_PLR}%} is "Paladin":
				return 1
			else if {class.%{_PLR}%} is "Crusader":
				return 1
			else:
				return 0
		else if {_CLS} is "Mage":
			if {class.%{_PLR}%} is "Mage":
				return 1
			else if {class.%{_PLR}%} is "Sorcerer":
				return 1
			else if {class.%{_PLR}%} is "Archwizard":
				return 1
			else:
				return 0
		else if {_CLS} is "Mercenary":
			if {class.%{_PLR}%} is "Mercenary":
				return 1
			else if {class.%{_PLR}%} is "Hero":
				return 1
			else if {class.%{_PLR}%} is "Prince":
				return 1
			else if {class.%{_PLR}%} is "Lord":
				return 1
			else:
				return 0
		else if {_CLS} is "Knight":
			if {class.%{_PLR}%} is "Knight":
				return 1
			else if {class.%{_PLR}%} is "General":
				return 1
			else if {class.%{_PLR}%} is "Chieftain":
				return 1
			else:
				return 0
		else if {_CLS} is "Bladesman":
			if {class.%{_PLR}%} is "Bladesman":
				return 1
			else if {class.%{_PLR}%} is "Myrmidon":
				return 1
			else if {class.%{_PLR}%} is "Swordmaster":
				return 1
			else:
				return 0
		else if {_CLS} is "Fighter":
			if {class.%{_PLR}%} is "Fighter":
				return 1
			else if {class.%{_PLR}%} is "Berserker":
				return 1
			else if {class.%{_PLR}%} is "Warrior":
				return 1
			else:
				return 0
		else if {_CLS} is "Cleric":
			if {class.%{_PLR}%} is "Cleric":
				return 1
			else if {class.%{_PLR}%} is "Bishop":
				return 1
			else if {class.%{_PLR}%} is "Sage":
				return 1
			else:
				return 0
		else if {_CLS} is "Devil Hunter":
			if {class.%{_PLR}%} is "Devil Hunter":
				return 1
			else if {class.%{_PLR}%} is "Angel Slayer":
				return 1
			else if {class.%{_PLR}%} is "Platinum Star":
				return 1
			else:
				return 0
		else if {_CLS} is "Gunslinger":
			if {class.%{_PLR}%} is "Gunslinger":
				return 1
			else if {class.%{_PLR}%} is "Rifleman":
				return 1
			else if {class.%{_PLR}%} is "Doom Slayer":
				return 1
			else:
				return 0
		else if {_CLS} is "Strategist":
			if {class.%{_PLR}%} is "Strategist":
				return 1
			else if {class.%{_PLR}%} is "Tactician":
				return 1
			else if {class.%{_PLR}%} is "Grandmaster":
				return 1
			else:
				return 0
		else if {_CLS} is "Archer":
			if {class.%{_PLR}%} is "Archer":
				return 1
			else if {class.%{_PLR}%} is "Ranger":
				return 1
			else if {class.%{_PLR}%} is "Sniper":
				return 1
			else:
				return 0
		else if {_CLS} is "Survivor":
			if {class.%{_PLR}%} is "Survivor":
				return 1
			else if {class.%{_PLR}%} is "Builder":
				return 1
			else if {class.%{_PLR}%} is "Craftsman":
				return 1
			else:
				return 0
		else if {_CLS} is "Trickster":
			if {class.%{_PLR}%} is "Trickster":
				return 1
			else if {class.%{_PLR}%} is "Rogue":
				return 1
			else if {class.%{_PLR}%} is "Freeblade":
				return 1
			else:
				return 0
		else if {_CLS} is "Dragonborn":
			if {class.%{_PLR}%} is "Dragonborn":
				return 1
			else if {class.%{_PLR}%} is "Manakete":
				return 1
			else if {class.%{_PLR}%} is "Divine Dragon":
				return 1
			else:
				return 0
	else:
		if {_CLS} is "Cavalier":
			if {npc_class.%{_CID}%} is "Cavalier":
				return 1
			else if {npc_class.%{_CID}%} is "Paladin":
				return 1
			else if {npc_class.%{_CID}%} is "Crusader":
				return 1
			else:
				return 0
		else if {_CLS} is "Mage":
			if {npc_class.%{_CID}%} is "Mage":
				return 1
			else if {npc_class.%{_CID}%} is "Sorcerer":
				return 1
			else if {npc_class.%{_CID}%} is "Archwizard":
				return 1
			else:
				return 0
		else if {_CLS} is "Mercenary":
			if {npc_class.%{_CID}%} is "Mercenary":
				return 1
			else if {npc_class.%{_CID}%} is "Hero":
				return 1
			else if {npc_class.%{_CID}%} is "Prince":
				return 1
			else if {npc_class.%{_CID}%} is "Lord":
				return 1
			else:
				return 0
		else if {_CLS} is "Knight":
			if {npc_class.%{_CID}%} is "Knight":
				return 1
			else if {npc_class.%{_CID}%} is "General":
				return 1
			else if {npc_class.%{_CID}%} is "Chieftain":
				return 1
			else:
				return 0
		else if {_CLS} is "Bladesman":
			if {npc_class.%{_CID}%} is "Bladesman":
				return 1
			else if {npc_class.%{_CID}%} is "Myrmidon":
				return 1
			else if {npc_class.%{_CID}%} is "Swordmaster":
				return 1
			else:
				return 0
		else if {_CLS} is "Fighter":
			if {npc_class.%{_CID}%} is "Fighter":
				return 1
			else if {npc_class.%{_CID}%} is "Berserker":
				return 1
			else if {npc_class.%{_CID}%} is "Warrior":
				return 1
			else:
				return 0
		else if {_CLS} is "Cleric":
			if {npc_class.%{_CID}%} is "Cleric":
				return 1
			else if {npc_class.%{_CID}%} is "Bishop":
				return 1
			else if {npc_class.%{_CID}%} is "Sage":
				return 1
			else:
				return 0
		else if {_CLS} is "Devil Hunter":
			if {npc_class.%{_CID}%} is "Devil Hunter":
				return 1
			else if {npc_class.%{_CID}%} is "Angel Slayer":
				return 1
			else if {npc_class.%{_CID}%} is "Platinum Star":
				return 1
			else:
				return 0
		else if {_CLS} is "Gunslinger":
			if {npc_class.%{_CID}%} is "Gunslinger":
				return 1
			else if {npc_class.%{_CID}%} is "Rifleman":
				return 1
			else if {npc_class.%{_CID}%} is "Doom Slayer":
				return 1
			else:
				return 0
		else if {_CLS} is "Strategist":
			if {npc_class.%{_CID}%} is "Strategist":
				return 1
			else if {npc_class.%{_CID}%} is "Tactician":
				return 1
			else if {npc_class.%{_CID}%} is "Grandmaster":
				return 1
			else:
				return 0
		else if {_CLS} is "Archer":
			if {npc_class.%{_CID}%} is "Archer":
				return 1
			else if {npc_class.%{_CID}%} is "Ranger":
				return 1
			else if {npc_class.%{_CID}%} is "Sniper":
				return 1
			else:
				return 0
		else if {_CLS} is "Survivor":
			if {npc_class.%{_CID}%} is "Survivor":
				return 1
			else if {npc_class.%{_CID}%} is "Builder":
				return 1
			else if {npc_class.%{_CID}%} is "Craftsman":
				return 1
			else:
				return 0
		else if {_CLS} is "Trickster":
			if {npc_class.%{_CID}%} is "Trickster":
				return 1
			else if {npc_class.%{_CID}%} is "Rogue":
				return 1
			else if {npc_class.%{_CID}%} is "Freeblade":
				return 1
			else:
				return 0
		else if {_CLS} is "Dragonborn":
			if {npc_class.%{_CID}%} is "Dragonborn":
				return 1
			else if {npc_class.%{_CID}%} is "Manakete":
				return 1
			else if {npc_class.%{_CID}%} is "Divine Dragon":
				return 1
			else:
				return 0
		else if {_CLS} is "Summoner":
			if {npc_class.%{_CID}%} is "Summoner":
				return 1
			else if {npc_class.%{_CID}%} is "Fell Commander":
				return 1
			else if {npc_class.%{_CID}%} is "Requisitioner":
				return 1
			else:
				return 0
				
#Check if the player is a particular class.
function getBaseClass(PLR: entity) :: text:
	#Find citizen id of entity for compare checks
	set {_CID} to citizen id of {_PLR}
	if {_CID} is not set:
		if {class.%{_PLR}%} is "Cavalier":
			return "Cavalier"
		else if {class.%{_PLR}%} is "Paladin":
			return "Cavalier"
		else if {class.%{_PLR}%} is "Crusader":
			return "Cavalier"
		else if {class.%{_PLR}%} is "Mage":
			return "Mage"
		else if {class.%{_PLR}%} is "Sorcerer":
			return "Mage"
		else if {class.%{_PLR}%} is "Archwizard":
			return "Mage"
		else if {class.%{_PLR}%} is "Mercenary":
			return "Mercenary"
		else if {class.%{_PLR}%} is "Hero":
			return "Mercenary"
		else if {class.%{_PLR}%} is "Prince":
			return "Mercenary"
		else if {class.%{_PLR}%} is "Lord":
			return "Mercenary"
		else if {class.%{_PLR}%} is "Knight":
			return "Knight"
		else if {class.%{_PLR}%} is "General":
			return "Knight"
		else if {class.%{_PLR}%} is "Chieftain":
			return "Knight"
		else if {class.%{_PLR}%} is "Bladesman":
			return "Bladesman"
		else if {class.%{_PLR}%} is "Myrmidon":
			return "Bladesman"
		else if {class.%{_PLR}%} is "Swordmaster":
			return "Bladesman"
		else if {class.%{_PLR}%} is "Fighter":
			return "Fighter"
		else if {class.%{_PLR}%} is "Berserker":
			return "Fighter"
		else if {class.%{_PLR}%} is "Warrior":
			return "Fighter"
		else if {class.%{_PLR}%} is "Cleric":
			return "Cleric"
		else if {class.%{_PLR}%} is "Bishop":
			return "Cleric"
		else if {class.%{_PLR}%} is "Sage":
			return "Cleric"
		else if {class.%{_PLR}%} is "Devil Hunter":
			return "Devil Hunter"
		else if {class.%{_PLR}%} is "Angel Slayer":
			return "Devil Hunter"
		else if {class.%{_PLR}%} is "Platinum Star":
			return "Devil Hunter"
		else if {class.%{_PLR}%} is "Gunslinger":
			return "Gunslinger"
		else if {class.%{_PLR}%} is "Rifleman":
			return "Gunslinger"
		else if {class.%{_PLR}%} is "Doom Slayer":
			return "Gunslinger"
		else if {class.%{_PLR}%} is "Strategist":
			return "Strategist"
		else if {class.%{_PLR}%} is "Tactician":
			return "Strategist"
		else if {class.%{_PLR}%} is "Grandmaster":
			return "Strategist"
		else if {class.%{_PLR}%} is "Archer":
			return "Archer"
		else if {class.%{_PLR}%} is "Ranger":
			return "Archer"
		else if {class.%{_PLR}%} is "Sniper":
			return "Archer"
		else if {class.%{_PLR}%} is "Survivor":
			return "Survivor"
		else if {class.%{_PLR}%} is "Builder":
			return "Survivor"
		else if {class.%{_PLR}%} is "Craftsman":
			return "Survivor"
		else if {class.%{_PLR}%} is "Trickster":
			return "Trickster"
		else if {class.%{_PLR}%} is "Rogue":
			return "Trickster"
		else if {class.%{_PLR}%} is "Freeblade":
			return "Trickster"
		else if {class.%{_PLR}%} is "Dragonborn":
			return "Dragonborn"
		else if {class.%{_PLR}%} is "Manakete":
			return "Dragonborn"
		else if {class.%{_PLR}%} is "Divine Dragon":
			return "Dragonborn"
		else if {class.%{_PLR}%} is "Summoner":
			return "Summoner"
		else if {class.%{_PLR}%} is "Fell Commander":
			return "Summoner"
		else if {class.%{_PLR}%} is "Requisitioner":
			return "Summoner"
		else if {class.%{_PLR}%} is "Keeper":
			return "Keeper"
		else if {class.%{_PLR}%} is "Warden":
			return "Keeper"
		else if {class.%{_PLR}%} is "Guardian":
			return "Keeper"
		else if {class.%{_PLR}%} is "Charlatan":
			return "Charlatan"
		else if {class.%{_PLR}%} is "Occultist":
			return "Charlatan"
		else if {class.%{_PLR}%} is "Augur":
			return "Charlatan"
		else if {class.%{_PLR}%} is "Poet":
			return "Poet"
		else if {class.%{_PLR}%} is "Bard":
			return "Poet"
		else if {class.%{_PLR}%} is "Minstrel":
			return "Poet"
		else if {class.%{_PLR}%} is "Outlaw":
			return "Outlaw"
		else if {class.%{_PLR}%} is "Cleaner":
			return "Outlaw"
		else if {class.%{_PLR}%} is "Assassin":
			return "Outlaw"
		else if {class.%{_PLR}%} is "Conjurer":
			return "Conjurer"
		else if {class.%{_PLR}%} is "Thaumaturge":
			return "Conjurer"
		else if {class.%{_PLR}%} is "Warlock":
			return "Conjurer"
		else if {class.%{_PLR}%} is "Troubador":
			return "Troubador"
		else if {class.%{_PLR}%} is "Valkyrie":
			return "Troubador"
		else if {class.%{_PLR}%} is "Master Knight":
			return "Troubador"					
#Remove coloring from a piece of text.
function decolorize(TXT: text) :: text:
	set {_decolored} to uncolored {_TXT}
	remove "<black>" from {_decolored}
	remove "<dark grey>" from {_decolored}
	remove "<dark gray>" from {_decolored}
	remove "<gray>" from {_decolored}
	remove "<grey>" from {_decolored}
	remove "<light gray>" from {_decolored}
	remove "<light grey>" from {_decolored}
	remove "<white>" from {_decolored}
	remove "<blue>" from {_decolored}
	remove "<dark blue>" from {_decolored}
	remove "<cyan>" from {_decolored}
	remove "<light blue>" from {_decolored}
	remove "<green>" from {_decolored}
	remove "<yellow>" from {_decolored}
	remove "<red>" from {_decolored}
	remove "<light red>" from {_decolored}
	remove "<pink>" from {_decolored}
	remove "<light purple>" from {_decolored}
	remove "<brown>" from {_decolored}
	remove "<orange>" from {_decolored}
	remove "<cyan>" from {_decolored}
	remove "<light yellow>" from {_decolored}
	remove "<light green>" from {_decolored}
	remove "<bold>" from {_decolored}
	remove "<purple>" from {_decolored}
	remove "<gold>" from {_decolored}
	return {_decolored}

#Get the type of helmet the player is wearing.
function getHelmet(PLR: player) :: number:
	if {_PLR} is wearing a leather helmet:
		return 1
	else if {_PLR} is wearing a chain helmet:
		return 2
	else if {_PLR} is wearing an iron helmet:
		return 3
	else if {_PLR} is wearing a gold helmet:
		return 4
	else if {_PLR} is wearing a diamond helmet:
		return 5
	else if {_PLR} is wearing a netherite helmet:
		return 6
		
#Get the type of chestplate the player is wearing.
function getChestplate(PLR: player) :: number:
	if {_PLR} is wearing a leather chestplate:
		return 1
	else if {_PLR} is wearing a chain chestplate:
		return 2
	else if {_PLR} is wearing an iron chestplate:
		return 3
	else if {_PLR} is wearing a gold chestplate:
		return 4
	else if {_PLR} is wearing a diamond chestplate:
		return 5
	else if {_PLR} is wearing a netherite chestplate:
		return 5

#Get the type of leggings the player is wearing.
function getLeggings(PLR: player) :: number:
	if {_PLR} is wearing leather leggings:
		return 1
	else if {_PLR} is wearing chain leggings:
		return 2
	else if {_PLR} is wearing iron leggings:
		return 3
	else if {_PLR} is wearing gold leggings:
		return 4
	else if {_PLR} is wearing diamond leggings:
		return 5
	else if {_PLR} is wearing netherite leggings:
		return 6
		
#Get the type of boots the player is wearing.
function getBoots(PLR: player) :: number:
	if {_PLR} is wearing leather boots:
		return 1
	else if {_PLR} is wearing chain boots:
		return 2
	else if {_PLR} is wearing iron boots:
		return 3
	else if {_PLR} is wearing gold boots:
		return 4
	else if {_PLR} is wearing diamond boots:
		return 5
	else if {_PLR} is wearing netherite boots:
		return 6
		
#Call this to display a visible buff with accompanying sfx on the player.
function buffSFX(PLR: player):
	set {_pitch} to 0.8
	set {_vol} to 1.3
	play sound "block.snow.break" with volume 2 and pitch 1.3 at {_PLR} for {_PLR}
	play sound "block.snow.break" with volume 2 and pitch 1.3 at {_PLR} for {_PLR}
	play sound "block.snow.break" with volume 2 and pitch 1.3 at {_PLR} for {_PLR}
	play sound "block.snow.break" with volume 2 and pitch 1.3 at {_PLR} for {_PLR}
	wait 5 ticks
	loop 7 times:
		play sound "block.stone.place" with volume {_vol} and pitch {_pitch} at {_PLR} for {_PLR}
		add 0.1 to {_pitch}
		subtract 0.1 from {_vol}
		wait 1 ticks

#Call this to play a pokemon-style low health warning
function lowHPSFX(PLR: player):
	loop 3 times:
		play sound "entity.experience_orb.pickup" with volume 1 and pitch 1.4 at {_PLR} for {_PLR}
		wait 0.15 seconds
		play sound "entity.experience_orb.pickup" with volume 1 and pitch 0.9 at {_PLR} for {_PLR}
		wait 0.3 seconds

#Get helmet damage resistance.
function getHelmetDamageResistance(PLR: entity) :: number:
	if {_PLR} is wearing a leather helmet:
		return 4
	else if {_PLR} is wearing a chain helmet:
		return 8
	else if {_PLR} is wearing an iron helmet:
		return 8
	else if {_PLR} is wearing a gold helmet:
		return 8
	else if {_PLR} is wearing a diamond helmet:
		return 12
	else if {_PLR} is wearing a netherite helmet:
		return 12
		
#Get chestplate damage resistance.
function getChestplateDamageResistance(PLR: entity) :: number:
	if {_PLR} is wearing a leather chestplate:
		return 12
	else if {_PLR} is wearing a chain chestplate:
		return 20
	else if {_PLR} is wearing an iron chestplate:
		return 24
	else if {_PLR} is wearing a gold chestplate:
		return 20
	else if {_PLR} is wearing a diamond chestplate:
		return 32
	else if {_PLR} is wearing a netherite chestplate:
		return 32

#Get leggings damage resistance.
function getLeggingsDamageResistance(PLR: entity) :: number:
	if {_PLR} is wearing leather leggings:
		return 8
	else if {_PLR} is wearing chain leggings:
		return 16
	else if {_PLR} is wearing iron leggings:
		return 20
	else if {_PLR} is wearing gold leggings:
		return 12
	else if {_PLR} is wearing diamond leggings:
		return 24
	else if {_PLR} is wearing netherite leggings:
		return 24
		
#Get boots damage resistance.
function getBootsDamageResistance(PLR: entity) :: number:
	if {_PLR} is wearing leather boots:
		return 4
	else if {_PLR} is wearing chain boots:
		return 4
	else if {_PLR} is wearing iron boots:
		return 8
	else if {_PLR} is wearing gold boots:
		return 4
	else if {_PLR} is wearing diamond boots:
		return 12
	else if {_PLR} is wearing netherite boots:
		return 12

#Start a quest with the given arguments.
function startQuest(PLR: player , QUEST: text , DESC: text):
	set {quests.%{_PLR}%::%{_QUEST}%} to 1
	send title "<white><bold>New Quest: %{_QUEST}%" with subtitle "%{_DESC}%" to {_PLR} for 5 seconds with fade in 0.25 seconds and fade out 0.25 seconds
	play sound "entity.fireworkrocket.launch" with volume 0.75 and pitch 1 at {_PLR} for {_PLR}
	play sound "entity.fireworkrocket.twinkle" with volume 0.4 and pitch 1.5 at {_PLR} for {_PLR}
	play sound "entity.player.levelup" with volume 1 and pitch 1 at {_PLR} for {_PLR}
	play 60 (firework spark with speed 1) at {_PLR}
	play 60 (snow shovel with speed 1) at {_PLR}

#Update a quest's progress.
function setQuestProgress(PLR: player , QUEST: text , STAGE: number, INFO: text):
	set {quests.%{_PLR}%::%{_QUEST}%} to {_STAGE}
	send title "" with subtitle "%{_INFO}%" to {_PLR} for 2.5 seconds with fade in 0.25 seconds and fade out 0.25 seconds
	play sound "entity.player.levelup" with volume 0.5 and pitch 1.5 at {_PLR} for {_PLR}
	play sound "entity.fireworkrocket.twinkle" with volume 0.4 and pitch 1.5 at {_PLR} for {_PLR}
	play 10 (firework spark with speed 1) at {_PLR}
	play 10 (snow shovel with speed 1) at {_PLR}
	
#Complete a quest.
function finishQuest(PLR: player , QUEST: text , DESC: text):
	set {quests.%{_PLR}%::%{_QUEST}%} to 999
	send title "<gold><bold>Quest Complete: %{_QUEST}%" with subtitle "%{_DESC}%" to {_PLR} for 5 seconds with fade in 0.25 seconds and fade out 0.25 seconds
	play sound "entity.player.levelup" with volume 1 and pitch 0.75 at {_PLR} for {_PLR}
	play sound "entity.fireworkrocket.twinkle" with volume 1 and pitch 1.5 at {_PLR} for {_PLR}
	play 60 (firework spark with speed 1) at {_PLR}
	play 60 (snow shovel with speed 1) at {_PLR}
	
#Fail a quest, preventing the player from completing it.
function failQuest(PLR: player , QUEST: text , DESC: text):
	set {quests.%{_PLR}%::%{_QUEST}%} to 998
	send title "<light red><bold>Quest Failed: %{_QUEST}%" with subtitle "%{_DESC}%" to {_PLR} for 5 seconds with fade in 0.25 seconds and fade out 0.25 seconds
	play 60 (red wool break with speed 1) at {_PLR}
	show mob spawner flames on {_PLR}
	
#Calculates the player's preferred/best weapon using their weapon ranks.
#DEFUNCT
#function bestWeapon(PLR: player) :: number:
#	if ({weaponrank.%{_PLR}%::swords} + {weaponrank.%{_PLR}%::lances} + {weaponrank.%{_PLR}%::bows} + {weaponrank.%{_PLR}%::magic} + {weaponrank.%{_PLR}%::staves}) is more than ({weaponrank.%{_PLR}%::axes} + {weaponrank.%{_PLR}%::lances} + {weaponrank.%{_PLR}%::bows} + {weaponrank.%{_PLR}%::magic} + {weaponrank.%{_PLR}%::staves}):
#		return 1
#	else if ({weaponrank.%{_PLR}%::axes} + {weaponrank.%{_PLR}%::lances} + {weaponrank.%{_PLR}%::bows} + {weaponrank.%{_PLR}%::magic} + {weaponrank.%{_PLR}%::staves}) is more than ({weaponrank.%{_PLR}%::swords} + {weaponrank.%{_PLR}%::lances} + {weaponrank.%{_PLR}%::bows} + {weaponrank.%{_PLR}%::magic} + {weaponrank.%{_PLR}%::staves}):
#		return 2
#	else if ({weaponrank.%{_PLR}%::lances} + {weaponrank.%{_PLR}%::swords} + {weaponrank.%{_PLR}%::bows} + {weaponrank.%{_PLR}%::magic} + {weaponrank.%{_PLR}%::staves}) is more than ({weaponrank.%{_PLR}%::axes} + {weaponrank.%{_PLR}%::swords} + {weaponrank.%{_PLR}%::bows} + {weaponrank.%{_PLR}%::magic} + {weaponrank.%{_PLR}%::staves}):
#		return 3
#	else if ({weaponrank.%{_PLR}%::bows} + {weaponrank.%{_PLR}%::lances} + {weaponrank.%{_PLR}%::swords} + {weaponrank.%{_PLR}%::magic} + {weaponrank.%{_PLR}%::staves}) is more than ({weaponrank.%{_PLR}%::axes} + {weaponrank.%{_PLR}%::lances} + {weaponrank.%{_PLR}%::swords} + {weaponrank.%{_PLR}%::magic} + {weaponrank.%{_PLR}%::staves}):
#		return 4
#	else if ({weaponrank.%{_PLR}%::magic} + {weaponrank.%{_PLR}%::lances} + {weaponrank.%{_PLR}%::bows} + {weaponrank.%{_PLR}%::swords} + {weaponrank.%{_PLR}%::staves}) is more than ({weaponrank.%{_PLR}%::axes} + {weaponrank.%{_PLR}%::lances} + {weaponrank.%{_PLR}%::bows} + {weaponrank.%{_PLR}%::swords} + {weaponrank.%{_PLR}%::staves}):
#		return 5
#	else if ({weaponrank.%{_PLR}%::staves} + {weaponrank.%{_PLR}%::lances} + {weaponrank.%{_PLR}%::bows} + {weaponrank.%{_PLR}%::magic} + {weaponrank.%{_PLR}%::swords}) is more than ({weaponrank.%{_PLR}%::axes} + {weaponrank.%{_PLR}%::lances} + {weaponrank.%{_PLR}%::bows} + {weaponrank.%{_PLR}%::magic} + {weaponrank.%{_PLR}%::swords}):
#		return 6
	
#Check if the item's name is a valid staff.
function isStaff(NAME: text) :: number:
	if {_NAME} contains "<yellow><bold>Heal":
		return 1
	else if {_NAME} contains "<yellow><bold>Mend":
		return 1
	else if {_NAME} contains "<yellow><bold>Rehabilitate":
		return 1
	else if {_NAME} contains "<yellow><bold>Wrys":
		return 1
	else if {_NAME} contains "<yellow><bold>Imbue":
		return 1
	else if {_NAME} contains "<yellow><bold>Renewal":
		return 1
	else if {_NAME} contains "<yellow><bold>Miracle":
		return 1
	else if {_NAME} contains "<yellow><bold>Aum":
		return 1
	else if {_NAME} contains "<yellow><bold>Fortify":
		return 1
	else:
		return 0
		
#Check if the player's class is any variation of the Cleric.
function isCleric(PLR: player) :: number:
	if {class.%{_PLR}%} is "Cleric":
		return 1
	else if {class.%{_PLR}%} is "Bishop":
		return 1
	else if {class.%{_PLR}%} is "Sage":
		return 1
	else:
		return 0
	
#Unused.
function npcChat(PLR: player , TXT: text):
	send formatted {_TXT} to {_PLR}
		
#Perk Slot Check Function
function checkSlots(PLR: entity , skill: text) :: number:
	set {_CID} to citizen id of {_PLR}
	if {_PLR} is monster:
		if {t_skillslot1.%{_PLR}%} is "%{_skill}%":
			return 1
		else if {t_skillslot2.%{_PLR}%} is "%{_skill}%":
			return 1
		else if {t_skillslot3.%{_PLR}%} is "%{_skill}%":
			return 1
		else if {t_skillslot4.%{_PLR}%} is "%{_skill}%":
			return 1
		else if {t_skillslot5.%{_PLR}%} is "%{_skill}%":
			return 1
		else:
			return 0		
	if {_CID} is not set:
		if {skillslot1.%{_PLR}%} is "%{_skill}%":
			return 1
		else if {skillslot2.%{_PLR}%} is "%{_skill}%":
			return 1
		else if {skillslot3.%{_PLR}%} is "%{_skill}%":
			return 1
		else if {skillslot4.%{_PLR}%} is "%{_skill}%":
			return 1
		else if {skillslot5.%{_PLR}%} is "%{_skill}%":
			return 1
		else if {skillslot6.%{_PLR}%} is "%{_skill}%":
			return 1
		else if {skillslot7.%{_PLR}%} is "%{_skill}%":
			return 1
		else if {skillslot8.%{_PLR}%} is "%{_skill}%":
			return 1
		else if {skillslot9.%{_PLR}%} is "%{_skill}%":
			return 1
		else if {skillslot10.%{_PLR}%} is "%{_skill}%":
			return 1
		else:
			return 0
	else:
		if {npc_skillslot1.%{_CID}%} is "%{_skill}%":
			return 1
		else if {npc_skillslot2.%{_CID}%} is "%{_skill}%":
			return 1
		else if {npc_skillslot3.%{_CID}%} is "%{_skill}%":
			return 1
		else if {npc_skillslot4.%{_CID}%} is "%{_skill}%":
			return 1
		else if {npc_skillslot5.%{_CID}%} is "%{_skill}%":
			return 1
		else:
			return 0
		
#Check if the player should be able to wield Magic Wands.
function checkClass(PLR: player) :: number:
	if {class.%{_PLR}%} is "Mage":
		return 1
	else if {class.%{_PLR}%} is "Sage":
		return 1
	else if {class.%{_PLR}%} is "Sorcerer":
		return 1
	else if {class.%{_PLR}%} is "Archwizard":
		return 1
	else if {class.%{_PLR}%} is "Strategist":
		return 1
	else if {class.%{_PLR}%} is "Tactician":
		return 1
	else if {class.%{_PLR}%} is "Grandmaster":
		return 1
	else:
		return 0
		
#Check if the player's class can innately use magic.
function canUseMagic(PLR: player) :: boolean:
	if getBaseClass({_PLR}) is "Mage":
		return true
	else if getBaseClass({_PLR}) is "Cleric":
		return true
	else if getBaseClass({_PLR}) is "Strategist":
		return true
	else if getBaseClass({_PLR}) is "Troubador":
		return true
	else if getBaseClass({_PLR}) is "Keeper":
		return true
	else if getBaseClass({_PLR}) is "Charlatan":
		return true
	else if getBaseClass({_PLR}) is "Conjurer":
		return true
	else if getBaseClass({_PLR}) is "Poet":
		return true
	else if getBaseClass({_PLR}) is "Mercenary":
		return true
	else if getBaseClass({_PLR}) is "Summoner":
		return true
	else if getBaseClass({_PLR}) is "Survivor":
		return true
		
#Checks to see if a player should be able to initiate a support conversation with an NPC, with a given amount of support points.
function npcSupportHandler(PLR: player,NPC: text):
	#Fast Supports
	if {NPCSupportType::%{_NPC}%} is 0:
		#Prevent a higher-level support from overriding lower-level supports.
		if {supportConvoAvailable.%{_PLR}%::%{_NPC}%} is not set:
			#Baseline (Minimum points needed to start unlocking supports)
			if {NPCSupportPoints.%{_PLR}%::%{_NPC}%} is more than or equal to 50:
				#C-Support
				if {NPCSupportPoints.%{_PLR}%::%{_NPC}%} is less than or equal to 112:
					set {supportConvoAvailable.%{_PLR}%::%{_NPC}%} to 0
				#B-Support
				else if {NPCSupportPoints.%{_PLR}%::%{_NPC}%} is less than or equal to 246:
					set {supportConvoAvailable.%{_PLR}%::%{_NPC}%} to 1
				#A-Support
				else if {NPCSupportPoints.%{_PLR}%::%{_NPC}%} is less than or equal to 541:
					set {supportConvoAvailable.%{_PLR}%::%{_NPC}%} to 2
				#S-Support
				else if {NPCSupportRank.%{_PLR}%::%{_NPC}%} is "A":
					#Prevent S-Supports from becoming available if the player already has one.
					loop {NPCSupportRank.%{_PLR}%::*}:
						if loop-value is "<gold><bold>S":
							set {_blockSupport} to true
							exit 1 loop
					if {_blockSupport} is not set:
						set {supportConvoAvailable.%{_PLR}%::%{_NPC}%} to 3
		
#custom ABS function since Skript's is broken		
function getAbsoluteValue(NUM: number) :: number:
	if {_NUM} is less than 0:
		return ({_NUM} * -1)
		
function getPromotionCompensatedClassLevel(PLR: player) :: number:
	set {_CID} to citizen id of {_PLR}
	if {_CID} is not set:
		set {_lvl} to ({lvl.%{_PLR}%} + (({promoted.%{_PLR}%} - 1) * 3))
		return {_LVL}
	else:
		set {_lvl} to ({npc_lvl.%{_CID}%} + (({npc_promoted.%{_CID}%} - 1) * 3))
		return {_LVL}		

function addClassXP(PLR: entity, XP: number):
	set {_xp} to floor({_xp})
	#Check if PLR is an NPC or player
	set {_CID} to citizen id of {_PLR}
	#Is Player
	if {_CID} is not set:
		if {lvl.%{_PLR}%} is less than {lvlcap.%{_PLR}%}:
			set {_plrBaseClass} to getBaseClass({_PLR})
			if checkSlots({_PLR},"Intuition") is 1:
				add {_XP} to {classXP.%{_PLR}%}
				add {_XP} to {perkTreeXP.%{_plrBaseClass}%.%{_PLR}%::%{activePerkTree.%{_PLR}%::%{_plrBaseClass}%}%}
				add {_XP} to {perkTreeXP.%{_plrBaseClass}%.%{_PLR}%::Global}
			add {_XP} to {classXP.%{_PLR}%}
			add {_XP} to {perkTreeXP.%{_plrBaseClass}%.%{_PLR}%::%{activePerkTree.%{_PLR}%::%{_plrBaseClass}%}%}
			#Warn player if they have maxed out a perk tree
			if {perkTreeXP.%{_plrBaseClass}%.%{_PLR}%::%{activePerkTree.%{_PLR}%::%{_plrBaseClass}%}%} is more than {perksSecondHonorXPRequirement}:
				if {t_hideClassXPTreeFullWarning.%{_PLR}%} is not true:
					send formatted "<light purple>You have unlocked all the perks in your current perk tree. It is recommended to change your active tree to unlock more perks." to {_PLR}
					send formatted "<run command:/perks 2><light green>Click here to change your active perk tree." to {_PLR}
					send formatted "<run command:/ignoreperktreewarning><light red>Click here to suppress this warning until the server restarts." to {_PLR}
			add {_XP} to {perkTreeXP.%{_plrBaseClass}%.%{_PLR}%::Global}
			set {_playerLVL} to getPromotionCompensatedClassLevel({_PLR})
			if {classXP.%{_PLR}%} is more than or equal to ceil((({_playerLVL} + ({_playerLVL} ^ 2)) / (1 + ({promoted.%{_PLR}%} - 1))) + 10):
				set bossbar "classxpbar.%{_PLR}'s UUID%" progress to 0
				make console execute command "/adm_lvlup %{_PLR}%"
			else:
				set {_pitch} to a random number between 0.7 and 1.3
				play sound "entity.experience_orb.pickup" with volume 0.5 and pitch {_pitch} at {_PLR} for {_PLR}
				play 2 (firework spark with speed 0) at {_PLR}
				play 2 (critical hit with speed 1) at {_PLR}
				set {_XP} to ceil((({_playerLVL} + ({_playerLVL} ^ 2)) / (1 + ({promoted.%{_PLR}%} - 1))) + 10)
				set bossbar "classxpbar.%{_PLR}'s UUID%" progress to floor({classXP.%{_PLR}%} / {_XP}) * 100
	#Is NPC
	else:
		if {npc_lvl.%{_CID}%} is less than {npc_lvlcap.%{_PLR}%}:
			add {_XP} to {npc_classXP.%{_CID}%}
			set {_playerLVL} to getPromotionCompensatedClassLevel({_PLR})
			if {npc_classXP.%{_CID}%} is more than or equal to ceil((({_playerLVL} + (({_playerLVL} - 1) ^ 2)) / 2) + 1):
				make console execute command "/npc_lvlup %{_CID}%"
				
command /ignoreperktreewarning:
	trigger:
		set {t_hideClassXPTreeFullWarning.%player%} to true
		send formatted "<light green>Perk tree XP warnings have been suppressed." to the player