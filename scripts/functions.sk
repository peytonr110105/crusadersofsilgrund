#Check Element Type On Spells Function
function checkElement(TYPE: number) :: number:
	if {_TYPE} is 1:
		return 1
	else if {_TYPE} is 2:
		return 2
	else if {_TYPE} is 3:
		return 3
	else if {_TYPE} is 4:
		return 4
	else if {_TYPE} is 5:
		return 1
	else if {_TYPE} is 6:
		return 2
	else if {_TYPE} is 7:
		return 3
	else if {_TYPE} is 8:
		return 4
	else if {_TYPE} is 9:
		return 1
	else if {_TYPE} is 10:
		return 2
	else if {_TYPE} is 11:
		return 3
	else if {_TYPE} is 12:
		return 4
	else if {_TYPE} is 13:
		return 1
	else if {_TYPE} is 14:
		return 2
	else:
		return 0

#Check if the player's class is any variation of the Devil Hunter
function isStylish(PLR: player) :: number:
	if {class.%{_PLR}%} is "Devil Hunter":
		return 1
	else if {class.%{_PLR}%} is "Angel Slayer":
		return 1
	else if {class.%{_PLR}%} is "Platinum Star":
		return 1
	else:
		return 0
		
#Check if the player is a particular class.
function checkPlayerClass(PLR: player,CLS: text) :: number:
	if {_CLS} is "Cavalier":
		if {class.%{_PLR}%} is "Cavalier":
			return 1
		else if {class.%{_PLR}%} is "Paladin":
			return 1
		else if {class.%{_PLR}%} is "Crusader":
			return 1
		else:
			return 0
	else if {_CLS} is "Mage":
		if {class.%{_PLR}%} is "Mage":
			return 1
		else if {class.%{_PLR}%} is "Bishop":
			return 1
		else if {class.%{_PLR}%} is "Archwizard":
			return 1
		else:
			return 0
	else if {_CLS} is "Mercenary":
		if {class.%{_PLR}%} is "Mercenary":
			return 1
		else if {class.%{_PLR}%} is "Hero":
			return 1
		else if {class.%{_PLR}%} is "Junior Lord":
			return 1
		else if {class.%{_PLR}%} is "Lord":
			return 1
		else:
			return 0
	
	
#Remove coloring from a piece of text.
function decolorize(TXT: text) :: text:
	set {_decolored} to uncolored {_TXT}
	remove "<black>" from {_decolored}
	remove "<dark grey>" from {_decolored}
	remove "<dark gray>" from {_decolored}
	remove "<gray>" from {_decolored}
	remove "<grey>" from {_decolored}
	remove "<light gray>" from {_decolored}
	remove "<light grey>" from {_decolored}
	remove "<white>" from {_decolored}
	remove "<blue>" from {_decolored}
	remove "<dark blue>" from {_decolored}
	remove "<cyan>" from {_decolored}
	remove "<light blue>" from {_decolored}
	remove "<green>" from {_decolored}
	remove "<yellow>" from {_decolored}
	remove "<red>" from {_decolored}
	remove "<light red>" from {_decolored}
	remove "<pink>" from {_decolored}
	remove "<light purple>" from {_decolored}
	remove "<brown>" from {_decolored}
	remove "<orange>" from {_decolored}
	remove "<cyan>" from {_decolored}
	remove "<light yellow>" from {_decolored}
	remove "<light green>" from {_decolored}
	remove "<bold>" from {_decolored}
	remove "<purple>" from {_decolored}
	remove "<gold>" from {_decolored}
	return {_decolored}

#Get the type of helmet the player is wearing.
function getHelmet(PLR: player) :: number:
	if {_PLR} is wearing a leather helmet:
		return 1
	else if {_PLR} is wearing a chain helmet:
		return 2
	else if {_PLR} is wearing an iron helmet:
		return 3
	else if {_PLR} is wearing a gold helmet:
		return 4
	else if {_PLR} is wearing a diamond helmet:
		return 5
		
#Get the type of chestplate the player is wearing.
function getChestplate(PLR: player) :: number:
	if {_PLR} is wearing a leather chestplate:
		return 1
	else if {_PLR} is wearing a chain chestplate:
		return 2
	else if {_PLR} is wearing an iron chestplate:
		return 3
	else if {_PLR} is wearing a gold chestplate:
		return 4
	else if {_PLR} is wearing a diamond chestplate:
		return 5

#Get the type of leggings the player is wearing.
function getLeggings(PLR: player) :: number:
	if {_PLR} is wearing leather leggings:
		return 1
	else if {_PLR} is wearing chain leggings:
		return 2
	else if {_PLR} is wearing iron leggings:
		return 3
	else if {_PLR} is wearing gold leggings:
		return 4
	else if {_PLR} is wearing diamond leggings:
		return 5
		
#Get the type of boots the player is wearing.
function getBoots(PLR: player) :: number:
	if {_PLR} is wearing leather boots:
		return 1
	else if {_PLR} is wearing chain boots:
		return 2
	else if {_PLR} is wearing iron boots:
		return 3
	else if {_PLR} is wearing gold boots:
		return 4
	else if {_PLR} is wearing diamond boots:
		return 5
		
#Call this to display a visible buff with accompanying sfx on the player.
function buffSFX(PLR: player):
	set {_pitch} to 0.8
	set {_vol} to 1.3
	play sound "block.snow.break" with volume 2 and pitch 1.3 at {_PLR} for {_PLR}
	play sound "block.snow.break" with volume 2 and pitch 1.3 at {_PLR} for {_PLR}
	play sound "block.snow.break" with volume 2 and pitch 1.3 at {_PLR} for {_PLR}
	play sound "block.snow.break" with volume 2 and pitch 1.3 at {_PLR} for {_PLR}
	wait 5 ticks
	loop 7 times:
		play sound "block.stone.place" with volume {_vol} and pitch {_pitch} at {_PLR} for {_PLR}
		add 0.1 to {_pitch}
		subtract 0.1 from {_vol}
		wait 1 ticks

#Get helmet damage resistance.
function helmType(PLR: player) :: number:
	if {_PLR} is wearing a leather helmet:
		return 0.25
	else if {_PLR} is wearing a chain helmet:
		return 0.55
	else if {_PLR} is wearing an iron helmet:
		return 0.75
	else if {_PLR} is wearing a gold helmet:
		return 0.25
	else if {_PLR} is wearing a diamond helmet:
		return 0.8
		
#Get chestplate damage resistance.
function chestType(PLR: player) :: number:
	if {_PLR} is wearing a leather chestplate:
		return 0.25
	else if {_PLR} is wearing a chain chestplate:
		return 0.55
	else if {_PLR} is wearing an iron chestplate:
		return 1
	else if {_PLR} is wearing a gold chestplate:
		return 0.5
	else if {_PLR} is wearing a diamond chestplate:
		return 2

#Get leggings damage resistance.
function legType(PLR: player) :: number:
	if {_PLR} is wearing leather leggings:
		return 0.25
	else if {_PLR} is wearing chain leggings:
		return 0.55
	else if {_PLR} is wearing iron leggings:
		return 1
	else if {_PLR} is wearing gold leggings:
		return 0.5
	else if {_PLR} is wearing diamond leggings:
		return 2
		
#Get boots damage resistance.
function btType(PLR: player) :: number:
	if {_PLR} is wearing leather boots:
		return 0.25
	else if {_PLR} is wearing chain boots:
		return 0.55
	else if {_PLR} is wearing iron boots:
		return 0.75
	else if {_PLR} is wearing gold boots:
		return 0.25
	else if {_PLR} is wearing diamond boots:
		return 0.8

#Special skill handler.	
function specialCheck(PLR: player, PCT: number, CAP: number) :: number:
	set {_odds} to floor((({skl.%{_PLR}%} + {sklbuff.%{_PLR}%}) * {_PCT}) ^ 0.95)
	if {_odds} is more than {_CAP}:
		set {_odds} to {_CAP}
	if the 6th line of the lore of {_PLR}'s tool contains "Slaying":
		add 10 to {_odds}
	if the 2nd line of the lore of {_PLR}'s tool contains "Wrath":
		if {_PLR}'s health is less than ({_PLR}'s maximum health * 0.5):
			add (({_PLR}'s maximum health * 0.5) - {_PLR}'s health) to {_odds}
	add {crushing.%{_PLR}%} to {_odds}
	if the name of {_PLR}'s tool is "<gold><bold>Rex Hasta":
		if the 6th line of the lore of {_PLR}'s tool contains "Unique":
			add 20 to {_odds}
	else if the name of {_PLR}'s tool is "<gold><bold>Hauteclere":
		if the 6th line of the lore of {_PLR}'s tool contains "Unique":
			add 20 to {_odds}
	if {dSoulActive.%{_PLR}%} is set:
		set {_DraconicAura} to checkSlots({_PLR},"Draconic Aura")
		if {_DraconicAura} is 1:
			add 10 to {_odds}
	chance of {_odds}%:
		return 1
	else if {_odds} is more than 100:
		return 1
	else:
		return 0

#Start a quest with the given arguments.
function startQuest(PLR: player , QUEST: text , DESC: text):
	set {quests.%{_PLR}%::%{_QUEST}%} to 1
	send title "<white><bold>New Quest: %{_QUEST}%" with subtitle "%{_DESC}%" to {_PLR} for 5 seconds with fade in 0.25 seconds and fade out 0.25 seconds
	play sound "entity.fireworkrocket.launch" with volume 0.75 and pitch 1 at {_PLR} for {_PLR}
	play sound "entity.fireworkrocket.twinkle" with volume 0.4 and pitch 1.5 at {_PLR} for {_PLR}
	play sound "entity.player.levelup" with volume 1 and pitch 1 at {_PLR} for {_PLR}
	play 60 (firework spark with speed 1) at {_PLR}
	play 60 (snow shovel with speed 1) at {_PLR}

#Update a quest's progress.
function setQuestProgress(PLR: player , QUEST: text , STAGE: number, INFO: text):
	set {quests.%{_PLR}%::%{_QUEST}%} to {_STAGE}
	send title "" with subtitle "%{_INFO}%" to {_PLR} for 2.5 seconds with fade in 0.25 seconds and fade out 0.25 seconds
	play sound "entity.player.levelup" with volume 0.5 and pitch 1.5 at {_PLR} for {_PLR}
	play sound "entity.fireworkrocket.twinkle" with volume 0.4 and pitch 1.5 at {_PLR} for {_PLR}
	play 10 (firework spark with speed 1) at {_PLR}
	play 10 (snow shovel with speed 1) at {_PLR}
	
#Complete a quest.
function finishQuest(PLR: player , QUEST: text , DESC: text):
	set {quests.%{_PLR}%::%{_QUEST}%} to 999
	send title "<gold><bold>Quest Complete: %{_QUEST}%" with subtitle "%{_DESC}%" to {_PLR} for 5 seconds with fade in 0.25 seconds and fade out 0.25 seconds
	play sound "entity.player.levelup" with volume 1 and pitch 0.75 at {_PLR} for {_PLR}
	play sound "entity.fireworkrocket.twinkle" with volume 1 and pitch 1.5 at {_PLR} for {_PLR}
	play 60 (firework spark with speed 1) at {_PLR}
	play 60 (snow shovel with speed 1) at {_PLR}
	
#Fail a quest, preventing the player from completing it.
function failQuest(PLR: player , QUEST: text , DESC: text):
	set {quests.%{_PLR}%::%{_QUEST}%} to 998
	send title "<light red><bold>Quest Failed: %{_QUEST}%" with subtitle "%{_DESC}%" to {_PLR} for 5 seconds with fade in 0.25 seconds and fade out 0.25 seconds
	play 60 (red wool break with speed 1) at {_PLR}
	show mob spawner flames on {_PLR}
	
#Calculates the player's preferred/best weapon using their weapon ranks.
function bestWeapon(PLR: player) :: number:
	if ({weaponrank.%{_PLR}%::swords} + {weaponrank.%{_PLR}%::lances} + {weaponrank.%{_PLR}%::bows} + {weaponrank.%{_PLR}%::magic} + {weaponrank.%{_PLR}%::staves}) is more than ({weaponrank.%{_PLR}%::axes} + {weaponrank.%{_PLR}%::lances} + {weaponrank.%{_PLR}%::bows} + {weaponrank.%{_PLR}%::magic} + {weaponrank.%{_PLR}%::staves}):
		return 1
	else if ({weaponrank.%{_PLR}%::axes} + {weaponrank.%{_PLR}%::lances} + {weaponrank.%{_PLR}%::bows} + {weaponrank.%{_PLR}%::magic} + {weaponrank.%{_PLR}%::staves}) is more than ({weaponrank.%{_PLR}%::swords} + {weaponrank.%{_PLR}%::lances} + {weaponrank.%{_PLR}%::bows} + {weaponrank.%{_PLR}%::magic} + {weaponrank.%{_PLR}%::staves}):
		return 2
	else if ({weaponrank.%{_PLR}%::lances} + {weaponrank.%{_PLR}%::swords} + {weaponrank.%{_PLR}%::bows} + {weaponrank.%{_PLR}%::magic} + {weaponrank.%{_PLR}%::staves}) is more than ({weaponrank.%{_PLR}%::axes} + {weaponrank.%{_PLR}%::swords} + {weaponrank.%{_PLR}%::bows} + {weaponrank.%{_PLR}%::magic} + {weaponrank.%{_PLR}%::staves}):
		return 3
	else if ({weaponrank.%{_PLR}%::bows} + {weaponrank.%{_PLR}%::lances} + {weaponrank.%{_PLR}%::swords} + {weaponrank.%{_PLR}%::magic} + {weaponrank.%{_PLR}%::staves}) is more than ({weaponrank.%{_PLR}%::axes} + {weaponrank.%{_PLR}%::lances} + {weaponrank.%{_PLR}%::swords} + {weaponrank.%{_PLR}%::magic} + {weaponrank.%{_PLR}%::staves}):
		return 4
	else if ({weaponrank.%{_PLR}%::magic} + {weaponrank.%{_PLR}%::lances} + {weaponrank.%{_PLR}%::bows} + {weaponrank.%{_PLR}%::swords} + {weaponrank.%{_PLR}%::staves}) is more than ({weaponrank.%{_PLR}%::axes} + {weaponrank.%{_PLR}%::lances} + {weaponrank.%{_PLR}%::bows} + {weaponrank.%{_PLR}%::swords} + {weaponrank.%{_PLR}%::staves}):
		return 5
	else if ({weaponrank.%{_PLR}%::staves} + {weaponrank.%{_PLR}%::lances} + {weaponrank.%{_PLR}%::bows} + {weaponrank.%{_PLR}%::magic} + {weaponrank.%{_PLR}%::swords}) is more than ({weaponrank.%{_PLR}%::axes} + {weaponrank.%{_PLR}%::lances} + {weaponrank.%{_PLR}%::bows} + {weaponrank.%{_PLR}%::magic} + {weaponrank.%{_PLR}%::swords}):
		return 6
	
#Check if the item's name is a valid staff.
function isStaff(NAME: text) :: number:
	if {_NAME} contains "<yellow><bold>Heal":
		return 1
	else if {_NAME} contains "<yellow><bold>Mend":
		return 1
	else if {_NAME} contains "<yellow><bold>Rehabilitate":
		return 1
	else if {_NAME} contains "<yellow><bold>Wrys":
		return 1
	else if {_NAME} contains "<yellow><bold>Imbue":
		return 1
	else if {_NAME} contains "<yellow><bold>Renewal":
		return 1
	else if {_NAME} contains "<yellow><bold>Miracle":
		return 1
	else if {_NAME} contains "<yellow><bold>Aum":
		return 1
	else if {_NAME} contains "<yellow><bold>Fortify":
		return 1
	else:
		return 0
		
#Check if the player's class is any variation of the Cleric.
function isCleric(PLR: player) :: number:
	if {class.%{_PLR}%} is "Cleric":
		return 1
	else if {class.%{_PLR}%} is "Bishop":
		return 1
	else if {class.%{_PLR}%} is "Sage":
		return 1
	else:
		return 0
	
#Unused.
function npcChat(PLR: player , TXT: text):
	send formatted {_TXT} to {_PLR}
		
#Perk Slot Check Function
function checkSlots(PLR: player , skill: text) :: number:
	if {skillslot1.%{_PLR}%} is "%{_skill}%":
		return 1
	else if {skillslot2.%{_PLR}%} is "%{_skill}%":
		return 1
	else if {skillslot3.%{_PLR}%} is "%{_skill}%":
		return 1
	else if {skillslot4.%{_PLR}%} is "%{_skill}%":
		return 1
	else if {skillslot5.%{_PLR}%} is "%{_skill}%":
		return 1
	else:
		return 0
		
#Check if the player should be able to wield Magic Wands.
function checkClass(PLR: player) :: number:
	if {class.%{_PLR}%} is "Mage":
		return 1
	else if {class.%{_PLR}%} is "Sage":
		return 1
	else if {class.%{_PLR}%} is "Sorcerer":
		return 1
	else if {class.%{_PLR}%} is "Archwizard":
		return 1
	else if {class.%{_PLR}%} is "Strategist":
		return 1
	else if {class.%{_PLR}%} is "Tactician":
		return 1
	else if {class.%{_PLR}%} is "Grandmaster":
		return 1
	else:
		return 0
		
#Checks to see if a player should be able to initiate a support conversation with an NPC, with a given amount of support points.
function npcSupportHandler(PLR: player,NPC: text):
	#Fast Supports
	if {NPCSupportType::%{_NPC}%} is 0:
		#Prevent a higher-level support from overriding lower-level supports.
		if {supportConvoAvailable.%{_PLR}%::%{_NPC}%} is not set:
			#Baseline (Minimum points needed to start unlocking supports)
			if {NPCSupportPoints.%{_PLR}%::%{_NPC}%} is more than or equal to 50:
				#C-Support
				if {NPCSupportPoints.%{_PLR}%::%{_NPC}%} is less than or equal to 112:
					set {supportConvoAvailable.%{_PLR}%::%{_NPC}%} to 0
				#B-Support
				else if {NPCSupportPoints.%{_PLR}%::%{_NPC}%} is less than or equal to 246:
					set {supportConvoAvailable.%{_PLR}%::%{_NPC}%} to 1
				#A-Support
				else if {NPCSupportPoints.%{_PLR}%::%{_NPC}%} is less than or equal to 541:
					set {supportConvoAvailable.%{_PLR}%::%{_NPC}%} to 2
				#S-Support
				else if {NPCSupportRank.%{_PLR}%::%{_NPC}%} is "A":
					#Prevent S-Supports from becoming available if the player already has one.
					loop {NPCSupportRank.%{_PLR}%::*}:
						if loop-value is "<gold><bold>S":
							set {_blockSupport} to true
							exit 1 loop
					if {_blockSupport} is not set:
						set {supportConvoAvailable.%{_PLR}%::%{_NPC}%} to 3
				