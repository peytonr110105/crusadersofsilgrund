#Lockpicking
#Doors/Trapdoors/Etc
on right click:
	if event-block is set:
		#Block Lock functionality
		if the name of the player's tool is "<light yellow>Block Lock":
			#Allow admins to specify lock strength with the 4th line of the item's description
			if the 3rd line of the lore of the player's tool is "<white>Lock Strength:":
				set {_lockStrength} to "%4th line of the lore of the player's tool%" parsed as integer
			else:
				set {_lockStrength} to 50
			#Add the block's location to the list of locked blocks
			add location of event-block to {lockedBlocks::*}
			set {lockedBlocksAbilityReq::%location of event-block%} to {_lockStrength}
			#Special case for doors, they're technically two blocks so we need to lock both.
			if "%block above event-block%" contains "door":
				add location of block above event-block to {lockedBlocks::*}
				set {lockedBlocksAbilityReq::%location of block above event-block%} to {_lockStrength}
			if "%block below event-block%" contains "door":
				add location of block below event-block to {lockedBlocks::*}
				set {lockedBlocksAbilityReq::%location of block below event-block%} to {_lockStrength}
			send formatted "<light yellow>This block has been locked." to the player
			if player's game mode is not creative:
				remove 1 of tool from tool
		else if the name of the player's tool is "<light yellow>Lock Remover":
			loop {lockedBlocks::*}:
				if "%loop-value%" is "%location of event-block%":
					clear {lockedBlocks::%loop-index%}
					send formatted "<light yellow>Lock removed." to the player
		#Locked block check
		else:
			loop {lockedBlocks::*}:
				if "%location of event-block%" is "%loop-value%":
					#send formatted "debug: found locked block" to the player
					loop {unlockedBlocks.%player%::*}:
						if "%location of event-block%" is "%loop-value-2%":
							#send "debug: block unlocked" to the player
							#send "%event-block%" to the player
							set {_blockAlreadyUnlocked} to true
							if "%event-block%" contains "door":
								open event-block
								if "%block above event-block%" contains "door":
									open block above event-block
								if "%block below event-block%" contains "door":
									open block below event-block
							wait 2 seconds
							close event-block
							if "%block above event-block%" contains "door":
								close block above event-block
							if "%block below event-block%" contains "door":
								close block below event-block
							exit 1 loop
					if {_blockAlreadyUnlocked} is not true:
						cancel event
						send formatted "<light yellow>This block is locked. What will you do?" to the player
						#Skript doesn't allow for coordinates to be used as a command-line argument, so we write the block location as a temp variable in order to manipulate the block's lock.
						set {t_lockedBlockToPick.%player%} to event-block
						wait 1 second
						send formatted "<run command:/lockpicking_pick_lock><light blue>Pick the lock [Lockpicking %{lockedBlocksAbilityReq::%location of event-block%}%]" to the player
						loop all items in the player's inventory:
							if the name of the loop-item contains "Rusted Key":
								send formatted "<run command:/lockpicking_use_rusted_key><light blue>Use a Rusted Key (item will be consumed)" to the player
							else if the name of the loop-item contains "Rusty Key":
								send formatted "<run command:/lockpicking_use_rusted_key><light blue>Use a Rusty Key (item will be consumed)" to the player							
							else if the name of the loop-item contains "Master Key":
								if {itemCooldowns.%player%::Master Key} is not set:
									send formatted "<run command:/lockpicking_use_master_key><gold>Use the Master Key" to the player
								else:
									send formatted "<light red>Use the Master Key (Time remaining: %{itemCooldowns.%player%::Master Key} / 60% mins)" to the player
					else:
						exit 1 loop

command /lockpicking_pick_lock:
	description: helper command for using lockpicking ability
	trigger:
		set {_loc} to location of {t_lockedBlockToPick.%player%}
		if {abilities.%player%::Lockpicking} is more than or equal to {lockedBlocksAbilityReq::%{_loc}%}:
			set {_cxpbonus} to (floor({abilities.%player%::Lockpicking} / 2)) + 50 + ({lvl.%player%} * 2)
			addClassXP(player,{_cxpbonus})
			send formatted "<light yellow>The lock gives way! This block's lock has been picked."
			send formatted "<light yellow>[Exploration Bonus] +%{_cxpbonus}% EXP" to the player
			add {_loc} to {unlockedBlocks.%player%::*}
			#send "%block above {t_lockedBlockToPick.%player%}%" to the player
			if "%block above {t_lockedBlockToPick.%player%}%" contains "door":
				add location of block {_loc} to {unlockedBlocks.%player%::*}
			if "%block below {t_lockedBlockToPick.%player%}%" contains "door":
				add location of block below {_loc} to {unlockedBlocks.%player%::*}
		#Allow the player to attempt to force the lock if they're slightly under the ability requirement to open it.
		else if ({abilities.%player%::Lockpicking} + 10) is more than or equal to {lockedBlocksAbilityReq::%{_loc}%}:
			send formatted "<light red>The lock won't budge, but you get the feeling you might be able to force it open."
			wait 1 second
			send formatted "<run command:/lockpicking_force_lock %({lockedBlocksAbilityReq::%{_loc}%} - {abilities.%player%::Lockpicking}) * 10%><light blue>Force the lock open [Chance to Fail: %({lockedBlocksAbilityReq::%{_loc}%} - {abilities.%player%::Lockpicking}) * 10%]"
		else:
			send formatted "<light red>You can't get this lock open with your current skills. You might be able to use a key, if you can find one..." to the player
						
command /lockpicking_force_lock <number>:
	description: helper command for forcing a lock open
	trigger:
		send formatted "<light yellow>You attempt to force the lock open..."
		wait 2 seconds
		chance of arg 1%:
			send formatted "<light red>Blast! The lock won't give way. You'll have to try again later..."
		else:
			set {_cxpbonus} to (floor({abilities.%player%::Lockpicking} / 4)) + 50 + ({lvl.%player%} * 2)
			addClassXP(player,{_cxpbonus})
			send formatted "<light yellow>The lock gives way! This block's lock has been picked."
			send formatted "<light yellow>[Exploration Bonus] +%{_cxpbonus}% EXP" to the player
			add location of {t_lockedBlockToPick.%player%} to {unlockedBlocks.%player%::*}
			if "%block above {t_lockedBlockToPick.%player%}%" contains "door":
				add location of block above {t_lockedBlockToPick.%player%} to {unlockedBlocks.%player%::*}
			if "%block below {t_lockedBlockToPick.%player%}%" contains "door":
				add location of block below {t_lockedBlockToPick.%player%} to {unlockedBlocks.%player%::*}
				
command /lockpicking_use_rusted_key:
	description: helper command for using a rusted key to open a lock
	trigger:
		loop all items in the player's inventory:
			if the name of the loop-item contains "Rusted Key":
				addClassXP(player,(50 + ({lvl.%player%} * 2)))
				remove 1 of loop-item from loop-item
				send "<light yellow>Rusted Key used. The lock has been opened."
				send formatted "<light yellow>[Exploration Bonus] +%50 + ({lvl.%player%} * 2)% EXP" to the player
				add location of {t_lockedBlockToPick.%player%} to {unlockedBlocks.%player%::*}
				if "%block above {t_lockedBlockToPick.%player%}%" contains "door":
					add location of block above {t_lockedBlockToPick.%player%} to {unlockedBlocks.%player%::*}
				if "%block below {t_lockedBlockToPick.%player%}%" contains "door":
					add location of block below {t_lockedBlockToPick.%player%} to {unlockedBlocks.%player%::*}
				exit 1 loop
			else if the name of the loop-item contains "Rusty Key":
				addClassXP(player,(50 + ({lvl.%player%} * 2)))
				remove 1 of loop-item from loop-item
				send "<light yellow>Rusted Key used. The lock has been opened."
				send formatted "<light yellow>[Exploration Bonus] +%50 + ({lvl.%player%} * 2)% EXP" to the player
				send "<light yellow>Rusted Key used. The lock has been opened."
				add location of {t_lockedBlockToPick.%player%} to {unlockedBlocks.%player%::*}
				if "%block above {t_lockedBlockToPick.%player%}%" contains "door":
					add location of block above {t_lockedBlockToPick.%player%} to {unlockedBlocks.%player%::*}
				if "%block below {t_lockedBlockToPick.%player%}%" contains "door":
					add location of block below {t_lockedBlockToPick.%player%} to {unlockedBlocks.%player%::*}
				exit 1 loop				
				
command /lockpicking_use_master_key:
	description: helper command for using the Master Key to open a lock
	trigger:
		loop all items in the player's inventory:
			if the name of the loop-item contains "Master Key":
				set {itemCooldowns.%player%::Master Key} to 3600
				send "<light yellow>Master Key used. The lock has been opened."
				addClassXP(player,(50 + ({lvl.%player%} * 2)))
				send formatted "<light yellow>[Exploration Bonus] +%50 + ({lvl.%player%} * 2)% EXP" to the player
				add location of {t_lockedBlockToPick.%player%} to {unlockedBlocks.%player%::*}
				if "%block above {t_lockedBlockToPick.%player%}%" contains "door":
					add location of block above {t_lockedBlockToPick.%player%} to {unlockedBlocks.%player%::*}
				if "%block below {t_lockedBlockToPick.%player%}%" contains "door":
					add location of block below {t_lockedBlockToPick.%player%} to {unlockedBlocks.%player%::*}
				exit 1 loop
				
command /debug_show_locked_doors:
	trigger:
		loop {lockedBlocks::*}:
			send formatted "%loop-value%" to the player
			
command /debug_remove_all_locks:
	description: removes all locks in CoS, use only for pre-release debugging!
	trigger:
		clear {lockedBlocks::*}
		loop all players:
			clear {unlockedBlocks.%player%::*}
			
#Consumables

#A player's Medicine ability restores extra HP equal to 10%% of their Medicine skill rounded up
#Medicine also reduces consumables cooldown by (2 * Medicine)s
on right click:
	if the name of the player's tool is "<light green><bold>Sacred Herb":
		if {traits.%player%::Way of the Warrior} is not set:
			if {itemCooldowns.%player%::Green Herb} is not set:
				remove 1 of tool from tool
				play sound "entity.player.swim" with volume 2 and pitch 1.5 at the player for the player
				play sound "item.bucket.fill" with volume 2 and pitch 1.3 at the player for the player
				if {lowPerformanceMode.%player%} is not set:
					play 30 (light green wool break with speed 1) at the player
				else:
					play 10 (light green wool break with speed 1) at the player
				heal the player by 5 + ceil({abilities.%player%::Medicine} * 0.05)
				if {traits.%player%::Protective} is set:
					heal the player by floor((5 + ceil({abilities.%player%::Medicine} * 0.05)) / 2)
				send "<light blue>Sacred Herb was used." to the player
				if {abilities.%player%::Medicine} is less than 30:
					set {itemCooldowns.%player%::Green Herb} to (60 - ({abilities.%player%::Medicine} * 2))
	else if the name of the player's tool is "<light yellow><bold>Golden Herb":
		if {traits.%player%::Way of the Warrior} is not set:
			if {itemCooldowns.%player%::Golden Herb} is not set:
				remove 1 of tool from tool
				play sound "block.enchantment_table.use" with volume 3 and pitch 2 at the player for the player
				play sound "entity.player.swim" with volume 1 and pitch 1.5 at the player for the player
				if {lowPerformanceMode.%player%} is not set:
					play 30 (gold block break with speed 1) at the player
				else:
					play 10 (gold block break with speed 1) at the player
				heal the player by 10 + ceil({abilities.%player%::Medicine} * 0.05) hearts
				if {traits.%player%::Protective} is set:
					heal the player by floor((10 + ceil({abilities.%player%::Medicine} * 0.05)) / 2)
				send "<light blue>Golden Herb was used." to the player
				if {abilities.%player%::Medicine} is less than 50:
					set {itemCooldowns.%player%::Golden Herb} to (100 - ({abilities.%player%::Medicine} * 2))
	else if the name of the player's tool is "<green><bold>Baked Herb":
		if {traits.%player%::Way of the Warrior} is not set:
			if {itemCooldowns.%player%::Baked Herb} is not set:
				remove 1 of tool from tool
				play sound "entity.player.swim" with volume 2 and pitch 1.5 at the player for the player
				play sound "item.bucket.fill" with volume 2 and pitch 1.3 at the player for the player
				if {lowPerformanceMode.%player%} is not set:
					play 30 (light green wool break with speed 1) at the player
				else:
					play 10 (light green wool break with speed 1) at the player
				heal the player by 2.5 + ceil({abilities.%player%::Medicine} * 0.05)
				if {traits.%player%::Protective} is set:
					heal the player by floor((2.5 + ceil({abilities.%player%::Medicine} * 0.05)) / 2)
				increase the player's food level by 2.5 + ceil({abilities.%player%::Medicine} * 0.05)
				send "<light blue>Baked Herb was used." to the player
				if {abilities.%player%::Medicine} is less than 30:
					set {itemCooldowns.%player%::Baked Herb} to (60 - ({abilities.%player%::Medicine} * 2))
	else if the name of the player's tool is "<light yellow><bold>Baked Golden Herb":
		if {traits.%player%::Way of the Warrior} is not set:
			if {itemCooldowns.%player%::Baked Golden Herb} is not set:
				remove 1 of tool from tool
				play sound "block.enchantment_table.use" with volume 3 and pitch 2 at the player for the player
				play sound "entity.player.swim" with volume 1 and pitch 1.5 at the player for the player
				if {lowPerformanceMode.%player%} is not set:
					play 30 (gold block break with speed 1) at the player
				else:
					play 10 (gold block break with speed 1) at the player
				heal the player by 5 + ceil({abilities.%player%::Medicine} * 0.05)
				if {traits.%player%::Protective} is set:
					heal the player by floor((5 + ceil({abilities.%player%::Medicine} * 0.05)) / 2)
				increase the player's food level by 5 + ceil({abilities.%player%::Medicine} * 0.01)
				send "<light blue>Baked Golden Herb was used." to the player
				if {abilities.%player%::Medicine} is less than 50:
					set {itemCooldowns.%player%::Baked Golden Herb} to (100 - ({abilities.%player%::Medicine} * 2))
	else if the name of the player's tool is "<orange>Holy Water":
		cancel event
		if {traits.%player%::Way of the Warrior} is not set:
			if {itemCooldowns.%player%::Holy Water} is not set:
				if {abilities.%player%::Medicine} is less than 100:
					set {itemCooldowns.%player%::Holy Water} to (200 - ({abilities.%player%::Medicine} * 2))
				remove 1 of event-item from the player
				play sound "block.glass.break" with volume 1 and pitch 1 at the player
				loop all monsters in radius 40 of the player:
					damage loop-monster by (loop-monster's maximum health * 0.8)
					play 20 (water splash with speed 1) at the loop-monster
					play 20 (firework spark with speed 1) at the loop-monster
	else if the name of the player's tool is "<orange>Restoration Kit":
		cancel event
		remove 1 of event-item from the player
		make player execute command "/fix all"
	else if the name of the player's tool is "<orange>Untouchable":
		if {traits.%player%::Way of the Warrior} is not set:
			if {itemCooldowns.%player%::Untouchable} is not set:
				remove 1 of event-item from the player
				play sound "block.glass.break" with volume 1 and pitch 1 at the player
				set {itemCooldowns.%player%::Untouchable} to (360 - ({abilities.%player%::Medicine} * 2))
				apply resistance 10 to the player for 25 seconds
				apply regeneration 20 to the player for 25 seconds
				buffSFX(player)
				play mob spawner flames at the player
	else if the name of the player's tool is "<orange>Devil Heart":
		cancel event
		if {traits.%player%::Way of the Warrior} is not set:
			if {itemCooldowns.%player%::Devil Heart} is not set:
				remove 1 of event-item from the player
				play sound "block.glass.break" with volume 1 and pitch 1 at the player
				set {itemCooldowns.%player%::Devil Heart} to (80 - ({abilities.%player%::Medicine} * 2))
				buffSFX(player)
				play mob spawner flames at the player
				set {dtMeter.%player%} to {dtMeterCap.%player%}
				set {_dtMeterDisplay} to {dtMeter.%player%} / {dtMeterCap.%player%} * 100
				set bossbar "dt.%player's uuid%" progress to {_dtMeterDisplay}			
	else if the name of the player's tool is "<orange>Sparkling Water":
		cancel event
		if {traits.%player%::Way of the Warrior} is not set:
			if {itemCooldowns.%player%::Sparkling Water} is not set:
				remove 1 of event-item from the player
				play sound "block.glass.break" with volume 1 and pitch 1 at the player
				if {abilities.%player%::Medicine} is less than 70:
					set {itemCooldowns.%player%::Sparkling Water} to (140 - ({abilities.%player%::Medicine} * 2))
				loop all players in radius 30 of the player:
					if {party.%player%} is {party.%loop-player%}:
						heal loop-player by (loop-player's maximum health * 0.5)
						if {traits.%player%::Protective} is set:
							heal loop-player by floor((loop-player's maximum health * 0.5) / 2)
						play 20 (light green wool break with speed 1) at loop-player
						play 20 (water splash with speed 1) at loop-player
	else if the name of the player's tool is "<orange>Bottled Blizzard":
		cancel event
		if {traits.%player%::Way of the Warrior} is not set:
			if {itemCooldowns.%player%::Bottled Blizzard} is not set:
				remove 1 of event-item from the player
				play sound "block.glass.break" with volume 1 and pitch 1 at the player
				if {abilities.%player%::Medicine} is less than 68:
					set {itemCooldowns.%player%::Bottled Blizzard} to (135 - ({abilities.%player%::Medicine} * 2))
				loop all monsters in radius 30 of the player:
					apply slowness 127 to the loop-monster for 20 seconds
					apply weakness 8 to the loop-monster for 20 seconds
					play 20 (snow block break with speed 1) at the loop-monster
					play 20 (ice block break with speed 1) at the loop-monster
	else if the name of the player's tool is "<orange>War Horn":
		cancel event
		if {traits.%player%::Way of the Warrior} is not set:
			if {itemCooldowns.%player%::War Horn} is not set:
				remove 1 of event-item from the player
				play sound "entity.villager.yes" with volume 1.3 and pitch 0.7 at the player
				wait 1 seconds
				play sound "entity.lightning.thunder" with volume 2 and pitch 0.7 at the player
				play sound "entity.generic.explode" with volume 1 and pitch 1 at the player
				if {abilities.%player%::Medicine} is less than 50:
					set {itemCooldowns.%player%::War Horn} to (100 - ({abilities.%player%::Medicine} * 2))
				loop all players in radius 30 of the player:
					if {party.%player%} is {party.%loop-player%}:
						add loop-player to {_playersBuffed::*}
						apply strength 5 to loop-player for 20 seconds
						apply swiftness 5 to loop-player for 20 seconds
						set {hasAdrenalineBuff.%loop-player%} to true
						send "<light green>%player% granted you Adrenaline for 20 seconds!" to loop-player
				wait 20 seconds
				loop {_playersBuffed::*}:
					clear {hasAdrenalineBuff.%loop-value%}
					send "<light red>Adrenaline wore off!" to loop-value
	else if the name of the player's tool is "<orange>Rollcall Orb":
		remove 1 of event-item from the player
		loop all players in radius 200 of the player:
			if {party.%player%} is {party.%loop-player%}:
				if loop-player is not the player:
					teleport loop-player to the player
	else if the name of the player's tool is "<orange>Escape Orb":
		cancel event
		remove 1 of event-item from the player
		send "%{spawnpoint.%player%}%" to the player
		teleport the player to {spawnpoint.%player%}
		heal the player by player's maximum health
		increase the player's food level by 20
		wait 5 tick
		play 20 (purple wool break with speed 1) at the player
	else if the name of the player's tool is "<orange>Special Blade":
		cancel event
		if {traits.%player%::Way of the Warrior} is not set:
			if {itemCooldowns.%player%::Special Blade} is not set:
				if {abilities.%player%::Medicine} is less than 40:
					set {itemCooldowns.%player%::Special Blade} to (80 - ({abilities.%player%::Medicine} * 2))
				remove 1 of event-item from the player
				set {forceSpecialProc.%player%} to 3
				play mob spawner flames at the player
				buffSFX(player)
	else if the name of the player's tool is "<orange>Wind Boots":
		cancel event
		if {traits.%player%::Way of the Warrior} is not set:
			if {itemCooldowns.%player%::Wind Boots} is not set:
				remove 1 of event-item from the player
				if {abilities.%player%::Medicine} is less than 25:
					set {itemCooldowns.%player%::Wind Boots} to (50 - ({abilities.%player%::Medicine} * 2))
				loop all players in radius 30 of the player:
					apply swiftness 4 to loop-player for 30 seconds
					apply haste 4 to loop-player for 30 seconds
				
#Elixr of Life special case, since it's a potion the normal right-click event doesn't activate
on consume:
	if the name of the player's tool is "<orange>Elixir of Life":
		cancel event
		if {traits.%player%::Way of the Warrior} is not set:
			if {itemCooldowns.%player%::Elixir of Life} is not set:
				set {itemCooldowns.%player%::Elixir of Life} to (265 - ({abilities.%player%::Medicine} * 2))
				remove 1 of event-item from the player
				heal the player by player's maximum health
				increase the player's food level by 20
				play 10 wolf hearts at the player
		
#Consumable cooldown behavior
every second:
	loop all players:
		if {itemCooldowns.%loop-player%::*} is set:
			loop {itemCooldowns.%loop-player%::*}:
				subtract 1 from {itemCooldowns.%loop-player%::%loop-index%}
				if {traits.%loop-player%::Physician} is set:
					subtract 1 from {itemCooldowns.%loop-player%::%loop-index%}
				if {itemCooldowns.%loop-player%::%loop-index%} is less than or equal to 0:
					play sound "entity.experience_orb.pickup" with volume 2 and pitch 1 at loop-player for loop-player
					send formatted "<light green>Your %loop-index% can be used again." to loop-player
					clear {itemCooldowns.%loop-player%::%loop-index%}

#Survival
#Grants a random chance for double drops from blocks based on Survival
on mine:
	if event-block is any ore:
		set {_dupeOK} to true
	else if event-block is any log:
		set {_dupeOK} to true
	if {_dupeOK} is true:
		set {_odds} to floor({abilities.%player%::Survival} * 0.25)
		chance of {_odds}%:
			if event-block is dark oak log:
				drop 1 dark oak log at the event-location
			else:
				drop event-block at the event-location
	
#Grants boosted healing based on Medicine ability
on heal:
	loop 3 times:
		chance of (({abilities.%player%::Medicine} / 2) - 10)%:
			apply regeneration 2 to the player for 1 second	

#Grants extra hunger from eating foods with a higher Survival ability			
on consume:
	loop 3 times:
		chance of {abilities.%player%::Survival}%:
			increase the player's food level by 0.5
		
#Grants a random chance to slightly repair equipment in the player's inventory with a high Survival skill		
every 1.5 minutes:
	loop all players:
		clear {_repairedItems::*}
		loop all items in the loop-player's inventory:
			#Prevents non-tools from being "repaired" (AKA Red Herb fix)
			if max durability of the loop-item is not 0:
				if damage value of the loop-item is more than 0:
					chance of floor({abilities.%loop-player%::Survival} / 5)%:
						subtract ceil({abilities.%loop-player%::Repair} / 5) from damage value of the loop-item
						add loop-item to {_repairedItems::*}
		if {_repairedItems::*} is set:
			send formatted "<light yellow>Your Survival ability helped you to maintain (+%ceil({abilities.%loop-player%::Repair} / 5)% durability): %{_repairedItems::*}%." to the loop-player